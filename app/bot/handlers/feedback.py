from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates

router = Router(name="feedback2")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–æ–∫
def feedback_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb:rate:good"),
            InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
    ])

# 1) –û—Ü–µ–Ω–∫–∞-—ç–º–æ–¥–∑–∏
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_rate(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        await cb.answer("–û–∫")
    except Exception:
        pass
    await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç")

# 2) –ó–∞–ø—Ä–æ—Å ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª
@router.callback_query(F.data == "fb:phrase")
async def on_phrase_start(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        await cb.answer()
    except Exception:
        pass
    await state.set_state(FeedbackStates.wait_phrase)
    await cb.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /menu."
    )

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ¬´–Ω–∏–∂–Ω–∏–µ¬ª –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –º–µ–Ω—é
PASS_THROUGH_TEXTS = {
    "–ú–µ–Ω—é", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",
    "–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
    "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å",
}

# 3) –ü—Ä–∏–Ω—è—Ç—å —Ñ—Ä–∞–∑—É
@router.message(FeedbackStates.wait_phrase, F.text)
async def phrase_received(msg: Message, state: FSMContext) -> None:
    text = (msg.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É¬ª –∏–ª–∏ –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏
    # –ù–ò–ß–ï–ì–û –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º: –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã (–º–µ–Ω—é –∏ —Ç.–ø.).
    if text in PASS_THROUGH_TEXTS or text.startswith("/"):
        await state.clear()
        return

    if len(text) < 2:
        await msg.answer("–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return
    if len(text) > 600:
        await msg.answer("–ü–æ–ª—É—á–∏–ª–æ—Å—å –¥–ª–∏–Ω–Ω–æ–≤–∞—Ç–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return

    # TODO: –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç–∑—ã–≤ –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ")

# 4) –ù–µ—á–∏—Ç–∞–µ–º–æ–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
@router.message(FeedbackStates.wait_phrase)
async def phrase_non_text(msg: Message, state: FSMContext) -> None:
    await msg.answer("–ù—É–∂–µ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
