# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from app.bot.states import FeedbackStates

# –°–∞–±–¥–∂–µ–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–æ–≤–Ω–æ —Ç–µ, —á—Ç–æ —Ä–∏—Å—É–µ—à—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ)
EMOJI_HOT = "üî•"
EMOJI_OK = "üëå"
EMOJI_MEH = "üòê"
BTN_PHRASE = "‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞"

router = Router(name="feedback2")

# ---- —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —ç–º–æ–¥–∑–∏ (–≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏) ----
@router.message(StateFilter("*"), F.text == EMOJI_HOT)
async def fb_hot(m: Message):
    await m.answer("üî• –°—É–ø–µ—Ä! –ü—Ä–∏–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!")

@router.message(StateFilter("*"), F.text == EMOJI_OK)
async def fb_ok(m: Message):
    await m.answer("üëå –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ!")

@router.message(StateFilter("*"), F.text == EMOJI_MEH)
async def fb_meh(m: Message):
    await m.answer("üòê –ü–æ–Ω—è–ª. –ü—Ä–∏–Ω—è—Ç–æ!")

# ---- ¬´1 —Ñ—Ä–∞–∑–∞¬ª ‚Üí –∂–¥—ë–º —Ç–µ–∫—Å—Ç ----
@router.message(StateFilter("*"), F.text == BTN_PHRASE)
async def fb_phrase_start(m: Message, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")

@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def fb_phrase_save(m: Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î ‚Äî —è –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é
    phrase = (m.text or "").strip()
    if not phrase:
        await m.answer("–§—Ä–∞–∑–∞ –ø—É—Å—Ç–∞—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ —á—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏ –∏–ª–∏ /cancel.")
        return
    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úçÔ∏è")
