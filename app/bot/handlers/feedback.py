# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    Message,
)

from app.bot.states import FeedbackStates  # wait_phrase

router = Router(name="feedback_v2")

# --- –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã
FB_FIRE    = "fb_fire"
FB_OK      = "fb_ok"
FB_NEUTRAL = "fb_neutral"
FB_PHRASE  = "fb_phrase"

# --- –∞–ª–∏–∞—Å—ã –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
FIRE_ALIASES    = {FB_FIRE, "fire", "rate_fire", "rate_hot", "hot", "üî•"}
OK_ALIASES      = {FB_OK, "ok", "rate_ok", "good", "üëå"}
NEUTRAL_ALIASES = {FB_NEUTRAL, "neutral", "meh", "so_so", "üòê"}
PHRASE_ALIASES  = {FB_PHRASE, "phrase", "text", "comment", "cmt", "1p", "fb_text"}

def make_feedback_keyboard() -> InlineKeyboardMarkup:
    """–ï–¥–∏–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: üî•, üëå, üòê, –∑–∞—Ç–µ–º ¬´‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞¬ª)."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üî•", callback_data=FB_FIRE),
                InlineKeyboardButton(text="üëå", callback_data=FB_OK),
                InlineKeyboardButton(text="üòê", callback_data=FB_NEUTRAL),
            ],
            [InlineKeyboardButton(text="‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞", callback_data=FB_PHRASE)],
        ]
    )

# ---------- –≠–ú–û–î–ó–ò-–û–¶–ï–ù–ö–ò ----------
@router.callback_query(F.data.func(lambda d: d in FIRE_ALIASES))
async def on_fb_fire(cq: CallbackQuery) -> None:
    await cq.answer("üî• –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)

@router.callback_query(F.data.func(lambda d: d in OK_ALIASES))
async def on_fb_ok(cq: CallbackQuery) -> None:
    await cq.answer("üëå –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)

@router.callback_query(F.data.func(lambda d: d in NEUTRAL_ALIASES))
async def on_fb_neutral(cq: CallbackQuery) -> None:
    await cq.answer("üòê –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)

# ---------- ¬´1 —Ñ—Ä–∞–∑–∞¬ª ----------
@router.callback_query(F.data.func(lambda d: d in PHRASE_ALIASES))
async def on_fb_phrase(cq: CallbackQuery, state: FSMContext) -> None:
    await cq.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await state.set_state(FeedbackStates.wait_phrase)
    await cq.answer()

@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def on_fb_phrase_text(msg: Message, state: FSMContext) -> None:
    phrase = (msg.text or "").strip()
    if not phrase:
        await msg.answer("–ù—É–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")
        return
    # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    await msg.answer("–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å–∞–ª. –°–ø–∞—Å–∏–±–æ! üéØ")
    await state.clear()

@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def on_fb_phrase_cancel(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —Ñ—Ä–∞–∑—ã.")

# ---------- –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ fb_* –Ω–æ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–ª ----------
@router.callback_query(F.data.startswith("fb_"))
async def on_fb_namespace_fallback(cq: CallbackQuery) -> None:
    # –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ ‚Äî –∑–Ω–∞—á–∏—Ç callback_data –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è, –Ω–æ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω
    await cq.answer("–ü—Ä–∏–Ω—è–ª üëç", show_alert=False)
