# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router(name="feedback2")

# ==== —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–∂–¥—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É¬ª ====
class FeedbackS(StatesGroup):
    wait_text = State()

# ==== –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–æ—Ü–µ–Ω–æ–∫¬ª (üî•/üëå/üòê + ‚úç 1 —Ñ—Ä–∞–∑–∞) ====
def feedback_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:rate:fire"),
            InlineKeyboardButton(text="üëå", callback_data="fb:rate:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:text")],
    ])

# –í–´–ó–´–í–ê–¢–¨ –û–¢–ö–£–î–ê –£–ì–û–î–ù–û:
# await send_feedback_block(message)  –∏–ª–∏ await send_feedback_block(callback.message)
async def send_feedback_block(target: Message) -> None:
    await target.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=feedback_kb(),
    )

# ==== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ¬´–æ—Ü–µ–Ω–æ–∫¬ª ====

@router.callback_query(F.data.startswith("fb:rate:"))
async def on_rate(cb: CallbackQuery, state: FSMContext):
    rate = cb.data.split(":")[-1]  # fire / ok / meh
    # TODO: –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # save_rating(user_id=cb.from_user.id, value=rate)

    await cb.answer("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")
    await cb.message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–∏.",
        reply_markup=feedback_kb(),   # –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–æ–∫
    )

@router.callback_query(F.data == "fb:text")
async def on_text_request(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(FeedbackS.wait_text)
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ 1 –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).")

@router.message(FeedbackS.wait_text, F.text)
async def on_text_received(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text or len(text) > 200:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, 1 –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ—Ä–∞–∑—É –∫—É–¥–∞ –Ω—É–∂–Ω–æ
    # save_feedback_text(user_id=msg.from_user.id, text=text)

    # –í–ê–ñ–ù–û: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–æ –¥–∞–Ω–Ω—ã–µ FSM –Ω–µ —á–∏—Å—Ç–∏–º –Ω–∞—Å–∏–ª—å–Ω–æ
    await state.set_state(None)
    await msg.answer("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç")

# –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–º
@router.message(FeedbackS.wait_text)
async def on_text_required(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ñ—Ä–∞–∑—É üôÇ")
