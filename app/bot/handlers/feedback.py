# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bot.states import FeedbackStates

router = Router(name="feedback2")


# ---------- –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ----------
def feedback_keyboard():
    """
    –ì–æ—Ç–æ–≤–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏:
    üî• / üëå / üòê / ‚úç 1 —Ñ—Ä–∞–∑–∞

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        await message.answer(
            "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
            reply_markup=feedback_keyboard(),
        )
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üî•", callback_data="fb:hot")
    kb.button(text="üëå", callback_data="fb:ok")
    kb.button(text="üòê", callback_data="fb:meh")
    kb.button(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")
    kb.adjust(3, 1)
    return kb.as_markup()


# ---------- –ë–´–°–¢–†–´–ï –†–ï–ê–ö–¶–ò–ò ----------
@router.callback_query(F.data.in_({"fb:hot", "fb:ok", "fb:meh"}))
async def on_quick_reaction(cq: CallbackQuery):
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # save_reaction(user_id=cq.from_user.id, reaction=cq.data[3:])
    try:
        await cq.answer("–û–∫")   # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    except Exception:
        pass


# ---------- –ó–ê–ü–†–û–° ¬´1 –§–†–ê–ó–ê¬ª ----------
@router.callback_query(F.data == "fb:phrase")
async def on_phrase_start(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    try:
        await cq.answer()       # –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    except Exception:
        pass
    await cq.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç—é–¥–µ. "
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


# ---------- –ü–†–ò–Å–ú –§–†–ê–ó–´ ----------
@router.message(FeedbackStates.wait_phrase, F.text)
async def on_phrase_text(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π üôÇ")
        return
    if len(text) > 200:
        await msg.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –î–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É
    # save_phrase(user_id=msg.from_user.id, phrase=text)

    await state.clear()
    await msg.answer("–ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ! üíô")


# ---------- –ù–ï-–¢–ï–ö–°–¢ –í–û –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø ----------
@router.message(FeedbackStates.wait_phrase)
async def on_phrase_wrong(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π. –õ–∏–±–æ /cancel.")
