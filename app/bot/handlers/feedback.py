# app/bot/handlers/feedback.py
from __future__ import annotations
import logging

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb

log = logging.getLogger("feedback2")
router = Router(name="feedback2")


# ---- helpers -------------------------------------------------
def _parse_rate(data: str | None) -> str | None:
    if not data:
        return None
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: "fb:rate:hot", "feedback:rate:ok", "rate:meh"
    if ":rate:" in data:
        return data.split(":")[-1]
    if data.startswith("rate:") and data.count(":") == 1:
        return data.split(":")[1]
    return None

def _is_text_cb(data: str | None) -> bool:
    if not data:
        return False
    # "fb:text", "feedback:text", "text_feedback", –ª—é–±—ã–µ *:text
    return data.endswith(":text") or data in {"fb:text", "feedback:text", "text_feedback"}


# ---- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---------------------------------------------
@router.callback_query(F.data.func(lambda d: _parse_rate(d) is not None))
async def on_feedback_rate(cq: CallbackQuery, state: FSMContext):
    # –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö —Ñ–∞–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
    log.info("feedback rate click: %s", cq.data)
    try:
        await cq.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üëç", show_alert=False)
    except Exception:
        pass
    try:
        await cq.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ! üôå")
    except Exception:
        pass


@router.callback_query(F.data.func(_is_text_cb))
async def on_feedback_text_request(cq: CallbackQuery, state: FSMContext):
    log.info("feedback text requested: %s", cq.data)
    try:
        await state.set_state(FeedbackStates.wait_text)
        await cq.answer()
        await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    except Exception:
        pass


@router.message(FeedbackStates.wait_text)
async def on_feedback_text_submit(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.")
        return
    log.info("feedback text received: %s", text)
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üôè")


# –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–ª–µ—Ç–∏—Ç –ª—é–±–æ–π –∫–æ–ª–±—ç–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å fb:
@router.callback_query(F.data.func(lambda d: isinstance(d, str) and d.startswith("fb:")))
async def on_feedback_fallback(cq: CallbackQuery):
    log.info("feedback fallback handled: %s", cq.data)
    try:
        await cq.answer("–ü—Ä–∏–Ω—è—Ç–æ!", show_alert=False)
        await cq.message.answer("–°–ø–∞—Å–∏–±–æ! üôå")
    except Exception:
        pass
