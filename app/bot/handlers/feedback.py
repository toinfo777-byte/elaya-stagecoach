# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

router = Router(name="feedback2")

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã
class FeedbackStates(StatesGroup):
    wait_phrase = State()


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–æ–∫ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ)
def build_feedback_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="üî•", callback_data="fb_rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb_rate:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb_rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb_phrase:start")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# --- ¬´–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫–∏¬ª –ø–æ –∫–æ–º–∞–Ω–¥–∞–º /feedback –∏–ª–∏ /rate
@router.message(F.text.in_({"/feedback", "/rate"}))
async def show_feedback_keyboard(msg: Message):
    await msg.answer("–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:", reply_markup=build_feedback_kb())


# --- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ª—é–±—ã–µ –∞–ª–∏–∞—Å—ã –∫–æ–ª–ª–±—ç–∫–æ–≤, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–µ/—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
_RATE_ALIASES = {
    "hot": {"fb_rate:hot", "fb:hot", "feedback:hot", "rate:hot", "r:hot"},
    "ok":  {"fb_rate:ok",  "fb:ok",  "feedback:ok",  "rate:ok",  "r:ok"},
    "meh": {"fb_rate:meh", "fb:meh", "feedback:meh", "rate:meh", "r:meh"},
}
_ALL_RATE_TOKENS = set().union(*_RATE_ALIASES.values())

_PHRASE_ALIASES = {"fb_phrase:start", "fb:phrase", "feedback:phrase", "rate:phrase", "r:phrase"}


def _canon_rate(token: str) -> str | None:
    for key, bag in _RATE_ALIASES.items():
        if token in bag:
            return key
    return None


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ üî•/üëå/üòê
@router.callback_query(F.data.in_(_ALL_RATE_TOKENS))
async def handle_rate(call: CallbackQuery):
    rate = _canon_rate(call.data)
    # ACK, —á—Ç–æ–±—ã –∏—Å—á–µ–∑ ¬´–∫—Ä—É—Ç–∏—Ç—Å—è‚Ä¶¬ª
    await call.answer()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏:
    # save_rating(user_id=call.from_user.id, rate=rate)

    # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ ¬´—Ñ–∏–∫—Å–∏—Ä—É–µ–º¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ: —É–±–µ—Ä—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∏ –∫–ª–∏–∫–∞–º–∏
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    emoji = {"hot": "üî•", "ok": "üëå", "meh": "üòê"}[rate or "ok"]
    await call.message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–º–µ—Ç–∫—É {emoji}! –£—á—Ç–µ–Ω–æ.")


# --- –ö–Ω–æ–ø–∫–∞ ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
@router.callback_query(F.data.in_(_PHRASE_ALIASES))
async def ask_one_phrase(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(FeedbackStates.wait_phrase)
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É ‚Äî —á–µ–º –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω —ç—Ç—é–¥/—à–∞–≥.\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel"
    )


# --- –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–∞–º—É ¬´1 —Ñ—Ä–∞–∑—É¬ª
@router.message(FeedbackStates.wait_phrase, F.text)
async def save_one_phrase(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()
    if not phrase or len(phrase) > 300:
        await msg.answer("–û–¥–Ω–æ–π-–¥–≤—É–º—è –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–¥–∞ –Ω—É–∂–Ω–æ
    # save_phrase(user_id=msg.from_user.id, phrase=phrase)

    await state.clear()
    await msg.answer("–ü—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ! ‚úçÔ∏è")
