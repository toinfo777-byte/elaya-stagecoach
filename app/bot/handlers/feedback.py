# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

# –µ—Å–ª–∏ —É —Ç–µ–±—è –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ app/bot/states.py ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
# (–≤ —Ç–≤–æ—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ–Ω –Ω–∞–∑—ã–≤–∞–ª—Å—è FeedbackStates —Å –ø–æ–ª–µ–º wait_phrase)
from app.bot.states import FeedbackStates

router = Router(name="feedback_v2")

# ---- callback constants
FB_FIRE = "fb_fire"
FB_OK = "fb_ok"
FB_NEUTRAL = "fb_neutral"
FB_PHRASE = "fb_phrase"


# ---- keyboard factory
def make_feedback_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤. –í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫ callback_data —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Ä—è–¥–∫–æ–º –∫–Ω–æ–ø–æ–∫.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üî•", callback_data=FB_FIRE),
                InlineKeyboardButton(text="üëå", callback_data=FB_OK),
                InlineKeyboardButton(text="üòê", callback_data=FB_NEUTRAL),
            ],
            [InlineKeyboardButton(text="‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞", callback_data=FB_PHRASE)],
        ]
    )


# ---- emoji handlers (–∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫ –±–µ–∑ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.callback_query(F.data == FB_FIRE)
async def on_fb_fire(cq: CallbackQuery) -> None:
    # –ö–æ—Ä–æ—Ç–∫–∏–π toast-–æ—Ç–≤–µ—Ç; show_alert=False, —á—Ç–æ–±—ã –Ω–µ –≤—Å–ø–ª—ã–≤–∞–ª–æ –±–æ–ª—å—à–∏–º –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    await cq.answer("üî• –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)


@router.callback_query(F.data == FB_OK)
async def on_fb_ok(cq: CallbackQuery) -> None:
    await cq.answer("üëå –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)


@router.callback_query(F.data == FB_NEUTRAL)
async def on_fb_neutral(cq: CallbackQuery) -> None:
    await cq.answer("üòê –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!", show_alert=False)


# ---- phrase flow
@router.callback_query(F.data == FB_PHRASE)
async def on_fb_phrase(cq: CallbackQuery, state: FSMContext) -> None:
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç + –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
    await cq.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await state.set_state(FeedbackStates.wait_phrase)
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä callback‚Äô–∞
    await cq.answer()


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def on_fb_phrase_text(msg: Message, state: FSMContext) -> None:
    phrase = (msg.text or "").strip()
    if not phrase:
        await msg.answer("–ù—É–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â—ë —Ä–∞–∑?")
        return

    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏; –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
    await msg.answer("–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å–∞–ª. –°–ø–∞—Å–∏–±–æ! üéØ")
    await state.clear()


# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def on_fb_phrase_cancel(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.answer("–û–∫, –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —Ñ—Ä–∞–∑—ã.")


# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–ª–ª–±–µ–∫–æ–≤ –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω
@router.callback_query(F.data.startswith("fb_"))
async def on_fb_unknown(cq: CallbackQuery) -> None:
    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —á—Ç–æ-—Ç–æ fb_* –±–µ–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—Ç–∏–º
    await cq.answer("–ü—Ä–∏–Ω—è–ª üëç", show_alert=False)
