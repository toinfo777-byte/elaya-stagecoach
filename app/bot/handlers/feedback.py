from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb
from app.storage.repo import session_scope, log_event

router = Router(name="feedback2")


# —É—Ç–∏–ª–∏—Ç–∞: –ø–æ–Ω—è—Ç—å —Ç–∏–ø –∫–æ–ª–±—ç–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
def _parse_rate(data: str) -> str | None:
    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: "fb:rate:hot", "feedback:rate:ok", "rate:meh"
    if not data:
        return None
    if data.startswith(("fb:rate:", "feedback:rate:", "rate:")):
        return data.split(":")[-1]  # hot|ok|meh
    return None


def _is_text_cb(data: str) -> bool:
    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: "fb:text", "feedback:text", "text_feedback", "rate:text" (–Ω–∞ –≤—Å—è–∫–∏–π –Ω–∞ –±—É–¥—É—â–µ–µ)
    return (
        data in {"fb:text", "feedback:text", "text_feedback"}
        or data.endswith(":text")
    )


# ---- 1) –∫–ª–∏–∫ –Ω–∞ –æ—Ü–µ–Ω–∫—É üî•/üëå/üòê ---------------------------------------------
@router.callback_query(F.data.func(lambda d: _parse_rate(d) is not None))
async def on_feedback_rate(cq: CallbackQuery, state: FSMContext):
    rate = _parse_rate(cq.data)
    if not rate:
        await cq.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶")
        return

    with session_scope() as s:
        log_event(s, user_id=None, name="feedback_added", payload={"kind": rate, "src": "inline"})

    await cq.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")          # —Å–Ω—è—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    await cq.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ! üôå")


# ---- 2) –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ ‚úçÔ∏è ---------------------------------------------------
@router.callback_query(F.data.func(_is_text_cb))
async def on_feedback_text_request(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_text)
    await cq.answer()
    await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


# ---- 3) –ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ --------------------------------------------------------
@router.message(FeedbackStates.wait_text)
async def on_feedback_text_submit(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.")
        return

    with session_scope() as s:
        log_event(s, user_id=None, name="feedback_added", payload={"kind": "text", "text": text})

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üôè")


# ---- 4) —Ö–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤—ã –µ—â—ë —Ä–∞–∑ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ –≤—ã–∑–≤–∞—Ç—å) --------
async def send_feedback_inline(to_message: Message):
    await to_message.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=feedback_inline_kb(prefix="fb"),
    )
