# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.ui.feedback import build_feedback_kb, send_feedback_prompt

router = Router(name="feedback2")

# ==== –•–ï–õ–ü–ï–†–´ –°–•–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø (–ø–æ–∫–∞ ‚Äî –≤ –ø–∞–º—è—Ç—å FSM; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–º–µ–Ω–∏—Ç–µ –Ω–∞ –ë–î) ====

async def _save_reaction(user_id: int, kind: str) -> None:
    # TODO: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # –ø—Ä–∏–º–µ—Ä: repo.feedback.add_reaction(user_id=user_id, kind=kind)
    pass

async def _save_phrase(user_id: int, text: str) -> None:
    # TODO: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # –ø—Ä–∏–º–µ—Ä: repo.feedback.add_phrase(user_id=user_id, text=text)
    pass


# ==== –ü–û–ö–ê–ó –ö–õ–ê–í–ò–ê–¢–£–†–´ ¬´–ì–î–ï –£–ì–û–î–ù–û¬ª (–¥–ª—è –∫–æ–º–∞–Ω–¥/–∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) ====

@router.message(F.text == "/feedback")   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–æ–º–∞–Ω–¥–∞ —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –±–ª–æ–∫ –≤—Ä—É—á–Ω—É—é
async def feedback_entry(msg: Message):
    await send_feedback_prompt(msg)


# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –û–¶–ï–ù–ö–ò ====

@router.callback_query(F.data.in_({"fb:hot", "fb:ok", "fb:meh"}))
async def on_feedback_reaction(cb: CallbackQuery):
    kind_map = {"fb:hot": "hot", "fb:ok": "ok", "fb:meh": "meh"}
    kind = kind_map.get(cb.data)
    await _save_reaction(cb.from_user.id, kind)
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ", show_alert=False)

@router.callback_query(F.data == "fb:phrase")
async def on_feedback_phrase(cb: CallbackQuery, state: FSMContext):
    await cb.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(FeedbackStates.wait_phrase)


# ==== –ü–†–ò–Å–ú ¬´1 –§–†–ê–ó–´¬ª ====

@router.message(FeedbackStates.wait_phrase, F.text)
async def on_feedback_phrase_text(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—É—Å—Ç–æ ü§î –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–º–æ–∂–Ω–æ –æ–¥–Ω–∏–º-–¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏).")
        return
    if len(text) > 200:
        await msg.answer("–î–∞–≤–∞–π—Ç–µ –∫–æ—Ä–æ—á–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return

    await _save_phrase(msg.from_user.id, text)
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª –æ—Ç–∑—ã–≤ ‚úçÔ∏è")

# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–µ —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–ø–æ–º–Ω–∏–º
@router.message(FeedbackStates.wait_phrase)
async def on_feedback_phrase_nontext(msg: Message):
    await msg.answer("–ù—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç üôÇ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤.")
