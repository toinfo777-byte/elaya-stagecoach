# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates

router = Router(name="feedback2_router")

# =========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================

def build_feedback_kb() -> InlineKeyboardMarkup:
    """
    üî• / üëå / üòê  +  ‚úç 1 —Ñ—Ä–∞–∑–∞
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb:rate:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
    ])

async def send_feedback_keyboard(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–∑—ã–≤–æ–≤ —Ä—è–¥–æ–º —Å –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    –í—ã–∑—ã–≤–∞–π—Ç–µ –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞:
        await send_feedback_keyboard(message)
    """
    await message.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=build_feedback_kb(),
    )

# =========================
# –•–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
# =========================

@router.callback_query(F.data.startswith("fb:rate:"))
async def on_feedback_rate(call: CallbackQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏, –ø–æ –∂–µ–ª–∞–Ω–∏—é
    # value = call.data.split(":")[-1]  # hot/ok/meh
    await call.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç", show_alert=False)

    # –ù–∏—á–µ–≥–æ ¬´–Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º¬ª, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ,
    # —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–µ –º–µ—à–∞–ª–∏ (—É –Ω–∞—Å —É–∑–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.data.startswith).


# =========================
# –•–µ–Ω–¥–ª–µ—Ä ¬´1 —Ñ—Ä–∞–∑–∞¬ª
# =========================

@router.callback_query(F.data == "fb:phrase")
async def feedback_phrase_start(call: CallbackQuery, state: FSMContext):
    # –í—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
    await state.set_state(FeedbackStates.wait_phrase)
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await call.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª


@router.message(FeedbackStates.wait_phrase, F.text)
async def feedback_phrase_take(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—É—Å—Ç–æ üôà –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ /cancel.")
        return

    # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫—É–¥–∞ –Ω—É–∂–Ω–æ (–ë–î/–º–µ—Ç—Ä–∏–∫–∏)
    # save_short_feedback(user_id=msg.from_user.id, text=text)

    await state.clear()
    await msg.answer("–ü—Ä–∏–Ω—è–ª! –°–ø–∞—Å–∏–±–æ üôå")


# =========================
# –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
# =========================

@router.message(FeedbackStates.wait_phrase, F.text.in_({"/cancel", "cancel"}))
async def feedback_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. /menu")
