# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

from app.bot.states import FeedbackStates

router = Router(name="feedback2")

# ---------- –ö–õ–ê–í–ò–ê–¢–£–†–ê –û–¶–ï–ù–û–ö ----------
def make_feedback_kb() -> "InlineKeyboardMarkup":
    kb = InlineKeyboardBuilder()
    kb.button(text="üî•", callback_data="fb:rate:fire")
    kb.button(text="üëå", callback_data="fb:rate:ok")
    kb.button(text="üòê", callback_data="fb:rate:meh")
    kb.adjust(3)

    kb.button(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")
    kb.adjust(3, 1)
    return kb.as_markup()

# ---------- HANDLERS: –û–¶–ï–ù–ö–ê ----------
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_rate(cb: CallbackQuery):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É/–≤ –ë–î
    # –ø—Ä–∏–º–µ—Ä: kind = cb.data.split(":")[2]  # fire|ok|meh
    try:
        await cb.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç", show_alert=False)
    except Exception:
        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –æ—Ç–≤–µ—á–∞–µ–º
        await cb.answer()

# ---------- HANDLERS: –ó–ê–ü–†–û–° –§–†–ê–ó–´ ----------
@router.callback_query(F.data == "fb:phrase")
async def on_phrase_request(cb: CallbackQuery, state):
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–∂–¥—ë–º —Ñ—Ä–∞–∑—É¬ª
    await state.set_state(FeedbackStates.wait_phrase)
    await cb.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    await cb.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel."
    )

# –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
@router.message(FeedbackStates.wait_phrase, F.text)
async def on_phrase_text(msg: Message, state):
    text = (msg.text or "").strip()
    if len(text) < 2:
        await msg.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return
    if len(text) > 400:
        await msg.answer("–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤ üôè")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –≤–∞—à—É –ë–î/–º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # save_feedback_phrase(user_id=msg.from_user.id, phrase=text)

    await state.clear()
    await msg.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫ ‚ú®")

# –õ—é–±–æ–π –Ω–µ—Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç
@router.message(FeedbackStates.wait_phrase)
async def on_phrase_non_text(msg: Message):
    await msg.answer("–ù—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ò–ª–∏ /cancel.")

# ---------- –î–ï–ú–û-–ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ----------
@router.message(Command("feedback_demo"))
async def feedback_demo(msg: Message):
    await msg.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=make_feedback_kb(),
    )
