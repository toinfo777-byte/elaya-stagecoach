# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F, html
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.utils.tg_safe import safe_answer, safe_edit_text, safe_edit_reply_markup

import logging
log = logging.getLogger(__name__)

router = Router(name="feedback2")


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------

class FB(StatesGroup):
    waiting_phrase = State()


def _kb_feedback() -> InlineKeyboardMarkup:
    # üî•/üëå/üòê + ¬´1 —Ñ—Ä–∞–∑–∞¬ª
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb:rate:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
    ])


async def ask_short_review(msg: Message) -> None:
    await msg.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=_kb_feedback(),
    )


# ---------- –•–≠–ù–î–õ–ï–†–´ –ö–û–õ–õ–ë–≠–ö–û–í ----------

@router.callback_query(F.data.startswith("fb:rate:"))
async def on_feedback_rate(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ üî•/üëå/üòê
    """
    rate = cb.data.split(":", 2)[-1]  # hot | ok | meh
    await safe_answer(cb)  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π 'query is too old'

    # –ª–æ–≥ + –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫—É
    try:
        user_id = cb.from_user.id if cb.from_user else None
        log.info("FEEDBACK RATE: user=%s rate=%s", user_id, rate)
        # TODO: —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    except Exception as e:
        log.exception("save rate failed: %s", e)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º –Ω–æ–≤–æ–µ.
    txt = f"–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞: {html.bold(rate)} –∑–∞–ø–∏—Å–∞–Ω–∞."
    edited = await safe_edit_text(cb.message, txt)
    if edited is None:
        await cb.message.answer(txt)


@router.callback_query(F.data == "fb:phrase")
async def on_feedback_phrase_start(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ—Å–∏–º –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –∏ —Å—Ç–∞–≤–∏–º —Å—Ç–µ–π—Ç.
    """
    await safe_answer(cb)

    prompt = "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
    edited = await safe_edit_text(cb.message, prompt)
    if edited is None:
        await cb.message.answer(prompt)

    await state.set_state(FB.waiting_phrase)


# ---------- –•–≠–ù–î–õ–ï–† –í–í–û–î–ê –§–†–ê–ó–´ ----------

@router.message(FB.waiting_phrase)
async def on_feedback_phrase_text(msg: Message, state: FSMContext) -> None:
    phrase = (msg.text or "").strip()

    # –ª–æ–≥ + —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        log.info("FEEDBACK PHRASE: user=%s phrase=%r", msg.from_user.id, phrase)
        # TODO: —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
    except Exception as e:
        log.exception("save phrase failed: %s", e)

    await msg.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ –∑–∞–ø–∏—Å–∞–Ω üôè")
    await state.clear()

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    await ask_short_review(msg)
