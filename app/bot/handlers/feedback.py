# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb
from app.storage.repo import session_scope, log_event

router = Router()
router.name = "feedback2"

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–í –º–µ–Ω—é¬ª ‚Äî —à–ª—ë—Ç /cancel (—É —Ç–µ–±—è —ç—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é)
def menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/cancel")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

# 1) –ü–æ–π–º–∞—Ç—å –∫–ª–∏–∫ –Ω–∞ –æ—Ü–µ–Ω–∫—É (üî•/üëå/üòê)
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_feedback_rate(cb: CallbackQuery, state: FSMContext):
    # fb:rate:hot | ok | meh
    try:
        _, _, rate = (cb.data or "").split(":", 2)
    except Exception:
        rate = "unknown"

    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ (–Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
    try:
        with session_scope() as s:
            uid = cb.from_user.id if cb.from_user else None
            log_event(s, user_id=uid, name="feedback_rate", payload={"rate": rate})
    except Exception:
        pass

    await cb.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!")
    await cb.message.answer(
        "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏ 1 —Ñ—Ä–∞–∑—É –∏ —è —Å–æ—Ö—Ä–∞–Ω—é.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ /cancel —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
        reply_markup=menu_kb(),
    )
    await state.set_state(FeedbackStates.wait_text)


# 2) –ö–Ω–æ–ø–∫–∞ ¬´‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞¬ª
@router.callback_query(F.data == "fb:phrase")
async def on_feedback_phrase(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer(
        "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, 1 —Ñ—Ä–∞–∑—É ‚Äî —á—Ç–æ –±—ã–ª–æ —Ü–µ–Ω–Ω–æ–≥–æ/—á—Ç–æ —É–ª—É—á—à–∏—Ç—å.",
        reply_markup=menu_kb(),
    )
    await state.set_state(FeedbackStates.wait_text)


# 3) –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç ¬´1 —Ñ—Ä–∞–∑–∞¬ª
@router.message(FeedbackStates.wait_text, F.text.len() > 0)
async def save_feedback_text(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    try:
        with session_scope() as s:
            uid = msg.from_user.id if msg.from_user else None
            log_event(s, user_id=uid, name="feedback_text", payload={"text": text})
    except Exception:
        pass

    await msg.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª. –°–ø–∞—Å–∏–±–æ! üôå", reply_markup=None)
    await state.clear()
