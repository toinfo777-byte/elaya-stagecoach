# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

# –µ—Å–ª–∏ —É –≤–∞—Å –∫–ª–∞—Å—Å —É–∂–µ –ª–µ–∂–∏—Ç –≤ app/bot/states.py ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Å—é–¥–∞
from app.bot.states import FeedbackStates

router = Router(name="feedback2")

# ---- –¢–µ–∫—Å—Ç—ã (–º–æ–∂–µ—Ç–µ –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥ —Å–µ–±—è) ----
PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)

RATE_ALERT_TEXT = {
    "hot": "üî• –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "ok": "üëå –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "meh": "üòê –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
}

# ============================================================
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –æ—Ü–µ–Ω–æ–∫ –∏–∑ callback_data
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —ç–º–æ–¥–∑–∏:
#   'rate:hot', 'fb:hot', 'hot', 'fire', 'üî•'
#   'rate:ok', 'ok', 'üëå', 'thumb', 'üëç'
#   'rate:meh', 'meh', 'neutral', 'üòê'
# ============================================================
def parse_rate_from_cb(data: str | None) -> str | None:
    if not data:
        return None
    s = data.lower()

    # –≥–æ—Ä—è—á–æ
    if any(t in s for t in ("rate:hot", "fb:hot", "hot", "fire", "üî•")):
        return "hot"

    # –Ω–æ—Ä–º / –æ–∫
    if any(t in s for t in ("rate:ok", "fb:ok", "ok", "üëå", "thumb", "üëç")):
        return "ok"

    # —Ç–∞–∫ —Å–µ–±–µ / –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    if any(t in s for t in ("rate:meh", "fb:meh", "meh", "neutral", "üòê")):
        return "meh"

    return None


# ¬´—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –ø—Ä–æ —Ñ—Ä–∞–∑—É?¬ª
def _is_phrase_cb(data: str | None) -> bool:
    if not data:
        return False
    s = data.lower()
    # –ª—é–±—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 'phrase', 'fb:phrase', 'one_phrase', —Ä—É—Å. –∫–æ—Ä–µ–Ω—å ¬´—Ñ—Ä–∞–∑¬ª
    return any(t in s for t in ("phrase", "one_phrase", "fb:phrase", "—Ñ—Ä–∞–∑"))


# ============================================================
# –û–¶–ï–ù–ö–ò ‚Äî inline –∫–Ω–æ–ø–∫–∏
# ============================================================
@router.callback_query(F.data.func(lambda d: parse_rate_from_cb(d) is not None))
async def fb_rate_inline(cq: CallbackQuery):
    # 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞ –∫—Ä—É—Ç–∏–ª–∫–∞
    try:
        await cq.answer("–ü—Ä–∏–Ω—è—Ç–æ")
    except Exception:
        pass

    # 2) –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
    code = parse_rate_from_cb(cq.data)
    txt = RATE_ALERT_TEXT.get(code, "–ü—Ä–∏–Ω—è—Ç–æ")

    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –ü—Ä–∏–º–µ—Ä:
    #   with session_scope() as s:
    #       save_run_rate(user_id=cq.from_user.id, run_id=..., rate=code)

    # 3) –ù–µ–±–æ–ª—å—à–æ–π —Ç–æ—Å—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    try:
        await cq.answer(txt, show_alert=False)
    except Exception:
        pass


# ============================================================
# ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª ‚Äî inline –∫–Ω–æ–ø–∫–∞
# ============================================================
@router.callback_query(F.data.func(_is_phrase_cb))
async def fb_phrase_inline(cq: CallbackQuery, state: FSMContext):
    # 1) –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    try:
        await cq.answer("–û–∫")
    except Exception:
        pass

    # 2) –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    await state.set_state(FeedbackStates.wait_phrase)
    await cq.message.answer(PROMPT_TEXT)


# –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def fb_phrase_text(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()

    # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î/–∂—É—Ä–Ω–∞–ª (–ø—Ä–∏–≤—è–∑–∞–≤ –∫ —Ç–µ–∫—É—â–µ–º—É —ç—Ç—é–¥—É/–¥–∞—Ç–µ/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    # –ü—Ä–∏–º–µ—Ä:
    #   with session_scope() as s:
    #       save_run_phrase(user_id=msg.from_user.id, run_id=..., phrase=phrase)

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úçÔ∏è")


# –û—Ç–º–µ–Ω–∞ –Ω–∞–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–∏–ª. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª –µ—â—ë —Ä–∞–∑.")


# ============================================================
# Fallback –Ω–∞ –≤—Å–µ –ø—Ä–æ—á–∏–µ callback-–∏
# (–ß—Ç–æ–±—ã –∫—Ä—É—Ç–∏–ª–∫–∞ –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–≤–∏—Å–∞–ª–∞)
# ============================================================
@router.callback_query()
async def cb_fallback_ok(cq: CallbackQuery):
    try:
        await cq.answer("–û–∫")
    except Exception:
        pass
