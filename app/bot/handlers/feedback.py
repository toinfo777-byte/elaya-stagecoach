from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import SkipHandler

from app.bot.states import FeedbackStates

router = Router(name="feedback2")

# ----- –ö–Ω–æ–ø–∫–∏ ¬´–æ—Ü–µ–Ω–∏—Ç—å/—Ñ—Ä–∞–∑–∞¬ª -----
def feedback_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb:rate:good"),
            InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ: –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ ¬´–Ω–∏–∂–Ω–∏—Ö¬ª –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –∏—Ö –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
PASS_THROUGH_TEXTS: set[str] = {
    "–ú–µ–Ω—é", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",
    "–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥", "–ü–æ–ª–∏—Ç–∏–∫–∞", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
    "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ü–æ–º–æ—â—å",
}

# ===== –•—ç–Ω–¥–ª–µ—Ä—ã =====

# 1) –û—Ü–µ–Ω–∫–∞-—ç–º–æ–¥–∑–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç "–û–∫" –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ù–ï –≤–∫–ª—é—á–∞–µ–º.
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_rate(cb: CallbackQuery, state: FSMContext) -> None:
    # –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–æ—Å—Ç (–±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞)
    await cb.answer("–û–∫")
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å/—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É (cb.from_user.id, cb.data)
    await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç")
    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è

# 2) ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
@router.callback_query(F.data == "fb:phrase")
async def on_phrase_start(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    await state.set_state(FeedbackStates.wait_phrase)
    await cb.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤–Ω–∏–∑—É –∏–ª–∏ /cancel."
    )

# 3) –ü—Ä–∏—à—ë–ª —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(FeedbackStates.wait_phrase, F.text)
async def phrase_received(msg: Message, state: FSMContext) -> None:
    text = (msg.text or "").strip()

    # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª ¬´–Ω–∏–∂–Ω—é—é –∫–Ω–æ–ø–∫—É¬ª –∏–ª–∏ –Ω–∞–±—Ä–∞–ª –∫–æ–º–∞–Ω–¥—É ‚Äî —Å–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    if text in PASS_THROUGH_TEXTS or text.startswith("/"):
        await state.clear()
        raise SkipHandler  # –≤–∞–∂–Ω–æ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –¥—Ä—É–≥–∏–º–∏ —Ä–æ—É—Ç–µ—Ä–∞–º–∏ (–º–µ–Ω—é –∏ —Ç.–¥.)

    # –õ—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(text) < 2:
        await msg.answer("–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return
    if len(text) > 600:
        await msg.answer("–ü–æ–ª—É—á–∏–ª–æ—Å—å –¥–ª–∏–Ω–Ω–æ–≤–∞—Ç–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (msg.from_user.id, text) –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ")

# 4) –ù–µ—á–∏—Ç–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ (—Å—Ç–∏–∫–µ—Ä/–≥–æ–ª–æ—Å –∏ —Ç.–ø.)
@router.message(FeedbackStates.wait_phrase)
async def phrase_non_text(msg: Message, state: FSMContext) -> None:
    await msg.answer("–ú–Ω–µ –Ω—É–∂–µ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é –ª—é–±–æ–∏ÃÜ –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É.")
