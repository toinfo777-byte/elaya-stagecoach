# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.routers.menu import main_menu

router = Router(name="feedback2")

# ===== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã =====
PHRASE_BUTTON_TEXT = "‚úç 1 —Ñ—Ä–∞–∑–∞"
PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)
OK_SAVED = "–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üìù"

# –ù–∞–±–æ—Ä ¬´–æ—Ü–µ–Ω–æ–∫¬ª, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º (reply-–∫–ª–∞–≤–∞)
RATE_TEXTS = {"üî•", "üëå", "üòê"}

def _is_short_phrase(text: str) -> bool:
    t = (text or "").strip()
    return 3 <= len(t) <= 120 and not t.startswith("/")

# ===== –û–¶–ï–ù–ö–ò ‚Äî inline callback –í –õ–Æ–ë–û–ú –§–û–†–ú–ê–¢–ï =====
def _is_rate_cb(data: str | None) -> bool:
    """
    –õ–æ–≤–∏–º callback_data —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤:
      - 'fb:rate:hot' / 'rate:ok' / 'training:rate:meh'
      - 'feedback:hot' / 'hot' / 'ok' / 'meh'
      - –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —ç–º–æ–¥–∑–∏ –≤ callback_data: 'üî•' / 'üëå' / 'üòê'
    """
    if not data:
        return False
    d = data.lower()
    if d in ("hot", "ok", "meh", "rate", "good", "bad", "like", "dislike"):
        return True
    if any(k in d for k in ("rate", "fb:rate", "feedback", "fb", "grade", "score")) and \
       any(k in d for k in ("hot", "ok", "meh", "good", "bad", "1", "2", "3", "like", "dislike")):
        return True
    # –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–ª–∞–ª —ç–º–æ–¥–∑–∏ –≤ callback_data
    if any(sym in d for sym in ("üî•", "üëå", "üòê")):
        return True
    return False

@router.callback_query(F.data.func(_is_rate_cb))
async def fb_rate_inline(cq: CallbackQuery):
    # TODO: –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ cq.data –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    try:
        await cq.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç", show_alert=False)
    except Exception:
        pass

# ===== –û–¶–ï–ù–ö–ò ‚Äî –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –¢–ï–ö–°–¢–û–ú (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) =====
@router.message(StateFilter("*"), F.text.in_(RATE_TEXTS))
async def fb_rate_text(msg: Message):
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç")

# ===== –ó–ê–ü–†–û–° ¬´–§–†–ê–ó–´¬ª =====
def _is_phrase_cb(data: str | None) -> bool:
    if not data:
        return False
    d = data.lower()
    return any(k in d for k in ("fb:phrase", "phrase", "comment", "text"))

# 1) Inline-–∫–Ω–æ–ø–∫–∞ ¬´—Ñ—Ä–∞–∑–∞¬ª
@router.callback_query(F.data.func(_is_phrase_cb))
async def fb_phrase_inline(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await cq.message.answer(PROMPT_TEXT)
    try:
        await cq.answer()
    except Exception:
        pass

# 2) –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞/—à–æ—Ä—Ç–∫–∞—Ç ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª
@router.message(StateFilter("*"), F.text == PHRASE_BUTTON_TEXT)
async def fb_phrase_text_btn(msg: Message, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await msg.answer(PROMPT_TEXT)

# 3) –û—Ç–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())

# 4) –ü—Ä–∏—ë–º —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase, F.text)
async def fb_phrase_save(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not _is_short_phrase(text):
        await msg.answer("–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (3‚Äì120 —Å–∏–º–≤–æ–ª–æ–≤). –ò–ª–∏ /cancel.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # save_phrase(user_id=msg.from_user.id, phrase=text)

    await state.clear()
    await msg.answer(OK_SAVED, reply_markup=main_menu())

# 5) –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase)
async def fb_phrase_other(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º. –ò–ª–∏ /cancel.")
