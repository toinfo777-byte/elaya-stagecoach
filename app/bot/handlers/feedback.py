# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bot.states import FeedbackStates

router = Router(name="feedback2")


# ==== –ø—É–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ¬´–æ—Ü–µ–Ω–æ–∫¬ª ====
def feedback_keyboard():
    kb = InlineKeyboardBuilder()
    # —Ç—Ä–∏ –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    kb.button(text="üî•", callback_data="fb:hot")
    kb.button(text="üëå", callback_data="fb:ok")
    kb.button(text="üòê", callback_data="fb:meh")
    # –∑–∞–ø—Ä–æ—Å —Ñ—Ä–∞–∑—ã
    kb.button(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")
    kb.adjust(3, 1)
    return kb.as_markup()


# ==== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∞–∫—Ü–∏–π ====
@router.callback_query(F.data.in_({"fb:hot", "fb:ok", "fb:meh"}))
async def on_quick_reaction(cq: CallbackQuery):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # save_reaction(user_id=cq.from_user.id, reaction=cq.data[3:])
    # –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã Telegram —É–±—Ä–∞–ª ¬´—á–∞—Å–∏–∫–∏¬ª
    try:
        await cq.answer("–û–∫")
    except Exception:
        pass


# ==== –∑–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ ¬´1 —Ñ—Ä–∞–∑–∞¬ª ====
@router.callback_query(F.data == "fb:phrase")
async def on_phrase_start(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    try:
        await cq.answer()  # –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    except Exception:
        pass

    await cq.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


# ==== –ø—Ä–∏—ë–º —Ñ—Ä–∞–∑—ã ====
@router.message(FeedbackStates.wait_phrase, F.text)
async def on_phrase_text(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π üôÇ")
        return
    if len(text) > 200:
        await msg.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # save_phrase(user_id=msg.from_user.id, phrase=text)

    await state.clear()
    await msg.answer("–ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ! üíô")


# ==== –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ-—Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –∂–¥—ë–º —Ñ—Ä–∞–∑—É ====
@router.message(FeedbackStates.wait_phrase)
async def on_phrase_wrong(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π. –õ–∏–±–æ /cancel.")
