# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.routers.menu import main_menu

router = Router(name="feedback2")

PHRASE_BUTTON_TEXT = "‚úç 1 —Ñ—Ä–∞–∑–∞"
PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)

RATE_EMOJI_TO_CODE = {"üî•": "hot", "üëå": "ok", "üòê": "meh"}
RATE_CODES = {"hot", "ok", "meh"}

RATE_REPLY_TEXT = {
    "hot": "üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª.",
    "ok":  "üëå –ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ!",
    "meh": "üòê –û–∫, —É—á—Ç–µ–Ω–æ.",
}
RATE_ALERT_TEXT = {
    "hot": "üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª.",
    "ok":  "üëå –ü—Ä–∏–Ω—è—Ç–æ.",
    "meh": "üòê –£—á—Ç–µ–Ω–æ.",
}

def _is_short_phrase(text: str) -> bool:
    t = (text or "").strip()
    return 3 <= len(t) <= 120 and not t.startswith("/")

# ---------- –±–æ–ª–µ–µ ¬´–≤—Å–µ—è–¥–Ω—ã–π¬ª –ø–∞—Ä—Å–µ—Ä –æ—Ü–µ–Ω–æ–∫ ----------

def parse_rate_from_cb(data: str | None) -> str | None:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –∫–æ–¥ –æ—Ü–µ–Ω–∫–∏ –∏–∑ callback_data.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
      - —Å–æ–¥–µ—Ä–∂–∏—Ç 'rate', 'feedback', 'grade', 'score', 'react', 'like'
      - —Å–ª–æ–≤–∞: hot/fire/like/good/ok, meh/neutral/so_so
      - —Å–∞–º–∏ —ç–º–æ–¥–∑–∏ üî•/üëå/üòê
      - –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ 'training:rate:hot', 'fb:ok', 'something|meh' –∏ —Ç.–ø.
    """
    if not data:
        return None

    # 1) –µ—Å–ª–∏ –ø—Ä—è–º–æ —ç–º–æ–¥–∑–∏
    if data in RATE_EMOJI_TO_CODE:
        return RATE_EMOJI_TO_CODE[data]

    # 2) –µ—Å–ª–∏ –≤ data –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —ç–º–æ–¥–∑–∏
    for e, code in RATE_EMOJI_TO_CODE.items():
        if e in data:
            return code

    d = data.lower()

    # 3) –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    if any(k in d for k in ("hot", "fire", "üî•", "good", "like", "ok")):
        return "hot" if ("hot" in d or "fire" in d or "üî•" in d) else ("ok" if ("ok" in d or "good" in d or "like" in d) else "ok")

    if any(k in d for k in ("meh", "neutral", "so_so", "soso", "avg", "average", "neutral_face", "neutralface")):
        return "meh"

    # 4) —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã + —è–≤–Ω—ã–µ –∫–æ–¥—ã
    if any(k in d for k in ("rate", "feedback", "grade", "score", "react", "like", "fb")):
        for code in RATE_CODES:
            if code in d:
                return code

    return None


def parse_rate_from_text(text: str | None) -> str | None:
    if not text:
        return None
    t = text.strip()
    if t in RATE_EMOJI_TO_CODE:
        return RATE_EMOJI_TO_CODE[t]
    low = t.lower()
    if low in RATE_CODES:
        return low
    return None

# ---------- –û–¶–ï–ù–ö–ò: callback (—Å—Ç–∞–≤–∏–º –ü–ï–†–ï–î —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ ¬´—Ñ—Ä–∞–∑—ã¬ª) ----------

@router.callback_query(F.data.func(lambda d: parse_rate_from_cb(d) is not None))
async def fb_rate_inline(cq: CallbackQuery):
    code = parse_rate_from_cb(cq.data)
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –ë–î
    try:
        await cq.answer(RATE_ALERT_TEXT.get(code, "–ü—Ä–∏–Ω—è—Ç–æ"), show_alert=False)
    except Exception:
        pass

# ---------- –û–¶–ï–ù–ö–ò: —Ç–µ–∫—Å—Ç–æ–º (reply-–∫–ª–∞–≤–∞) ----------

@router.message(StateFilter("*"), F.text.func(lambda t: parse_rate_from_text(t) is not None))
async def fb_rate_text(msg: Message):
    code = parse_rate_from_text(msg.text)
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –ë–î
    await msg.answer(RATE_REPLY_TEXT.get(code, "–ü—Ä–∏–Ω—è—Ç–æ"))

# ---------- –§–†–ê–ó–ê ----------

def _is_phrase_cb(data: str | None) -> bool:
    if not data:
        return False
    d = data.lower()
    # –Ω–µ –∂–∞–¥–Ω–∏—á–∞–µ–º, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
    return any(k in d for k in ("fb:phrase", "phrase", "comment", "text:phrase"))

@router.callback_query(F.data.func(_is_phrase_cb))
async def fb_phrase_inline(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await cq.message.answer(PROMPT_TEXT)
    try:
        await cq.answer()
    except Exception:
        pass

@router.message(StateFilter("*"), F.text == PHRASE_BUTTON_TEXT)
async def fb_phrase_text_btn(msg: Message, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await msg.answer(PROMPT_TEXT)

@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(FeedbackStates.wait_phrase, F.text)
async def fb_phrase_save(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not _is_short_phrase(text):
        await msg.answer("–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (3‚Äì120 —Å–∏–º–≤–æ–ª–æ–≤). –ò–ª–∏ /cancel.")
        return
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üìù", reply_markup=main_menu())

@router.message(FeedbackStates.wait_phrase)
async def fb_phrase_other(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º. –ò–ª–∏ /cancel.")
