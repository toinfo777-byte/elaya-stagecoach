# app/bot/handlers/feedback.py
from __future__ import annotations

import logging
import re
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from app.bot.states import FeedbackStates

router = Router(name="feedback2")
log = logging.getLogger(__name__)

PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)

RATE_ALERT_TEXT = {
    "hot": "üî• –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "ok":  "üëå –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "meh": "üòê –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
}

# ---------- —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ callback_data ----------

_RE_NUM = re.compile(r"(?<!\d)([123])(?!\d)")  # –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã 1/2/3 –±–µ–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä

def _norm(s: str | None) -> str:
    return (s or "").strip().lower()

def _detect_phrase(data: str) -> bool:
    s = _norm(data)
    return any(k in s for k in (
        "fb:phrase", "phrase", "one_phrase", "comment", "review", "note", "text",
        "—Ñ—Ä–∞–∑", "—Ç–µ–∫—Å—Ç",
    ))

def _detect_rate(data: str) -> str | None:
    s = _norm(data)

    # —è–≤–Ω—ã–µ —Å–ª–æ–≤–∞/—ç–º–æ–¥–∑–∏
    if any(k in s for k in ("rate:hot", "fb:hot", "hot", "fire", "üî•", "r_hot", "rate-hot")):
        return "hot"
    if any(k in s for k in ("rate:ok", "fb:ok", "ok", "üëå", "thumb", "üëç", "good")):
        return "ok"
    if any(k in s for k in ("rate:meh", "fb:meh", "meh", "neutral", "üòê", "so_so", "bad")):
        return "meh"

    # —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã
    m = _RE_NUM.search(s)
    if m:
        # 1 = hot, 2 = ok, 3 = meh ‚Äî —Å–∞–º–∞—è —á–∞—Å—Ç–∞—è –º–∞–ø–∞
        return {"1": "hot", "2": "ok", "3": "meh"}.get(m.group(1))

    # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã r1, r_2, rate_3, fb-2 –∏ —Ç.–ø.
    for pat, val in (
        (r"(?:^|[^a-z])r[:_\-]?1(?!\d)", "hot"),
        (r"(?:^|[^a-z])r[:_\-]?2(?!\d)", "ok"),
        (r"(?:^|[^a-z])r[:_\-]?3(?!\d)", "meh"),
        (r"rate[:_\-]?1(?!\d)", "hot"),
        (r"rate[:_\-]?2(?!\d)", "ok"),
        (r"rate[:_\-]?3(?!\d)", "meh"),
        (r"fb[:_\-]?1(?!\d)", "hot"),
        (r"fb[:_\-]?2(?!\d)", "ok"),
        (r"fb[:_\-]?3(?!\d)", "meh"),
    ):
        if re.search(pat, s):
            return val

    return None

# ----------------------------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------------------

@router.callback_query()
async def universal_feedback_handler(cq: CallbackQuery, state: FSMContext):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º.
    –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫—Ä—É—Ç–∏–ª–∫—É –≤–∏—Å–µ—Ç—å.
    """
    data = cq.data or ""
    try:
        log.info("FB callback from %s: %r", getattr(cq.from_user, "id", "?"), data)
    except Exception:
        pass

    # 0) –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≥–∞—Å–∏–º –∫—Ä—É—Ç–∏–ª–∫—É
    try:
        await cq.answer("–û–∫")
    except Exception:
        pass

    # 1) —Ñ—Ä–∞–∑–∞?
    if _detect_phrase(data):
        await state.set_state(FeedbackStates.wait_phrase)
        await cq.message.answer(PROMPT_TEXT)
        return

    # 2) –æ—Ü–µ–Ω–∫–∞?
    rate = _detect_rate(data)
    if rate:
        # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –ë–î
        try:
            await cq.answer(RATE_ALERT_TEXT.get(rate, "–ü—Ä–∏–Ω—è—Ç–æ"), show_alert=False)
        except Exception:
            # —Ç–æ—Å—Ç –º–æ–≥ —É–∂–µ –±—ã—Ç—å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
        return

    # 3) –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    # (–¥–æ–ø. –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    return


@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def fb_phrase_text(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å phrase –≤ –ë–î, –ø—Ä–∏–≤—è–∑–∞–≤ –∫ —Ç–µ–∫—É—â–µ–º—É —ç—Ç—é–¥—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úçÔ∏è")


@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–∏–ª. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª –µ—â—ë —Ä–∞–∑.")
