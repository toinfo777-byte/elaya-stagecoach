# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb
from app.storage.repo import session_scope, log_event

router = Router(name="feedback2")


# ---- 1) –û—Ü–µ–Ω–∫–∞ —ç–º–æ–¥–∑–∏: üî•/üëå/üòê -------------------------------------------
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_feedback_rate(cq: CallbackQuery, state: FSMContext):
    # data: "fb:rate:hot|ok|meh"
    try:
        _, _, rate = cq.data.split(":", 2)
    except Exception:
        await cq.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶", show_alert=False)
        return

    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    with session_scope() as s:
        tg_id = cq.from_user.id
        # —É –≤–∞—Å –µ—Å—Ç—å user_id? –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–π–¥—ë—Ç–µ –ø–æ tg_id –≤ –ª–æ–≥–µ—Ä–µ
        log_event(s, user_id=None, name="feedback_added", payload={"kind": rate, "src": "inline"})

    # –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–ª–∏–∫, —á—Ç–æ–±—ã ‚Äú—á–∞—Å–∏–∫–∏‚Äù –∏—Å—á–µ–∑–ª–∏
    await cq.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", show_alert=False)

    # –º–æ–∂–Ω–æ –º—è–≥–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ –º–µ–Ω—è—è –≤–∞—à—É —Ä–∞–∑–º–µ—Ç–∫—É)
    await cq.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ! üôå")


# ---- 2) –ó–∞–ø—Ä–æ—Å ‚Äú1 —Ñ—Ä–∞–∑–∞‚Äù ---------------------------------------------------
@router.callback_query(F.data == "fb:text")
async def on_feedback_text_request(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_text)
    await cq.answer()  # —Å–Ω–∏–º–∞–µ–º "—á–∞—Å–∏–∫–∏"
    await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


# ---- 3) –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ wait_text ---------------------------------
@router.message(FeedbackStates.wait_text)
async def on_feedback_text_submit(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.")
        return

    with session_scope() as s:
        log_event(s, user_id=None, name="feedback_added", payload={"kind": "text", "text": text})

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üôè")


# ---- 4) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—â—ë —Ä–∞–∑ --------------------------
# –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—É:
async def send_feedback_inline(to_message: Message):
    await to_message.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=feedback_inline_kb(prefix="fb"),
    )
