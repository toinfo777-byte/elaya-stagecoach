# app/bot/handlers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.routers.menu import main_menu

router = Router(name="feedback2")

# ===== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã =====
PHRASE_BUTTON_TEXT = "‚úç 1 —Ñ—Ä–∞–∑–∞"
PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)

# –ù–∞–±–æ—Ä –æ—Ü–µ–Ω–æ–∫, –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–µ–∫—Å—Ç–æ–º (reply-–∫–ª–∞–≤–∞)
RATE_EMOJI_TO_CODE = {
    "üî•": "hot",
    "üëå": "ok",
    "üòê": "meh",
}
RATE_CODES = {"hot", "ok", "meh"}

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
RATE_REPLY_TEXT = {
    "hot": "üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª.",
    "ok":  "üëå –ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ!",
    "meh": "üòê –û–∫, —É—á—Ç–µ–Ω–æ.",
}
RATE_ALERT_TEXT = {
    "hot": "üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–∏—Å–∞–ª.",
    "ok":  "üëå –ü—Ä–∏–Ω—è—Ç–æ.",
    "meh": "üòê –£—á—Ç–µ–Ω–æ.",
}

def _is_short_phrase(text: str) -> bool:
    t = (text or "").strip()
    return 3 <= len(t) <= 120 and not t.startswith("/")

# ---------- parsing helpers ----------

def parse_rate_from_cb(data: str | None) -> str | None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –∫–æ–¥ –æ—Ü–µ–Ω–∫–∏ –∏–∑ callback_data.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã:
      - 'fb:rate:hot', 'rate:ok', 'training:rate:meh'
      - 'feedback:hot', 'hot', 'ok', 'meh'
      - —ç–º–æ–¥–∑–∏ –≤–Ω—É—Ç—Ä–∏ callback_data: 'üî•' / 'üëå' / 'üòê'
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º 'hot' | 'ok' | 'meh' | None
    """
    if not data:
        return None
    d = data.lower()

    # –ø—Ä—è–º—ã–µ –∫–æ–¥—ã
    if d in RATE_CODES:
        return d

    # —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    if any(k in d for k in ("rate", "fb:rate", "feedback", "fb", "grade", "score")):
        for code in RATE_CODES:
            if code in d:
                return code

    # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —ç–º–æ–¥–∑–∏ –≤ data
    for emoji, code in RATE_EMOJI_TO_CODE.items():
        if emoji in data:
            return code

    # fallback: –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –≤ data ‚Äî —Ç–æ–∂–µ —ç–º–æ–¥–∑–∏?
    if data in RATE_EMOJI_TO_CODE:
        return RATE_EMOJI_TO_CODE[data]

    return None

def parse_rate_from_text(text: str | None) -> str | None:
    if not text:
        return None
    t = text.strip()
    if t in RATE_EMOJI_TO_CODE:
        return RATE_EMOJI_TO_CODE[t]
    low = t.lower()
    if low in RATE_CODES:
        return low
    return None

# ---------- –û–¶–ï–ù–ö–ò: inline (callback) ----------

@router.callback_query(F.data.func(lambda d: parse_rate_from_cb(d) is not None))
async def fb_rate_inline(cq: CallbackQuery):
    code = parse_rate_from_cb(cq.data)
    # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É (user_id=cq.from_user.id, code)
    try:
        await cq.answer(RATE_ALERT_TEXT.get(code, "–ü—Ä–∏–Ω—è—Ç–æ"), show_alert=False)
    except Exception:
        pass

# ---------- –û–¶–ï–ù–ö–ò: —Ç–µ–∫—Å—Ç–æ–º (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ----------

@router.message(StateFilter("*"), F.text.func(lambda t: parse_rate_from_text(t) is not None))
async def fb_rate_text(msg: Message):
    code = parse_rate_from_text(msg.text)
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É (user_id=msg.from_user.id, code)
    await msg.answer(RATE_REPLY_TEXT.get(code, "–ü—Ä–∏–Ω—è—Ç–æ"))

# ---------- –§–†–ê–ó–ê ----------

def _is_phrase_cb(data: str | None) -> bool:
    if not data:
        return False
    d = data.lower()
    return any(k in d for k in ("fb:phrase", "phrase", "comment", "text"))

# 1) Inline-–∫–Ω–æ–ø–∫–∞ ¬´—Ñ—Ä–∞–∑–∞¬ª
@router.callback_query(F.data.func(_is_phrase_cb))
async def fb_phrase_inline(cq: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await cq.message.answer(PROMPT_TEXT)
    try:
        await cq.answer()
    except Exception:
        pass

# 2) –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞/—à–æ—Ä—Ç–∫–∞—Ç ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª
@router.message(StateFilter("*"), F.text == PHRASE_BUTTON_TEXT)
async def fb_phrase_text_btn(msg: Message, state: FSMContext):
    await state.set_state(FeedbackStates.wait_phrase)
    await msg.answer(PROMPT_TEXT)

# 3) –û—Ç–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())

# 4) –ü—Ä–∏—ë–º —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase, F.text)
async def fb_phrase_save(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not _is_short_phrase(text):
        await msg.answer("–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (3‚Äì120 —Å–∏–º–≤–æ–ª–æ–≤). –ò–ª–∏ /cancel.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # save_phrase(user_id=msg.from_user.id, phrase=text)

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üìù", reply_markup=main_menu())

# 5) –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_phrase)
async def fb_phrase_other(msg: Message):
    await msg.answer("–ñ–¥—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É —Ç–µ–∫—Å—Ç–æ–º. –ò–ª–∏ /cancel.")
