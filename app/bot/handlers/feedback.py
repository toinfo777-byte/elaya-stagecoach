# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb  # —Ç–≤–æ—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∞ c üî•/üëå/üòê –∏ "1 —Ñ—Ä–∞–∑–∞"
from app.storage.repo import session_scope, log_event

router = Router(name="feedback2")

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–≤ –º–µ–Ω—é" ‚Äî —à–ª—ë—Ç /cancel (—É —Ç–µ–±—è —ç—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é)
def menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/cancel")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

# ----- 1) –ü–æ–π–º–∞—Ç—å –∫–ª–∏–∫ –Ω–∞ –æ—Ü–µ–Ω–∫—É üî•/üëå/üòê -----
@router.callback_query(F.data.startswith("fb:rate:"))
async def on_feedback_rate(cb: CallbackQuery, state: FSMContext):
    # fb:rate:hot | ok | meh
    _, _, rate = cb.data.split(":", 2)
    await state.update_data(rate=rate)

    # –ø—Ä–æ—Å–∏–º –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await cb.message.answer(
        "–ü—Ä–∏–Ω—è—Ç–æ üëç\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω—É —Ñ—Ä–∞–∑—É: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å?",
        reply_markup=menu_kb(),
    )
    await cb.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    await state.set_state(FeedbackStates.wait_text)

# ----- 2) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´1 —Ñ—Ä–∞–∑–∞¬ª –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ã –±–µ–∑ –æ—Ü–µ–Ω–∫–∏ -----
@router.callback_query(F.data == "fb:text")
async def on_feedback_text_only(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer(
        "–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π üôè",
        reply_markup=menu_kb(),
    )
    await cb.answer()
    await state.set_state(FeedbackStates.wait_text)

# ----- 3) –ü—Ä–∏–Ω—è—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å -----
@router.message(FeedbackStates.wait_text)
async def on_feedback_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    rate = data.get("rate")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª —Å—Ä–∞–∑—É ¬´1 —Ñ—Ä–∞–∑–∞¬ª

    payload = {
        "tg_id": msg.from_user.id,
        "username": msg.from_user.username,
        "rate": rate,                # "hot" | "ok" | "meh" | None
        "text": msg.text.strip(),
        "message_id": msg.message_id,
    }

    # –õ–æ–≥–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ (user_id –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –∫–ª–∞–¥—ë–º None –∏ tg_id –≤ payload)
    try:
        with session_scope() as s:
            log_event(s, user_id=None, name="feedback_added", payload=payload)
    except Exception:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫, —Å–ø–∞—Å–∏–±–æ –∏ —Ç–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–º
        pass

    await state.clear()
    await msg.answer(
        "–°–ø–∞—Å–∏–±–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª –æ—Ç–∑—ã–≤ üôå\n–ù–∞–∂–º–∏ /cancel, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
        reply_markup=menu_kb(),
    )

# ----- 4) –ó–∞–ø–∞—Å–Ω–æ–π –≤—Ö–æ–¥: –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏ -----
@router.message(F.text.casefold() == "–æ—Ç–∑—ã–≤")
async def show_feedback_buttons(msg: Message):
    await msg.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=feedback_inline_kb(),
    )
