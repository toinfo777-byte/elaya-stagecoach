from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates
from app.bot.keyboards.feedback import feedback_inline_kb

router = Router(name="feedback2")


# ------- —Ä–∞–∑–±–æ—Ä callback_data -------
def _parse_rate(data: str) -> str | None:
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º: "fb:rate:hot", "feedback:rate:ok", "rate:meh"
    if not data:
        return None
    if data.startswith(("fb:rate:", "feedback:rate:", "rate:")):
        return data.split(":")[-1]
    return None


def _is_text_cb(data: str) -> bool:
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º: "fb:text", "feedback:text", "text_feedback", –∏ –ª—é–±—ã–µ ...:text
    return (
        data in {"fb:text", "feedback:text", "text_feedback"}
        or (data and data.endswith(":text"))
    )


# ------- –æ—Ü–µ–Ω–∫–∞ üî•/üëå/üòê -------
@router.callback_query(F.data.func(lambda d: _parse_rate(d) is not None))
async def on_feedback_rate(cq: CallbackQuery, state: FSMContext):
    try:
        rate = _parse_rate(cq.data) or "unknown"
        await cq.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")  # —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
        await cq.message.answer("–ü—Ä–∏–Ω—è—Ç–æ. –°–ø–∞—Å–∏–±–æ! üôå")
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî –Ω–µ —Ä–æ–Ω—è–µ–º –∞–ø–∫—É
        try:
            await cq.answer("–ü—Ä–∏–Ω—è—Ç–æ!")
        except Exception:
            pass


# ------- –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ ‚úçÔ∏è -------
@router.callback_query(F.data.func(_is_text_cb))
async def on_feedback_text_request(cq: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(FeedbackStates.wait_text)
        await cq.answer()
        await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É-–æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
    except Exception:
        try:
            await cq.answer("–û–∫!")
        except Exception:
            pass


# ------- –ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ -------
@router.message(FeedbackStates.wait_text)
async def on_feedback_text_submit(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π.")
        return
    # –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º –≤ –ë–î ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞–¥–µ–Ω–∏–π
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. üôè")


# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—â—ë —Ä–∞–∑ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
async def send_feedback_inline(to_message: Message):
    await to_message.answer(
        "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
        reply_markup=feedback_inline_kb(prefix="fb"),
    )
