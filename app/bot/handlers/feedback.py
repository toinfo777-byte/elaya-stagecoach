# app/bot/handlers/feedback.py
from __future__ import annotations

import logging
import re
from typing import Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from app.bot.states import FeedbackStates

router = Router(name="feedback2")
log = logging.getLogger(__name__)

PROMPT_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. "
    "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)

RATE_ALERT_TEXT = {
    "hot": "üî• –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "ok":  "üëå –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
    "meh": "üòê –ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ!",
}

# ---------- —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑ callback_data ----------

_RE_NUM = re.compile(r"(?<!\d)([123])(?!\d)")

def _norm(s: str | None) -> str:
    return (s or "").strip().lower()

def _detect_phrase_by_data(data: str) -> bool:
    s = _norm(data)
    return any(k in s for k in (
        "fb:phrase", "phrase", "one_phrase", "comment", "review", "note", "text",
        "—Ñ—Ä–∞–∑", "—Ç–µ–∫—Å—Ç",
    ))

def _detect_rate_by_data(data: str) -> Optional[str]:
    s = _norm(data)

    # —Å–ª–æ–≤–∞/—ç–º–æ–¥–∑–∏
    if any(k in s for k in ("rate:hot", "fb:hot", "hot", "fire", "üî•", "r_hot", "rate-hot")):
        return "hot"
    if any(k in s for k in ("rate:ok", "fb:ok", "ok", "üëå", "thumb", "üëç", "good")):
        return "ok"
    if any(k in s for k in ("rate:meh", "fb:meh", "meh", "neutral", "üòê", "so_so", "bad")):
        return "meh"

    # —á–∏—Å–ª–∞/–∫–æ–¥—ã
    m = _RE_NUM.search(s)
    if m:
        return {"1": "hot", "2": "ok", "3": "meh"}.get(m.group(1))

    for pat, val in (
        (r"(?:^|[^a-z])r[:_\-]?1(?!\d)", "hot"),
        (r"(?:^|[^a-z])r[:_\-]?2(?!\d)", "ok"),
        (r"(?:^|[^a-z])r[:_\-]?3(?!\d)", "meh"),
        (r"rate[:_\-]?1(?!\d)", "hot"),
        (r"rate[:_\-]?2(?!\d)", "ok"),
        (r"rate[:_\-]?3(?!\d)", "meh"),
        (r"fb[:_\-]?1(?!\d)", "hot"),
        (r"fb[:_\-]?2(?!\d)", "ok"),
        (r"fb[:_\-]?3(?!\d)", "meh"),
    ):
        if re.search(pat, s):
            return val

    return None

# ---------- fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (—Ç–µ–∫—Å—Ç/–ø–æ–∑–∏—Ü–∏—è) ----------

def _detect_rate_by_markup(cq: CallbackQuery) -> Optional[str]:
    rm: InlineKeyboardMarkup | None = getattr(getattr(cq, "message", None), "reply_markup", None)
    if not rm or not isinstance(rm, InlineKeyboardMarkup):
        return None

    for r_idx, row in enumerate(rm.inline_keyboard or []):
        for c_idx, btn in enumerate(row or []):
            if not isinstance(btn, InlineKeyboardButton):
                continue
            if btn.callback_data == cq.data:
                txt = (btn.text or "").strip()
                # –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
                if "üî•" in txt or "–æ–≥–æ–Ω—å" in txt.lower():
                    return "hot"
                if "üëå" in txt or "üëç" in txt or "ok" in txt.lower():
                    return "ok"
                if "üòê" in txt or "–Ω–µ–π—Ç—Ä" in txt.lower():
                    return "meh"
                # –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: 0/1/2)
                if r_idx == 0 and c_idx in (0, 1, 2):
                    return {0: "hot", 1: "ok", 2: "meh"}[c_idx]
                # –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
                return None
    return None

def _is_phrase_button_by_markup(cq: CallbackQuery) -> bool:
    rm: InlineKeyboardMarkup | None = getattr(getattr(cq, "message", None), "reply_markup", None)
    if not rm or not isinstance(rm, InlineKeyboardMarkup):
        return False
    for row in rm.inline_keyboard or []:
        for btn in row or []:
            if getattr(btn, "callback_data", None) == cq.data:
                txt = (btn.text or "").lower()
                return any(k in txt for k in ("—Ñ—Ä–∞–∑", "phrase", "comment", "review", "text"))
    return False

# ----------------------------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------------------

@router.callback_query()
async def feedback_any(cq: CallbackQuery, state: FSMContext):
    data = cq.data or ""
    try:
        log.info("FB callback user=%s data=%r", getattr(cq.from_user, "id", "?"), data)
    except Exception:
        pass

    # 1) ¬´—Ñ—Ä–∞–∑–∞¬ª
    if _detect_phrase_by_data(data) or _is_phrase_button_by_markup(cq):
        await state.set_state(FeedbackStates.wait_phrase)
        await cq.answer()  # –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–∞—Å–∏—Ç—å –∫—Ä—É—Ç–∏–ª–∫—É
        await cq.message.answer(PROMPT_TEXT)
        return

    # 2) –æ—Ü–µ–Ω–∫–∞
    rate = _detect_rate_by_data(data) or _detect_rate_by_markup(cq)
    if rate:
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É (rate) –≤ –ë–î
        await cq.answer(RATE_ALERT_TEXT.get(rate, "–ü—Ä–∏–Ω—è—Ç–æ"), show_alert=False)
        return

    # 3) –ø—Ä–æ—á–µ–µ ‚Äî —Ç–∏—Ö–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await cq.answer()  # –±–µ–∑ —Ç–µ–∫—Å—Ç–∞


@router.message(FeedbackStates.wait_phrase, ~F.text.startswith("/"))
async def fb_phrase_text(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å phrase –≤ –ë–î
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úçÔ∏è")

@router.message(FeedbackStates.wait_phrase, Command("cancel"))
async def fb_phrase_cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–∏–ª. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª –µ—â—ë —Ä–∞–∑.")
