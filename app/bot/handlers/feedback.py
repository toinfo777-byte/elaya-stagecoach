# app/bot/handlers/feedback.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates

router = Router(name="feedback2")

# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–æ–∫ -----
def feedback_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:hot"),
            InlineKeyboardButton(text="üëå", callback_data="fb:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:text")],
    ])

# ----- –•–µ–ª–ø–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å ¬´–æ—Ü–µ–Ω–∫–∏¬ª –≥–¥–µ —É–≥–æ–¥–Ω–æ -----
async def prompt_feedback(message: Message, text: str = "–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç—é–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–∑—ã–≤:") -> None:
    await message.answer(text, reply_markup=feedback_kb())

# ====== HANDLERS ======

# –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
@router.callback_query(F.data.in_({"fb:hot", "fb:ok", "fb:meh"}))
async def on_quick_mark(cb: CallbackQuery):
    mark = {"fb:hot": "üî•", "fb:ok": "üëå", "fb:meh": "üòê"}[cb.data]
    # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ü–µ–Ω–∫—É –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    await cb.answer("–°–ø–∞—Å–∏–±–æ!")
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ
    # await cb.message.edit_reply_markup(reply_markup=None)

# –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º ¬´–æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞¬ª
@router.callback_query(F.data == "fb:text")
async def on_text_request(cb: CallbackQuery, state: FSMContext):
    await cb.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´–æ–∫–Ω–æ¬ª
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel")
    await state.set_state(FeedbackStates.wait_text)

# –ü—Ä–∏—ë–º –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã
@router.message(FeedbackStates.wait_text, F.text)
async def on_text_received(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()
    if not text or len(text) > 300:
        await msg.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (user_id=msg.from_user.id, text=text)
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üôå")
