# app/bot/routers/premium.py
from __future__ import annotations

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é, –µ—Å–ª–∏ —É —Ç–µ–±—è –æ–Ω–∞ –µ—Å—Ç—å
try:
    from app.keyboards.menu import get_main_menu_kb  # type: ignore
except Exception:
    get_main_menu_kb = None

router = Router(name="premium")

BACK_TO_MENU_TEXT = "üìé –í –º–µ–Ω—é"


class PremiumForm(StatesGroup):
    WAIT_GOAL = State()


def _only_menu_kb() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=BACK_TO_MENU_TEXT)]],
        resize_keyboard=True,
    )


def _inline_actions_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üîé –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", callback_data="premium:inside")],
            [types.InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="premium:apply")],
            [types.InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="premium:list")],
        ]
    )


def _main_menu_kb() -> types.ReplyKeyboardMarkup | None:
    if callable(get_main_menu_kb):
        try:
            return get_main_menu_kb()  # type: ignore[misc]
        except Exception:
            pass
    return None


async def _back_to_main_menu(message: types.Message, state: FSMContext | None = None) -> None:
    if state:
        await state.clear()
    menu_kb = _main_menu_kb() or _only_menu_kb()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=menu_kb)


@router.message(Command("premium"))
@router.message(F.text.casefold() == "‚≠ê —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
@router.message(F.text.casefold() == "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
async def premium_entry(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    text = (
        "‚≠ê <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    # –í–Ω–∏–∑—É ‚Äî —Ç–æ–ª—å–∫–æ ¬´–í –º–µ–Ω—é¬ª
    await message.answer(text, reply_markup=_only_menu_kb())
    # –ê –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –∏–Ω–ª–∞–π–Ω–æ–º
    await message.answer("‚Ää", reply_markup=_inline_actions_kb())


@router.callback_query(F.data == "premium:inside")
async def premium_inside(cb: types.CallbackQuery) -> None:
    text = "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤."
    await cb.message.edit_text(text, reply_markup=_inline_actions_kb())
    await cb.answer()


@router.callback_query(F.data == "premium:list")
async def premium_list(cb: types.CallbackQuery) -> None:
    await cb.answer()
    await cb.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=_only_menu_kb())


@router.callback_query(F.data == "premium:apply")
async def premium_apply(cb: types.CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    await state.set_state(PremiumForm.WAIT_GOAL)
    await cb.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel.",
        reply_markup=_only_menu_kb(),
    )


@router.message(PremiumForm.WAIT_GOAL, F.text & ~F.text.startswith("/"))
async def premium_save_goal(message: types.Message, state: FSMContext) -> None:
    goal = (message.text or "").strip()
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å goal –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç")
    await _back_to_main_menu(message, state)


@router.message(PremiumForm.WAIT_GOAL, Command("cancel"))
async def premium_cancel(message: types.Message, state: FSMContext) -> None:
    await message.answer("–û—Ç–º–µ–Ω–∏–ª. –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª.")
    await _back_to_main_menu(message, state)


@router.message(F.text == BACK_TO_MENU_TEXT)
async def premium_back_to_menu(message: types.Message, state: FSMContext) -> None:
    await _back_to_main_menu(message, state)
