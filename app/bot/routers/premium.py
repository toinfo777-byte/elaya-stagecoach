# app/bot/routers/premium.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import (
    main_menu,
    BTN_PREMIUM,       # ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
)
from app.storage.models import User, Lead
from app.storage.repo import session_scope

router = Router(name="premium")


# ----- FSM -----
class PremiumForm(StatesGroup):
    waiting_text = State()   # –∂–¥—ë–º –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É


# ----- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ -----
def _contact_from_tg(user: types.User) -> str:
    if user.username:
        return f"@{user.username}"
    return f"tg:{user.id}"


def _get_or_create_user(tg_user: types.User) -> User:
    with session_scope() as s:
        u: User | None = s.query(User).filter_by(tg_id=tg_user.id).first()
        if u is None:
            u = User(
                tg_id=tg_user.id,
                username=tg_user.username,
                name=tg_user.full_name,
            )
            s.add(u)
            s.commit()
            s.refresh(u)
        return u


# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ -----
def premium_menu_kb() -> types.ReplyKeyboardMarkup:
    rows = [
        [types.KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")],
        [types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [types.KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [types.KeyboardButton(text="üìØ –í –º–µ–Ω—é")],
    ]
    return types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


# ----- –•–µ–Ω–¥–ª–µ—Ä—ã: –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª -----
@router.message(Command("premium"))
@router.message(F.text == BTN_PREMIUM)
async def premium_entry(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=premium_menu_kb(),
    )


# ----- –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ -----
@router.message(F.text == "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")
async def premium_inside(message: types.Message) -> None:
    await message.answer(
        "–í–Ω—É—Ç—Ä–∏:\n"
        "‚Ä¢ –ñ–∏–≤—ã–µ –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é\n"
        "‚Ä¢ –ü–∞–∫–µ—Ç—ã ¬´–≥–æ–ª–æ—Å/–¥–∏–∫—Ü–∏—è/–≤–Ω–∏–º–∞–Ω–∏–µ¬ª –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ –ö–∞—Å—Ç–∏–Ω–≥-–≤–æ–ø—Ä–æ—Å—ã –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª –¥–ª—è –∑–∞—è–≤–∫–∏",
        reply_markup=premium_menu_kb(),
    )


# ----- –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É -----
@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def premium_apply_start(message: types.Message, state: FSMContext) -> None:
    await state.set_state(PremiumForm.waiting_text)
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):\n"
        "–∫–∞–∫–∞—è —Ü–µ–ª—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel",
    )


@router.message(Command("cancel"), StateFilter(PremiumForm.waiting_text))
async def premium_apply_cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.message(StateFilter(PremiumForm.waiting_text))
async def premium_apply_save(message: types.Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—è–≤–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return

    u = _get_or_create_user(message.from_user)
    with session_scope() as s:
        s.add(Lead(
            user_id=u.id,
            channel="tg",
            contact=_contact_from_tg(message.from_user),
            note=text[:500],
            track="premium",     # –æ—Ç–ª–∏—á–∞–µ–º –æ—Ç leader
        ))
        s.commit()

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î). –ú—ã —Å–≤—è–∂–µ–º—Å—è –∏–ª–∏ –≤–∫–ª—é—á–∏–º –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=premium_menu_kb())


# ----- –ú–æ–∏ –∑–∞—è–≤–∫–∏ -----
@router.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def premium_my_requests(message: types.Message) -> None:
    u = _get_or_create_user(message.from_user)
    with session_scope() as s:
        rows: list[Lead] = (
            s.query(Lead)
            .filter(Lead.user_id == u.id)
            .order_by(Lead.ts.desc())
            .limit(5)
            .all()
        )

    if not rows:
        await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_menu_kb())
        return

    # –ö—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ (—Å —Ç—Ä–µ–∫–æ–º)
    lines = []
    for i, r in enumerate(rows, start=1):
        lines.append(f"‚Ä¢ #{i} ‚Äî {r.ts:%d.%m %H:%M} ‚Äî {r.track or '‚Äî'}")

    await message.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=premium_menu_kb())


# ----- –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -----
@router.message(F.text == "üìØ –í –º–µ–Ω—é")
async def back_to_main(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
