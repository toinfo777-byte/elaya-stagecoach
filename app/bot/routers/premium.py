from __future__ import annotations

from datetime import datetime
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import (
    main_menu,
    BTN_PREMIUM,      # ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é)
)
from app.storage.repo import session_scope, log_event
from app.storage.models import Lead, User

router = Router(name="premium")


# --------- –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬ª ----------
BTN_PREM_WHATS_INSIDE = "üîç –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
BTN_PREM_APPLY       = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
BTN_PREM_MY_APPLIES  = "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
BTN_PREM_BACK        = "üì£ –í –º–µ–Ω—é"

def premium_menu_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=BTN_PREM_WHATS_INSIDE)],
        [KeyboardButton(text=BTN_PREM_APPLY)],
        [KeyboardButton(text=BTN_PREM_MY_APPLIES)],
        [KeyboardButton(text=BTN_PREM_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


# --------- FSM ---------
class PremiumForm(StatesGroup):
    goal = State()


# --------- entry —Ç–æ—á–∫–∏ ---------
@router.message(F.text == BTN_PREMIUM)
@router.message(F.text == "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
async def premium_entry(msg: Message) -> None:
    text = (
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await msg.answer(text, reply_markup=premium_menu_kb())
    await log_event_safe(msg.from_user.id, "premium_open")


@router.message(F.text == BTN_PREM_WHATS_INSIDE)
async def premium_inside(msg: Message) -> None:
    await msg.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.",
        reply_markup=premium_menu_kb(),
    )


@router.message(F.text == BTN_PREM_MY_APPLIES)
async def premium_my_applies(msg: Message) -> None:
    tg_id = msg.from_user.id
    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_menu_kb())
            return
        leads = (
            s.query(Lead)
            .filter_by(user_id=user.id, track="premium")
            .order_by(Lead.ts.desc())
            .limit(10)
            .all()
        )
    if not leads:
        await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_menu_kb())
        return

    lines = []
    for i, l in enumerate(leads, 1):
        when = l.ts.strftime("%d.%m %H:%M")
        status = "üü° –Ω–æ–≤–∞—è"  # –ø–æ–∫–∞ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        lines.append(f"‚Ä¢ #{i} ‚Äî {when} ‚Äî {status}")

    await msg.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=premium_menu_kb())


@router.message(F.text == BTN_PREM_APPLY)
async def premium_apply_start(msg: Message, state: FSMContext) -> None:
    await state.set_state(PremiumForm.goal)
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=premium_menu_kb(),  # –æ—Å—Ç–∞–≤–∏–º —Ç–æ –∂–µ –º–µ–Ω—é, —ç—Ç–æ –æ–∫
    )


@router.message(PremiumForm.goal)
async def premium_apply_save(msg: Message, state: FSMContext) -> None:
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª—å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π. –ò–ª–∏ /cancel.")
        return

    tg_id = msg.from_user.id
    username = (msg.from_user.username or "").strip()
    contact = f"@{username}" if username else str(tg_id)

    with session_scope() as s:
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            user = User(tg_id=tg_id, username=username, last_seen=datetime.utcnow())
            s.add(user)
            s.flush()

        s.add(
            Lead(
                user_id=user.id,
                channel="tg",
                contact=contact,
                note=text[:500],
                track="premium",
            )
        )

    await state.clear()
    # –í–ê–ñ–ù–û: –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–õ–ê–í–ù–û–ï –º–µ–Ω—é,
    # —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞ –∫–Ω–æ–ø–∫–∞ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=main_menu())
    await log_event_safe(tg_id, "lead_premium_created", {"text": text})


@router.message(F.text == BTN_PREM_BACK)
async def premium_back_to_menu(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


# --------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ---------
async def log_event_safe(tg_id: int, name: str, payload: dict | None = None) -> None:
    try:
        with session_scope() as s:
            user = s.query(User).filter_by(tg_id=tg_id).first()
            log_event(s, user_id=(user.id if user else None), name=name, payload=(payload or {}))
    except Exception:
        pass
