# app/bot/routers/premium.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import BTN_PREMIUM, main_menu

router = Router(name="premium")

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞
KB_WHATS_INSIDE = "üîé –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
KB_LEAVE_APP = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
KB_BACK_MENU = "üì£ –í –º–µ–Ω—é"


def _premium_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=KB_WHATS_INSIDE)],
        [KeyboardButton(text=KB_LEAVE_APP)],
        [KeyboardButton(text=KB_BACK_MENU)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


def _only_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=KB_BACK_MENU)]],
        resize_keyboard=True,
        is_persistent=True,
    )


class PremiumForm(StatesGroup):
    goal = State()  # –∫–æ—Ä–æ—Ç–∫–∞—è —Ü–µ–ª—å/–∑–∞—è–≤–∫–∞


@router.message(F.text == BTN_PREMIUM)
async def premium_entry(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=_premium_kb(),
    )


@router.message(F.text == KB_WHATS_INSIDE)
async def premium_inside(message: Message) -> None:
    await message.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.",
        reply_markup=_premium_kb(),
    )


@router.message(F.text == KB_LEAVE_APP)
async def premium_ask_application(message: Message, state: FSMContext) -> None:
    await state.set_state(PremiumForm.goal)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). "
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=_only_menu_kb(),
    )


@router.message(PremiumForm.goal)
async def premium_take_application(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—É—Å—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à—É —Ü–µ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/–ª–æ–≥–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        from app.storage.repo import session_scope, log_event  # type: ignore
        from app.storage.models import User  # type: ignore

        with session_scope() as s:
            u = s.query(User).filter_by(tg_id=message.from_user.id).first()
            uid = u.id if u else None
            log_event(s, uid, "premium_application", {"text": text})
    except Exception:
        # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –Ω–µ –º–µ—à–∞–µ–º –ø–æ—Ç–æ–∫—É
        pass

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=_only_menu_kb())


@router.message(F.text == KB_BACK_MENU)
async def back_to_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


# –û–±—â–µ–µ /cancel ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
@router.message(F.text.casefold() == "/cancel")
async def cancel_any(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–∏–ª. –í–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu())
