from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Text
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.menu import (
    BTN_PREMIUM,
    main_menu,
)
from app.storage.repo import session_scope, log_event
from app.storage.models import Lead, User

router = Router(name="premium")

# --- callbacks
CB_INSIDE = "premium:inside"
CB_APPLY = "premium:apply"
CB_LIST = "premium:list"
CB_BACK = "premium:back"


class PremiumForm(StatesGroup):
    waiting_goal = State()


def premium_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", callback_data=CB_INSIDE)
    kb.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=CB_APPLY)
    kb.button(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data=CB_LIST)
    kb.button(text="üì£ –í –º–µ–Ω—é", callback_data=CB_BACK)
    kb.adjust(1)
    return kb.as_markup()


@router.message(Text(BTN_PREMIUM))
async def premium_entry(message: types.Message) -> None:
    text = (
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(text, reply_markup=premium_kb())


@router.callback_query(F.data == CB_INSIDE)
async def premium_inside(call: types.CallbackQuery) -> None:
    await call.answer()
    await call.message.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤."
    )


@router.callback_query(F.data == CB_APPLY)
async def premium_apply_start(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await state.set_state(PremiumForm.waiting_goal)
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(PremiumForm.waiting_goal)
async def premium_apply_save(message: types.Message, state: FSMContext) -> None:
    goal_text = (message.text or "").strip()[:200]

    with session_scope() as s:
        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tg_id = message.from_user.id
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if user is None:
            user = User(
                tg_id=tg_id,
                username=message.from_user.username or None,
                name=message.from_user.full_name or None,
            )
            s.add(user)
            s.flush()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
        contact = f"@{message.from_user.username}" if message.from_user.username else str(tg_id)
        lead = Lead(
            user_id=user.id,
            channel="tg",
            contact=contact,
            note=goal_text,
            track="premium",
        )
        s.add(lead)
        s.flush()

        # –ª–æ–≥
        log_event(s, user_id=user.id, name="lead_created", payload={"track": "premium"})

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç")
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.callback_query(F.data == CB_LIST)
async def premium_my_leads(call: types.CallbackQuery) -> None:
    await call.answer()
    tg_id = call.from_user.id

    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            await call.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        leads = (
            s.query(Lead)
            .filter(Lead.user_id == user.id)
            .order_by(Lead.ts.desc())
            .limit(10)
            .all()
        )

    if not leads:
        await call.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = ["–ú–æ–∏ –∑–∞—è–≤–∫–∏:"]
    for i, l in enumerate(leads, 1):
        lines.append(f"‚Ä¢ #{i} ‚Äî {l.ts:%d.%m %H:%M} ‚Äî {l.track or '–±–µ–∑ —Ç—Ä–µ–∫–∞'}")

    await call.message.answer("\n".join(lines))


@router.callback_query(F.data == CB_BACK)
async def premium_back(call: types.CallbackQuery) -> None:
    await call.answer()
    await call.message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
