from __future__ import annotations

from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.ui.keyboards import main_menu, BTN_PREMIUM  # —Ç–≤–æ–π –º–æ–¥—É–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="premium")

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞
K_WHATS_INSIDE = "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
K_APPLY = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
K_MY_REQUESTS = "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
K_BACK = "üì£ –í –º–µ–Ω—é"

def premium_kb() -> types.ReplyKeyboardMarkup:
    rows = [
        [types.KeyboardButton(text=K_WHATS_INSIDE)],
        [types.KeyboardButton(text=K_APPLY)],
        [types.KeyboardButton(text=K_MY_REQUESTS), types.KeyboardButton(text=K_BACK)],
    ]
    return types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)

class PremiumForm(StatesGroup):
    waiting_goal = State()


# ‚Äî‚Äî‚Äî –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
@router.message(F.text == BTN_PREMIUM)
@router.message(F.text == "/premium")
async def premium_entry(m: types.Message, state: FSMContext):
    await state.clear()
    text = (
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
    )
    await m.answer(text, reply_markup=premium_kb())


# ‚Äî‚Äî‚Äî –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏
@router.message(F.text == K_WHATS_INSIDE)
async def premium_inside(m: types.Message):
    await m.answer(
        "–í–Ω—É—Ç—Ä–∏ ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ä–∞–∑–±–æ—Ä —Ä–µ—á–µ–≤—ã—Ö –∑–∞–¥–∞—á –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.\n"
        "–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞—è–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª.",
        reply_markup=premium_kb(),
    )


# ‚Äî‚Äî‚Äî –ú–æ–∏ –∑–∞—è–≤–∫–∏
@router.message(F.text == K_MY_REQUESTS)
async def premium_my_requests(m: types.Message):
    tg_id = m.from_user.id
    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        items: list[Lead] = []
        if user:
            items = (
                s.query(Lead)
                .filter(Lead.user_id == user.id, Lead.track.in_(["premium", "apply"]))
                .order_by(Lead.id.desc())
                .limit(3)
                .all()
            )

    if not items:
        await m.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
        return

    lines = ["<b>–ú–æ–∏ –∑–∞—è–≤–∫–∏:</b>"]
    for i, it in enumerate(items, 1):
        lines.append(f"‚Ä¢ #{i} ‚Äî {it.ts:%d.%m %H:%M} ‚Äî {it.track} ‚Äî ¬´{it.note}¬ª")
    await m.answer("\n".join(lines), reply_markup=premium_kb())


# ‚Äî‚Äî‚Äî –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚Üí –≤–≤–æ–¥ —Ü–µ–ª–∏
@router.message(F.text == K_APPLY)
async def premium_apply_start(m: types.Message, state: FSMContext):
    await state.set_state(PremiumForm.waiting_goal)
    await m.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=premium_kb(),
    )


@router.message(PremiumForm.waiting_goal, F.text.len() > 0)
async def premium_apply_save(m: types.Message, state: FSMContext):
    goal = (m.text or "").strip()[:200]
    tg_id = m.from_user.id

    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            user = User(tg_id=tg_id, username=m.from_user.username or None, name=m.from_user.full_name)
            s.add(user)
            s.flush()
        s.add(Lead(user_id=user.id, channel="tg", contact=f"@{m.from_user.username}" if m.from_user.username else "tg",
                   note=goal, track="premium"))

    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=premium_kb())


# ‚Äî‚Äî‚Äî –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == K_BACK)
async def premium_back_to_menu(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
