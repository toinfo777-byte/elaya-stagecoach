from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from app.bot.keyboards.menu import premium_kb, main_menu_kb

router = Router(name="premium")

# –ü—Ä–æ—Å—Ç–∞—è "–ø—Å–µ–≤–¥–æ-–ë–î" –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/–ë–î.
_USER_PREMIUM_APPS: dict[int, str] = {}


class PremiumSG(StatesGroup):
    wait_goal = State()


# –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
@router.message(Command("premium"))
@router.message(F.text == "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
async def premium_entry(message: Message, state: FSMContext) -> None:
    uid = message.from_user.id
    has_app = uid in _USER_PREMIUM_APPS
    text = (
        "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await state.clear()
    await message.answer(text, reply_markup=premium_kb(has_app))


# –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏
@router.message(F.text == "üîé –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")
async def premium_inside(message: Message) -> None:
    await message.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.",
        reply_markup=premium_kb(has_application=(message.from_user.id in _USER_PREMIUM_APPS)),
    )


# –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def premium_ask_goal(message: Message, state: FSMContext) -> None:
    await state.set_state(PremiumSG.wait_goal)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(PremiumSG.wait_goal, F.text.len() <= 200)
async def premium_save_goal(message: Message, state: FSMContext) -> None:
    _USER_PREMIUM_APPS[message.from_user.id] = message.text.strip()
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=premium_kb(has_application=True))


@router.message(PremiumSG.wait_goal)
async def premium_goal_too_long(message: Message) -> None:
    await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ üôà –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ /cancel.")


# –ú–æ–∏ –∑–∞—è–≤–∫–∏
@router.message(F.text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def premium_my_apps(message: Message) -> None:
    uid = message.from_user.id
    if uid not in _USER_PREMIUM_APPS:
        await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb(has_application=False))
        return
    goal = _USER_PREMIUM_APPS[uid]
    await message.answer(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n‚Äî {goal}", reply_markup=premium_kb(has_application=True))


# –ï–¥–∏–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ¬´–í –º–µ–Ω—é¬ª ‚Äî —Ç–æ–ª—å–∫–æ reply-–∫–Ω–æ–ø–∫–∞
@router.message(F.text == "üìé –í –º–µ–Ω—é")
async def premium_to_menu(message: Message) -> None:
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu_kb())


# –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ /cancel –∏–∑ –ø—Ä–µ–º–∏—É–º–∞
@router.message(Command("cancel"))
async def premium_cancel(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
