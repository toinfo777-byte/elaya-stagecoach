# app/bot/routers/premium.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import (
    BTN_PREMIUM,  # "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
    main_menu,
)
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="premium")


# ‚Äî‚Äî‚Äî –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬ª
PRE_BTN_WHATS_INSIDE = "üì¶ –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
PRE_BTN_LEAVE = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
PRE_BTN_MY_LEADS = "üóÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
PRE_BTN_BACK = "üì£ –í –º–µ–Ω—é"


def premium_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=PRE_BTN_WHATS_INSIDE)],
        [KeyboardButton(text=PRE_BTN_LEAVE)],
        [KeyboardButton(text=PRE_BTN_MY_LEADS)],
        [KeyboardButton(text=PRE_BTN_BACK)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


class PremiumStates(StatesGroup):
    wait_goal = State()


def _ensure_user(session, msg: types.Message) -> User:
    tg_id = msg.from_user.id
    user = session.query(User).filter(User.tg_id == tg_id).first()
    if not user:
        user = User(
            tg_id=msg.from_user.id,
            username=msg.from_user.username or None,
            name=(msg.from_user.first_name or "")
            + ((" " + msg.from_user.last_name) if msg.from_user.last_name else ""),
        )
        session.add(user)
        session.commit()
        session.refresh(user)
    return user


# ‚Äî‚Äî‚Äî –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
@router.message(F.text == BTN_PREMIUM)
@router.message(F.text == "/premium")
async def premium_entry(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=premium_kb(),
    )


# ‚Äî‚Äî‚Äî –ü–æ–¥–∫–Ω–æ–ø–∫–∏
@router.message(F.text == PRE_BTN_WHATS_INSIDE)
async def premium_whats_inside(msg: types.Message):
    await msg.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.",
        reply_markup=premium_kb(),
    )


@router.message(F.text == PRE_BTN_MY_LEADS)
async def premium_my_leads(msg: types.Message):
    with session_scope() as s:
        user = s.query(User).filter(User.tg_id == msg.from_user.id).first()
        if not user:
            await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
            return

        leads = (
            s.query(Lead)
            .filter(Lead.user_id == user.id)
            .order_by(Lead.ts.desc())
            .limit(10)
            .all()
        )

    if not leads:
        await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
        return

    lines = []
    for i, lead in enumerate(leads, 1):
        lines.append(f"#{i} ‚Äî {lead.ts:%d.%m %H:%M} ‚Äî {lead.track or '‚Äî'}")
    await msg.answer("–ú–æ–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=premium_kb())


@router.message(F.text == PRE_BTN_BACK)
async def premium_back(msg: types.Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


# ‚Äî‚Äî‚Äî ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª (FSM)
@router.message(F.text == PRE_BTN_LEAVE)
async def premium_leave_start(msg: types.Message, state: FSMContext):
    await state.set_state(PremiumStates.wait_goal)
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(PremiumStates.wait_goal, F.text)
async def premium_leave_save(msg: types.Message, state: FSMContext):
    txt = (msg.text or "").strip()
    if not txt:
        await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π.")
        return

    with session_scope() as s:
        user = _ensure_user(s, msg)
        s.add(
            Lead(
                user_id=user.id,
                channel="tg",
                contact=msg.from_user.username or str(msg.from_user.id),
                note=txt[:500],
                track="premium",
            )
        )
        s.commit()

    await state.clear()
    # –í–ê–ñ–ù–û: —Å—Ä–∞–∑—É —É–≤–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –≤–Ω–∏–∑—É
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=main_menu())
