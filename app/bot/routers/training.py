from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.menu import main_menu, BTN_TRAIN

router = Router(name="training")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´—ç—Ç—é–¥ –¥–Ω—è¬ª
_ETUDS = [
    "–≠—Ç—é–¥: –¢—Ä–∏ –º—è–≥–∫–∏—Ö –∑–µ–≤–∫–∞\n–®–∞–≥ 1/4:\n–ó–µ–≤–æ–∫ 1",
    "–≠—Ç—é–¥: –¢—Ä–∏ –º—è–≥–∫–∏—Ö –∑–µ–≤–∫–∞\n–®–∞–≥ 2/4:\n–ó–µ–≤–æ–∫ 2",
    "–≠—Ç—é–¥: –¢—Ä–∏ –º—è–≥–∫–∏—Ö –∑–µ–≤–∫–∞\n–®–∞–≥ 3/4:\n–ó–µ–≤–æ–∫ 3",
    "–≠—Ç—é–¥: –¢—Ä–∏ –º—è–≥–∫–∏—Ö –∑–µ–≤–∫–∞\n–®–∞–≥ 4/4:\n–ó–∞–≤–µ—Ä—à–∏ –¥—ã—Ö–∞–Ω–∏–µ–º",
]

def _controls(step: int) -> InlineKeyboardMarkup:
    next_btn = InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data=f"train:next:{step}")
    skip_btn = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠", callback_data=f"train:skip:{step}")
    done_btn = InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data=f"train:done:{step}")
    return InlineKeyboardMarkup(inline_keyboard=[
        [next_btn],
        [skip_btn, done_btn],
    ])

@router.message(Command("training"))
@router.message(F.text == BTN_TRAIN)
async def training_entry(message: Message) -> None:
    text = "üß≠ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"
    await message.answer(text, reply_markup=main_menu())
    await message.answer(_ETUDS[0], reply_markup=_controls(0))

# –ö–æ–ª–±—ç–∫–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º main_menu()
from aiogram.types import CallbackQuery

@router.callback_query(F.data.startswith("train:"))
async def training_callbacks(cb: CallbackQuery) -> None:
    _, action, raw = cb.data.split(":")
    step = int(raw)

    if action == "next":
        step = min(step + 1, len(_ETUDS) - 1)
        await cb.message.edit_text(_ETUDS[step], reply_markup=_controls(step))
    elif action == "skip":
        step = min(step + 1, len(_ETUDS) - 1)
        await cb.answer("–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
        await cb.message.edit_reply_markup(reply_markup=_controls(step))
    elif action == "done":
        await cb.answer("–û—Ç–ª–∏—á–Ω–æ!")
        await cb.message.delete()

    # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
    try:
        await cb.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá", reply_markup=main_menu())
    except Exception:
        pass
