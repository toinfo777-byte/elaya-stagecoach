from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

router = Router(name="apply")

# –ü—Ä–æ—Å—Ç–æ–µ ¬´—Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª –±–µ–∑ FSM
_WAIT_GOAL: set[int] = set()


def _apply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="üì£ –í –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )


@router.message(Command("apply"))
@router.message(F.text.lower().in_({"–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞", "üß≠ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞", "üß≠ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)"}))
async def apply_entry(message: Message) -> None:
    txt = (
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏."
    )
    await message.answer(txt, reply_markup=_apply_kb())


@router.message(F.text.lower() == "üìù –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def apply_ask_goal(message: Message) -> None:
    _WAIT_GOAL.add(message.from_user.id)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=_apply_kb(),
    )


@router.message(F.text.lower() == "/cancel")
async def apply_cancel(message: Message) -> None:
    _WAIT_GOAL.discard(message.from_user.id)
    await message.answer("–û—Ç–º–µ–Ω–∏–ª. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=_apply_kb())


# –ª–æ–≤–∏–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ ¬´—Ü–µ–ª—å¬ª, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
@router.message(F.text & (F.from_user.id.func(lambda uid: uid in _WAIT_GOAL)))
async def apply_save_goal(message: Message) -> None:
    _WAIT_GOAL.discard(message.from_user.id)

    goal = (message.text or "").strip()
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å goal –≤ –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    # try: await repo.save_leader_path_goal(user_id=message.from_user.id, goal=goal) ...

    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=_apply_kb())


# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–í –º–µ–Ω—é¬ª (–ø—É—Å—Ç—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä)
@router.message(F.text.lower() == "üì£ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message) -> None:
    # –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä—ë–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –¥–∞–ª—å—à–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à —Å–∏—Å—Ç–µ–º–Ω—ã–π ¬´–í –º–µ–Ω—é¬ª
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=ReplyKeyboardRemove())
