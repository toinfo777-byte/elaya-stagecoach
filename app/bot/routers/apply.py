from __future__ import annotations

from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.ui.keyboards import main_menu, BTN_APPLY
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="apply")

K_APPLY_SUBMIT = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
K_BACK = "üì£ –í –º–µ–Ω—é"

def apply_kb() -> types.ReplyKeyboardMarkup:
    rows = [
        [types.KeyboardButton(text=K_APPLY_SUBMIT)],
        [types.KeyboardButton(text=K_BACK)],
    ]
    return types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)

class ApplyForm(StatesGroup):
    waiting_goal = State()


@router.message(F.text == BTN_APPLY)
@router.message(F.text == "/apply")
async def apply_entry(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "üß≠ <b>–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞</b> ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=apply_kb(),
    )


@router.message(F.text == K_APPLY_SUBMIT)
async def apply_submit(m: types.Message, state: FSMContext):
    await state.set_state(ApplyForm.waiting_goal)
    await m.answer(
        "–ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel.",
        reply_markup=apply_kb(),
    )


@router.message(ApplyForm.waiting_goal, F.text.len() > 0)
async def apply_save(m: types.Message, state: FSMContext):
    goal = (m.text or "").strip()[:200]
    tg_id = m.from_user.id

    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            user = User(tg_id=tg_id, username=m.from_user.username or None, name=m.from_user.full_name)
            s.add(user)
            s.flush()
        s.add(Lead(user_id=user.id, channel="tg", contact=f"@{m.from_user.username}" if m.from_user.username else "tg",
                   note=goal, track="apply"))

    await state.clear()
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)", reply_markup=apply_kb())
    # ‚Üë –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ‚Äî –ø–æ–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ ¬´—Å –∑–∞–ø–∏—Å—å—é –≤ –ë–î¬ª (–º—ã —É–∂–µ –ø–∏—à–µ–º –≤ Lead).


@router.message(F.text == K_BACK)
async def apply_back(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
