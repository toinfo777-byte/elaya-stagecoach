from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from app.bot.keyboards.menu import main_menu_kb

router = Router(name="apply")


class ApplySG(StatesGroup):
    waiting_goal = State()


@router.message(Command("apply"))
@router.message(F.text == "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")
async def apply_entry(message: Message, state: FSMContext) -> None:
    text = (
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    await state.set_state(ApplySG.waiting_goal)
    await message.answer(text)


@router.message(Command("cancel"))
async def apply_cancel(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())


@router.message(ApplySG.waiting_goal, F.text.len() <= 200)
async def apply_save(message: Message, state: FSMContext) -> None:
    # –¢—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≤–∞—à—É –ë–î/—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–¥—ë–º –≤ FSM (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä).
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=main_menu_kb())


@router.message(ApplySG.waiting_goal)
async def apply_too_long(message: Message) -> None:
    await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ üôà –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ /cancel.")
