from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Text
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.menu import BTN_APPLY, main_menu
from app.storage.repo import session_scope, log_event
from app.storage.models import Lead, User

router = Router(name="apply")

# --- callbacks
CB_APPLY_START = "apply:start"
CB_APPLY_LIST = "apply:list"
CB_APPLY_BACK = "apply:back"


class ApplyForm(StatesGroup):
    waiting_goal = State()


def apply_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=CB_APPLY_START)
    kb.button(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data=CB_APPLY_LIST)
    kb.button(text="üì£ –í –º–µ–Ω—é", callback_data=CB_APPLY_BACK)
    kb.adjust(1)
    return kb.as_markup()


@router.message(Text(BTN_APPLY))
async def apply_entry(message: types.Message) -> None:
    text = (
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏."
    )
    await message.answer(text, reply_markup=apply_kb())


@router.callback_query(F.data == CB_APPLY_START)
async def apply_goal_ask(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await state.set_state(ApplyForm.waiting_goal)
    await call.message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(ApplyForm.waiting_goal)
async def apply_goal_save(message: types.Message, state: FSMContext) -> None:
    goal = (message.text or "").strip()[:200]

    with session_scope() as s:
        tg_id = message.from_user.id
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if user is None:
            user = User(
                tg_id=tg_id,
                username=message.from_user.username or None,
                name=message.from_user.full_name or None,
            )
            s.add(user)
            s.flush()

        contact = f"@{message.from_user.username}" if message.from_user.username else str(tg_id)
        lead = Lead(
            user_id=user.id,
            channel="tg",
            contact=contact,
            note=goal,
            track="leader",  # –æ—Ç–ª–∏—á–∞–µ–º –æ—Ç premium
        )
        s.add(lead)
        s.flush()

        log_event(s, user_id=user.id, name="lead_created", payload={"track": "leader"})

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç")
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.callback_query(F.data == CB_APPLY_LIST)
async def apply_list(call: types.CallbackQuery) -> None:
    await call.answer()
    tg_id = call.from_user.id

    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            await call.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        leads = (
            s.query(Lead)
            .filter(Lead.user_id == user.id)
            .order_by(Lead.ts.desc())
            .limit(10)
            .all()
        )

    if not leads:
        await call.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    lines = ["–ú–æ–∏ –∑–∞—è–≤–∫–∏:"]
    for i, l in enumerate(leads, 1):
        lines.append(f"‚Ä¢ #{i} ‚Äî {l.ts:%d.%m %H:%M} ‚Äî {l.track or '–±–µ–∑ —Ç—Ä–µ–∫–∞'}")

    await call.message.answer("\n".join(lines))


@router.callback_query(F.data == CB_APPLY_BACK)
async def apply_back(call: types.CallbackQuery) -> None:
    await call.answer()
    await call.message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
