# app/bot/routers/apply.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import BTN_APPLY, main_menu

router = Router(name="apply")

KB_LEAVE_APP = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
KB_BACK_MENU = "üì£ –í –º–µ–Ω—é"


def _apply_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=KB_LEAVE_APP)],
        [KeyboardButton(text=KB_BACK_MENU)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


def _only_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=KB_BACK_MENU)]],
        resize_keyboard=True,
        is_persistent=True,
    )


class ApplyForm(StatesGroup):
    goal = State()


@router.message(F.text == BTN_APPLY)
async def apply_entry(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=_apply_kb(),
    )


@router.message(F.text == KB_LEAVE_APP)
async def apply_ask(message: Message, state: FSMContext) -> None:
    await state.set_state(ApplyForm.goal)
    await message.answer(
        "–ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=_only_menu_kb(),
    )


@router.message(ApplyForm.goal)
async def apply_take(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—É—Å—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –≤–∞—à—É —Ü–µ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ/–ª–∏–¥ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ
    try:
        from app.storage.repo import session_scope, log_event  # type: ignore
        from app.storage.models import User  # type: ignore

        with session_scope() as s:
            u = s.query(User).filter_by(tg_id=message.from_user.id).first()
            uid = u.id if u else None
            log_event(s, uid, "apply_application", {"text": text})
    except Exception:
        pass

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=_only_menu_kb())


@router.message(F.text == KB_BACK_MENU)
async def back_to_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.message(F.text.casefold() == "/cancel")
async def cancel_any(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–∏–ª. –í–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.", reply_markup=main_menu())
