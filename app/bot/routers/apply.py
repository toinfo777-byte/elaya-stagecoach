# app/bot/routers/apply.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import (
    main_menu,
    BTN_APPLY,         # üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞
)
from app.storage.models import User, Lead
from app.storage.repo import session_scope

router = Router(name="apply")


# ----- FSM -----
class ApplyForm(StatesGroup):
    waiting_text = State()   # –∂–¥—ë–º ¬´—Ü–µ–ª—å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π¬ª


# ----- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ -----
def _contact_from_tg(user: types.User) -> str:
    if user.username:
        return f"@{user.username}"
    return f"tg:{user.id}"


def _get_or_create_user(tg_user: types.User) -> User:
    with session_scope() as s:
        u: User | None = s.query(User).filter_by(tg_id=tg_user.id).first()
        if u is None:
            u = User(
                tg_id=tg_user.id,
                username=tg_user.username,
                name=tg_user.full_name,
            )
            s.add(u)
            s.commit()
            s.refresh(u)
        return u


# ----- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ -----
def apply_kb() -> types.ReplyKeyboardMarkup:
    rows = [
        [types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [types.KeyboardButton(text="üìØ –í –º–µ–Ω—é")],
    ]
    return types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


# ----- –•–µ–Ω–¥–ª–µ—Ä—ã -----
@router.message(Command("apply"))
@router.message(F.text == BTN_APPLY)
async def open_apply(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=apply_kb(),
    )


@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def apply_start(message: types.Message, state: FSMContext) -> None:
    await state.set_state(ApplyForm.waiting_text)
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
    )


@router.message(Command("cancel"), StateFilter(ApplyForm.waiting_text))
async def apply_cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.message(StateFilter(ApplyForm.waiting_text))
async def apply_save_text(message: types.Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª—å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ leads (track='leader')
    u = _get_or_create_user(message.from_user)
    with session_scope() as s:
        s.add(Lead(
            user_id=u.id,
            channel="tg",
            contact=_contact_from_tg(message.from_user),
            note=text[:500],
            track="leader",
        ))
        s.commit()

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=main_menu())
