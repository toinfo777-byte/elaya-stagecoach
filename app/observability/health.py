from __future__ import annotations

import asyncio
import logging
import os

import aiohttp


async def _heartbeat_loop() -> None:
    """
    –ü–∏–Ω–≥—É–µ–º Cronitor –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫ (5 –º–∏–Ω).
    –ï—Å–ª–∏ URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º (–±–µ–∑ –æ—à–∏–±–æ–∫).
    """
    url = os.getenv("CRONITOR_URL") or os.getenv("HEALTHCHECKS_URL")
    if not url:
        logging.info("‚ÑπÔ∏è Cronitor heartbeat disabled (no CRONITOR_URL/HEALTHCHECKS_URL)")
        return

    interval = int(os.getenv("HEALTHCHECKS_INTERVAL", "300"))
    timeout = aiohttp.ClientTimeout(total=10)

    async with aiohttp.ClientSession(timeout=timeout) as session:
        while True:
            try:
                async with session.get(url) as resp:
                    logging.info("üíì Cronitor beat: %s", resp.status)
            except Exception as e:
                logging.warning("‚ö†Ô∏è Cronitor heartbeat error: %s", e)
            await asyncio.sleep(interval)


def start_healthcheck():
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫—É –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ event loop.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º task —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–æ–≤/–æ—Ç–ª–∞–¥–∫–∏.
    """
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π‚Äî–µ—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
        loop = asyncio.get_event_loop()

    task = loop.create_task(_heartbeat_loop(), name="cronitor-heartbeat")
    logging.info("‚úÖ Cronitor heartbeat task started")
    return task
