# app/observability/health.py
from __future__ import annotations

import os
import asyncio
import logging

import aiohttp

# URL –ø–∏–Ω–≥–∞ Cronitor/Healthchecks ‚Äî –≤–æ–∑—å–º—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CRONITOR_URL = (os.getenv("HEALTHCHECKS_URL") or "").strip()
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∏–Ω–≥–∞–º–∏ (—Å–µ–∫) ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300
PING_INTERVAL = int((os.getenv("HEALTHCHECK_INTERVAL") or "300").strip() or 300)


async def _ping_once() -> None:
    """
    –û–¥–∏–Ω –ø–∏–Ω–≥ –≤ Cronitor. –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞—Ä—É–∂—É ‚Äî —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º.
    """
    if not CRONITOR_URL:
        logging.warning("‚ö†Ô∏è Cronitor URL is not configured (HEALTHCHECKS_URL is empty).")
        return

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CRONITOR_URL, timeout=10) as resp:
                if resp.status == 200:
                    logging.info("üíì Cronitor heartbeat sent successfully.")
                else:
                    logging.warning(f"‚ö†Ô∏è Cronitor heartbeat failed: HTTP {resp.status}")
    except asyncio.TimeoutError:
        logging.warning("‚ö†Ô∏è Cronitor heartbeat timeout.")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Cronitor heartbeat error: {e}")


async def start_healthcheck() -> None:
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–∏–Ω–≥—É–µ–º CRONITOR_URL –∫–∞–∂–¥—ã–µ PING_INTERVAL —Å–µ–∫—É–Ω–¥.
    –ï—Å–ª–∏ URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ç–∏—Ö–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è.
    """
    if not CRONITOR_URL:
        logging.info("ü©∂ Healthcheck disabled (HEALTHCHECKS_URL is not set).")
        return

    logging.info(f"ü©∫ Healthcheck started: interval={PING_INTERVAL}s")
    while True:
        await _ping_once()
        await asyncio.sleep(PING_INTERVAL)
