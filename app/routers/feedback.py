# app/routers/feedback.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

router = Router(name="feedback2")

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª
class FeedbackStates(StatesGroup):
    wait_phrase = State()

# ==== –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ ====
def kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî•", callback_data="fb:fire"),
            InlineKeyboardButton(text="üëå", callback_data="fb:ok"),
            InlineKeyboardButton(text="üòê", callback_data="fb:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
    ])

# ==== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====
@router.callback_query(F.data.startswith("fb:"))
async def on_feedback_buttons(cq: CallbackQuery, state: FSMContext):
    action = cq.data.split(":", 1)[1]
    if action == "phrase":
        await state.set_state(FeedbackStates.wait_phrase)
        await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        await cq.answer()
        return

    # –ø—Ä–æ—Å—Ç–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∞–∫—Ü–∏–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å –∑–∞–ø–∏—Å—å –≤ –ë–î)
    txt = {"fire": "üî• –û–≥–æ–Ω—å!", "ok": "üëå –ü—Ä–∏–Ω—è—Ç–æ!", "meh": "üòê –û–∫"}[action]
    await cq.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª üëç", show_alert=False)
    # –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–æ–º –≤ —á–∞—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é):
    # await cq.message.answer(txt)

@router.message(FeedbackStates.wait_phrase, F.text)
async def on_feedback_phrase(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()
    if not phrase:
        await msg.answer("–û–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return

    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    # save_phrase(user_id=msg.from_user.id, phrase=phrase)

    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç")

# –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã –ø—Ä–∏–ª–µ—Ç–∏—Ç –∫–æ–º–∞–Ω–¥–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
@router.message(FeedbackStates.wait_phrase, F.text.startswith("/"))
async def on_feedback_phrase_cmd(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–û—Ç–º–µ–Ω–∏–ª. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å.")
