from __future__ import annotations

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.routers.menu import main_menu

router = Router(name="feedback")

# –ù–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ callback_data –≤ —Å—Ç–∞—Ä–æ–º/–Ω–æ–≤–æ–º –∫–æ–¥–µ:
EMOJI_DATAS = {
    "üî•", "üëå", "üòê",
    "fire", "ok", "meh", "like", "neutral", "dislike", "hot",
    "fb_fire", "fb_ok", "fb_meh",
}

PHRASE_DATAS = {"phrase", "fb_phrase", "fb:phrase", "‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞"}

class OnePhrase(StatesGroup):
    awaiting = State()

# ‚Äî‚Äî‚Äî –≠–º–æ–¥–∑–∏-–æ—Ü–µ–Ω–∫–∏ ‚Äî‚Äî‚Äî
@router.callback_query(F.data.in_(EMOJI_DATAS))
async def feedback_emoji(cq: CallbackQuery):
    # –∫–æ—Ä–æ—Ç–∫–∏–π pop-up, —á—Ç–æ–±—ã –Ω–µ –∑–∞—à—É–º–ª—è—Ç—å —á–∞—Ç
    await cq.answer("–ü—Ä–∏–Ω—è–ª. –°–ø–∞—Å–∏–±–æ! üëç", show_alert=False)

# ‚Äî‚Äî‚Äî ¬´1 —Ñ—Ä–∞–∑–∞¬ª ‚Äî‚Äî‚Äî
@router.callback_query(F.data.in_(PHRASE_DATAS))
async def feedback_phrase_start(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await cq.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É –æ–± —ç—Ç–æ–º —ç—Ç—é–¥–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=main_menu()
    )
    await state.set_state(OnePhrase.awaiting)

@router.message(OnePhrase.awaiting, ~F.text.startswith("/"))
async def feedback_phrase_save(m: Message, state: FSMContext):
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –≤ –±–∞–∑—É
    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª ‚úçÔ∏è", reply_markup=main_menu())

@router.message(OnePhrase.awaiting, F.text == "/cancel")
async def feedback_phrase_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û–∫, –±–µ–∑ —Ñ—Ä–∞–∑—ã. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())
