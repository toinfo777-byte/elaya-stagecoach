# app/routers/feedback.py
from __future__ import annotations

from dataclasses import dataclass
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.storage.repo import session_scope, log_event
from app.storage import models as models_module
from app.storage.models import User

router = Router(name="feedback")

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Feedback (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
FeedbackModel = getattr(models_module, "Feedback", None)

# –≠–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —à–ª—é—Ç –∫–∞–∫ ¬´–±—ã—Å—Ç—Ä—É—é –æ—Ü–µ–Ω–∫—É¬ª –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
QUICK_EMOJIS = {"üî•", "üëå", "üòê", "üëç", "üëé", "üôÇ", "üôÅ"}

class FeedbackFlow(StatesGroup):
    waiting_text = State()  # –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞


@dataclass
class FBContext:
    scope: str
    ref_id: str
    rating: Optional[str] = None  # —Å—Ç—Ä–æ–∫–æ–π ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ —Ü–∏—Ñ—Ä—ã, –∏ —ç–º–æ–¥–∑–∏


# ===== –ö–æ–º–∞–Ω–¥–∞ /feedback =====
@router.message(StateFilter("*"), Command("feedback"))
async def start_feedback_cmd(m: Message, state: FSMContext):
    await state.set_state(FeedbackFlow.waiting_text)
    await state.update_data(fb=FBContext(scope="free", ref_id="manual").__dict__)
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ (1‚Äì2 —Ñ—Ä–∞–∑—ã). –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel")


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–û–õ–õ–ë–≠–ö–û–í —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
# –†–∞–Ω—å—à–µ –±—ã–ª–æ —Å—Ç—Ä–æ–≥–æ \d+ ‚Äî —Ä–∞—Å—à–∏—Ä–∏–º –Ω–∞ –ª—é–±–æ–π –Ω–µ-–¥–≤–æ–µ—Ç–æ—á–µ—á–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
# –§–æ—Ä–º–∞—Ç –æ–∂–∏–¥–∞–µ–º —Ç–∞–∫–æ–π: fb:<scope>:<ref_id>:rate:<mark>
@router.callback_query(StateFilter("*"), F.data.regexp(r"^fb:[^:]+:[^:]+:rate:[^:]+$"))
async def fb_rate(cb: CallbackQuery, state: FSMContext):
    try:
        _, scope, ref_id, _, mark = cb.data.split(":")
    except Exception:
        await cb.answer()
        return

    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=cb.from_user.id).first()
        if u:
            # –º–µ—Ç—Ä–∏–∫–∞
            try:
                log_event(s, u.id, "feedback_added", {"scope": scope, "ref_id": ref_id, "rating": mark})
                s.commit()
            except Exception:
                pass

            # –∑–∞–ø–∏—Å—å –≤ Feedback (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å)
            if FeedbackModel is not None:
                try:
                    fb = FeedbackModel(user_id=u.id, scope=scope, ref_id=str(ref_id), rating=mark, text=None)
                    s.add(fb)
                    s.commit()
                except Exception:
                    pass

    await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–º.")
    await cb.answer()


# fb:<scope>:<ref_id>:write ‚Üí –∂–¥—ë–º —Ç–µ–∫—Å—Ç
@router.callback_query(StateFilter("*"), F.data.regexp(r"^fb:[^:]+:[^:]+:write$"))
async def fb_write(cb: CallbackQuery, state: FSMContext):
    try:
        _, scope, ref_id, _ = cb.data.split(":")
    except Exception:
        await cb.answer()
        return

    await state.set_state(FeedbackFlow.waiting_text)
    await state.update_data(fb=FBContext(scope=scope, ref_id=ref_id).__dict__)
    await cb.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ 1‚Äì2 —Ñ—Ä–∞–∑—ã –æ—Ç–∑—ã–≤–æ–º. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel")
    await cb.answer()


# ===== –ü—Ä–∏–Ω–∏–º–∞–µ–º –¢–ï–ö–°–¢ –æ—Ç–∑—ã–≤–∞ =====
@router.message(FeedbackFlow.waiting_text, F.text)
async def fb_text(m: Message, state: FSMContext):
    data = await state.get_data()
    ctx = data.get("fb") or {}
    scope = ctx.get("scope", "free")
    ref_id = ctx.get("ref_id", "manual")
    rating = ctx.get("rating")

    text = (m.text or "").strip()
    if not text:
        await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if u:
            # –º–µ—Ç—Ä–∏–∫–∞
            try:
                log_event(s, u.id, "feedback_added", {"scope": scope, "ref_id": ref_id, "rating": rating, "text": text})
                s.commit()
            except Exception:
                pass

            # –∑–∞–ø–∏—Å—å –≤ Feedback (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—Å—Ç—å)
            if FeedbackModel is not None:
                try:
                    fb = FeedbackModel(user_id=u.id, scope=scope, ref_id=str(ref_id), rating=rating, text=text)
                    s.add(fb)
                    s.commit()
                except Exception:
                    pass

    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üôå")


# ===== –§–æ–ª–±—ç–∫–∏ –ø–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω: –±—ã—Å—Ç—Ä—ã–µ –æ—Ü–µ–Ω–∫–∏ —ç–º–æ–¥–∑–∏ –∏ ¬´‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞¬ª —Ç–µ–∫—Å—Ç–æ–º =====
@router.message(StateFilter("*"), F.text.in_(QUICK_EMOJIS))
async def fb_quick_emoji(m: Message):
    # –∫–æ–≥–¥–∞ —ç–º–æ–¥–∑–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ callback_data
    mark = (m.text or "").strip()
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if u:
            try:
                log_event(s, u.id, "feedback_added", {"scope": "manual", "ref_id": "None", "rating": mark})
                s.commit()
            except Exception:
                pass
    await m.answer("–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@router.message(StateFilter("*"), F.text == "‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞")
async def fb_one_phrase(m: Message, state: FSMContext):
    await state.set_state(FeedbackFlow.waiting_text)
    await state.update_data(fb=FBContext(scope="manual", ref_id="None").__dict__)
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ 1‚Äì2 —Ñ—Ä–∞–∑—ã. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî /cancel")
