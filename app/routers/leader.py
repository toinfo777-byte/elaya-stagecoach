from __future__ import annotations

import os
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb, BTN_APPLY
from app.keyboards.common import menu_btn
from app.storage.repo_extras import save_leader_intent, save_premium_request

router = Router(name="leader")

ADMIN_ALERT_CHAT_ID = int(os.getenv("ADMIN_ALERT_CHAT_ID", "0") or 0)

class LeaderStates(StatesGroup):
    intent = State()
    micro = State()
    premium = State()

def intent_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ì–æ–ª–æ—Å", callback_data="leader:intent:voice")
    kb.button(text="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="leader:intent:public")
    kb.button(text="–°—Ü–µ–Ω–∞", callback_data="leader:intent:stage")
    kb.button(text="–î—Ä—É–≥–æ–µ", callback_data="leader:intent:other")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    kb.adjust(1)
    return kb.as_markup()

def skip_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="leader:skip")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    kb.adjust(1,1)
    return kb.as_markup()

async def _start_leader_core(msg: Message, state: FSMContext):
    await state.set_state(LeaderStates.intent)
    await msg.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ–π –≤–µ–∫—Ç–æ—Ä. 3 —à–∞–≥–∞, 2‚Äì4 –º–∏–Ω—É—Ç—ã.\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ —Å–µ–π—á–∞—Å?",
        reply_markup=intent_kb(),
    )

# —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π/–∫–Ω–æ–ø–æ–∫
async def leader_entry(msg: Message, state: FSMContext):
    await _start_leader_core(msg, state)

@router.message(StateFilter("*"), F.text == BTN_APPLY)
async def start_leader_btn(msg: Message, state: FSMContext):
    await _start_leader_core(msg, state)

@router.message(StateFilter("*"), Command("apply"))
async def start_leader_cmd(msg: Message, state: FSMContext):
    await _start_leader_core(msg, state)

@router.callback_query(StateFilter(LeaderStates.intent), F.data.startswith("leader:intent:"))
async def on_intent(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    intent = cb.data.split(":")[-1]
    await state.update_data(intent=intent)
    await save_leader_intent(cb.from_user.id, intent=intent, micro_note=None)
    await state.set_state(LeaderStates.micro)
    await cb.message.answer("–°–¥–µ–ª–∞–π 1 –∫—Ä—É–≥. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? (–¥–æ 140 —Å–∏–º–≤)", reply_markup=menu_btn())

@router.message(StateFilter(LeaderStates.micro), F.text)
async def on_micro(msg: Message, state: FSMContext):
    note = (msg.text or "")[:140]
    data = await state.get_data()
    await save_leader_intent(msg.from_user.id, intent=data["intent"], micro_note=note, upsert=True)
    await state.set_state(LeaderStates.premium)
    await msg.answer("–û—Å—Ç–∞–≤—å 1 —Ñ—Ä–∞–∑—É –æ —Ü–µ–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç. (–¥–æ 280 —Å–∏–º–≤)", reply_markup=skip_kb())

@router.message(StateFilter(LeaderStates.premium), F.text)
async def on_premium_text(msg: Message, state: FSMContext):
    data = await state.get_data()
    text = (msg.text or "")[:280]
    await save_premium_request(user_id=msg.from_user.id, text=text, source="leader")
    if ADMIN_ALERT_CHAT_ID:
        u = msg.from_user
        alert = (f"‚≠êÔ∏è Premium request\n"
                 f"User: {u.full_name} (@{u.username}) id {u.id}\n"
                 f"Intent: {data.get('intent')}\n"
                 f"Source: leader\n"
                 f"Text: {text}")
        try:
            await msg.bot.send_message(ADMIN_ALERT_CHAT_ID, alert)
        except Exception:
            pass
    await state.clear()
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.", reply_markup=main_menu_kb())

@router.callback_query(
    StateFilter(LeaderStates.intent, LeaderStates.micro, LeaderStates.premium),
    F.data.in_({"leader:skip"})
)
async def on_skip(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await cb.message.answer("–û–∫, –±–µ–∑ –∑–∞—è–≤–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())

# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–∂–µ –µ—Å—Ç—å –≤ routers/common.py (go:menu)
