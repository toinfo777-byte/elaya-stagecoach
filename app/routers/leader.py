# app/routers/leader.py
from __future__ import annotations

import os
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb, BTN_APPLY
from app.keyboards.common import menu_btn
from app.storage.repo_extras import save_leader_intent  # upsert=True –¥–ª—è –∑–∞–º–µ—Ç–∫–∏

router = Router(name="leader")

ADMIN_ALERT_CHAT_ID = int(os.getenv("ADMIN_ALERT_CHAT_ID", "0") or 0)

class LeaderStates(StatesGroup):
    intent = State()
    micro = State()

def intent_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ì–æ–ª–æ—Å", callback_data="leader:intent:voice")
    kb.button(text="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="leader:intent:public")
    kb.button(text="–°—Ü–µ–Ω–∞", callback_data="leader:intent:stage")
    kb.button(text="–î—Ä—É–≥–æ–µ", callback_data="leader:intent:other")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    kb.adjust(1)
    return kb.as_markup()

async def _start_leader_core(msg: Message, state: FSMContext):
    await state.set_state(LeaderStates.intent)
    await msg.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ–π –≤–µ–∫—Ç–æ—Ä. 3 —à–∞–≥–∞, 2‚Äì4 –º–∏–Ω—É—Ç—ã.\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ —Å–µ–π—á–∞—Å?",
        reply_markup=intent_kb(),
    )

# —Å—Ç–∞—Ä—Ç –∏–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
@router.message(StateFilter("*"), F.text == BTN_APPLY)
async def start_leader_btn(msg: Message, state: FSMContext):
    await _start_leader_core(msg, state)

# —Å—Ç–∞—Ä—Ç –ø–æ /apply
@router.message(StateFilter("*"), Command("apply"))
async def start_leader_cmd(msg: Message, state: FSMContext):
    await _start_leader_core(msg, state)

# —Å—Ç–∞—Ä—Ç –∏–∑ inline (help/go:apply)
@router.callback_query(StateFilter("*"), F.data == "go:apply")
async def start_leader_cb(cb: CallbackQuery, state: FSMContext):
    await _start_leader_core(cb.message, state)
    await cb.answer()

@router.callback_query(StateFilter(LeaderStates.intent), F.data.startswith("leader:intent:"))
async def on_intent(cb: CallbackQuery, state: FSMContext):
    intent = cb.data.split(":")[-1]
    await state.update_data(intent=intent)
    # –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å (–±–µ–∑ –∑–∞–º–µ—Ç–∫–∏)
    await save_leader_intent(cb.from_user.id, intent=intent, micro_note=None, upsert=False)
    await state.set_state(LeaderStates.micro)
    await cb.message.answer("–°–¥–µ–ª–∞–π 1 –∫—Ä—É–≥. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? (–¥–æ 140 —Å–∏–º–≤)", reply_markup=menu_btn())
    await cb.answer()

@router.message(StateFilter(LeaderStates.micro))
async def on_micro(msg: Message, state: FSMContext):
    data = await state.get_data()
    note = (msg.text or "").strip()[:140]
    await save_leader_intent(msg.from_user.id, intent=data["intent"], micro_note=note, upsert=True)
    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.", reply_markup=main_menu_kb())
    await state.clear()
