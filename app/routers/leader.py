# app/routers/leader.py
from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

router = Router(name="leader")
log = logging.getLogger("leader")

# --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å fallback ---
try:
    from app.storage.repo_extras import save_leader_intent, save_premium_request  # type: ignore
except Exception as e:
    log.warning("repo_extras missing leader funcs, using fallbacks: %s", e)

    def save_leader_intent(user_id: int, intent: str, meta: dict | None = None) -> None:  # type: ignore
        log.info("[fallback] save_leader_intent(uid=%s, intent=%s, meta=%s)", user_id, intent, meta or {})

    def save_premium_request(
        user_id: int,
        plan: str,
        note: str | None = None,
        meta: dict | None = None,
    ) -> None:  # type: ignore
        log.info("[fallback] save_premium_request(uid=%s, plan=%s, note=%s, meta=%s)", user_id, plan, note, meta or {})


@router.message(Command("leader"))
async def cmd_leader(message: Message):
    await message.reply("üèÅ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –≤—ã–±–µ—Ä–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–º.\n–ù–∞–ø—Ä.: <code>—Ö–æ—á—É –≤ –ø—Ä–µ–º–∏—É–º</code>")

# –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ ¬´–Ω–∞–º–µ—Ä–µ–Ω–∏–µ¬ª
@router.message(F.text)
async def any_text_as_intent(message: Message):
    intent = (message.text or "").strip()
    if not intent:
        return
    save_leader_intent(message.from_user.id, intent, meta={"source": "text"})
    await message.reply("‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")

# –ü—Ä–∏–º–µ—Ä: —Ñ–∏–∫—Å–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@router.message(Command("premium"))
async def cmd_premium(message: Message):
    save_premium_request(message.from_user.id, plan="premium", meta={"source": "command"})
    await message.reply("‚ú® –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
