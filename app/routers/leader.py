# app/routers/leader.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

router = Router(name="leader")

class LeaderState(StatesGroup):
    wait_note = State()

def _kb_topics() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ–ª–æ—Å",                   callback_data="leader:topic:voice")],
        [InlineKeyboardButton(text="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è",   callback_data="leader:topic:public")],
        [InlineKeyboardButton(text="–°—Ü–µ–Ω–∞",                   callback_data="leader:topic:stage")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é",               callback_data="go:menu")],
    ])

async def leader_entry(obj: Message | CallbackQuery):
    text = "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ–π –≤–µ–∫—Ç–æ—Ä. 3 —à–∞–≥–∞, 2‚Äì4 –º–∏–Ω—É—Ç—ã.\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ —Å–µ–π—á–∞—Å?"
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        await obj.message.answer(text, reply_markup=_kb_topics())
    else:
        await obj.answer(text, reply_markup=_kb_topics())

@router.message(Command("apply"))
async def cmd_apply(m: Message):
    await leader_entry(m)

@router.callback_query(StateFilter("*"), F.data.startswith("leader:topic:"))
async def pick_topic(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    intent = cb.data.split(":")[-1]
    await state.update_data(intent=intent)
    await state.set_state(LeaderState.wait_note)
    await cb.message.answer(
        "–°–¥–µ–ª–∞–π 1 –∫—Ä—É–≥ (2‚Äì3 –º–∏–Ω) –ø–æ —Ç–µ–º–µ. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? (–¥–æ 140 —Å–∏–º–≤)\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏."
    )

@router.message(LeaderState.wait_note, F.text.len() > 0)
async def save_note(m: Message, state: FSMContext):
    try:
        from app.storage.repo_extras import log_progress_event
        await log_progress_event(m.from_user.id, kind="leader_path", meta=None)
    except Exception:
        pass
    await state.clear()
    from app.routers.help import show_main_menu
    await m.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
    await show_main_menu(m)
