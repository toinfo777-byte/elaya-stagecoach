from __future__ import annotations

import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from app.storage.repo_extras import save_leader_intent, save_premium_request

# –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è
leader_router = Router(name="leader")
# –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è router)
router = leader_router

# --- –∫–æ–Ω—Ñ–∏–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
ADMIN_ALERT_CHAT_ID = int(os.getenv("ADMIN_ALERT_CHAT_ID", "0") or 0)

# --- FSM ---
class LeaderStates(StatesGroup):
    micro = State()     # –∂–¥—ë–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140)
    premium = State()   # –∂–¥—ë–º 1 —Ñ—Ä–∞–∑—É —Ü–µ–ª–∏ (–¥–æ 280)

# --- UI ---
def _intent_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–æ–ª–æ—Å",                 callback_data="leader:intent:voice")],
        [InlineKeyboardButton(text="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="leader:intent:public")],
        [InlineKeyboardButton(text="–°—Ü–µ–Ω–∞",                 callback_data="leader:intent:stage")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ",                callback_data="leader:intent:other")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é",             callback_data="go:menu")],
    ])

def _skip_or_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="leader:skip")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é",  callback_data="go:menu")],
    ])

# ---------- –ü–£–ë–õ–ò–ß–ù–´–ô –í–•–û–î (–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç entrypoints.py) ----------
async def leader_entry(event: Message | CallbackQuery, state: FSMContext | None = None):
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è Message, –∏ –¥–ª—è CallbackQuery.
    """
    text = "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ–π –≤–µ–∫—Ç–æ—Ä. 3 —à–∞–≥–∞, 2‚Äì4 –º–∏–Ω—É—Ç—ã.\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ —Å–µ–π—á–∞—Å?"
    if isinstance(event, CallbackQuery):
        await event.answer()
        # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ (entrypoints –¥–∞—ë—Ç state)
        if state is not None:
            await state.clear()
        await event.message.answer(text, reply_markup=_intent_kb())
    else:
        if state is not None:
            await state.clear()
        await event.answer(text, reply_markup=_intent_kb())

# ---------- –®–ê–ì 1: –≤—ã–±–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è ----------
@leader_router.callback_query(F.data.startswith("leader:intent:"))
async def _pick_intent(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    intent = cb.data.split(":")[-1]  # voice|public|stage|other
    await state.update_data(intent=intent)

    # –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å (intent –±–µ–∑ –∑–∞–º–µ—Ç–∫–∏)
    try:
        await save_leader_intent(cb.from_user.id, intent=intent, micro_note=None, upsert=False)
    except Exception:
        # –Ω–∞ –æ—à–∏–±–∫–µ –ë–î –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        pass

    # –ø—Ä–æ—Å–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –º–∏–∫—Ä–æ-–∑–∞–º–µ—Ç–∫—É
    await cb.message.answer(
        "–°–¥–µ–ª–∞–π 1 –∫—Ä—É–≥.\n–û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? (–¥–æ 140 —Å–∏–º–≤)",
        reply_markup=_skip_or_menu_kb()
    )
    await state.set_state(LeaderStates.micro)

# ---------- –®–ê–ì 2: –º–∏–∫—Ä–æ-–∑–∞–º–µ—Ç–∫–∞ ----------
@leader_router.message(LeaderStates.micro, F.text)
async def _micro_note(msg: Message, state: FSMContext):
    note = (msg.text or "").strip()[:140]
    data = await state.get_data()
    intent = data.get("intent")

    # –æ–±–Ω–æ–≤–ª—è–µ–º intent —Å –º–∏–∫—Ä–æ-–∑–∞–º–µ—Ç–∫–æ–π
    try:
        await save_leader_intent(msg.from_user.id, intent=intent, micro_note=note, upsert=True)
    except Exception:
        pass

    await msg.answer(
        "–û—Å—Ç–∞–≤—å 1 —Ñ—Ä–∞–∑—É –æ —Ü–µ–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç. (–¥–æ 280 —Å–∏–º–≤)",
        reply_markup=_skip_or_menu_kb()
    )
    await state.set_state(LeaderStates.premium)

# ---------- –®–ê–ì 3: —Ñ—Ä–∞–∑–∞-—Ü–µ–ª—å / –∑–∞—è–≤–∫–∞ ----------
@leader_router.message(LeaderStates.premium, F.text)
async def _premium_request(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()[:280]
    data = await state.get_data()
    intent = data.get("intent")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    try:
        await save_premium_request(user_id=msg.from_user.id, text=text, source="leader")
    except Exception:
        pass

    # —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if ADMIN_ALERT_CHAT_ID:
        u = msg.from_user
        alert = (f"‚≠êÔ∏è Premium request\n"
                 f"User: {u.full_name} (@{u.username}) id {u.id}\n"
                 f"Intent: {intent}\n"
                 f"Source: leader\n"
                 f"Text: {text}")
        try:
            await msg.bot.send_message(ADMIN_ALERT_CHAT_ID, alert)
        except Exception:
            pass

    await _finish_to_menu(msg, state)

# ---------- –ü—Ä–æ–ø—É—Å–∫ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ (skip -> –º–µ–Ω—é) ----------
@leader_router.callback_query(F.data == "leader:skip")
async def _skip_any(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–û–∫")
    await _finish_to_menu(cb.message, state)

# ---------- –û–±—â–∏–π —Ñ–∏–Ω–∏—à ----------
async def _finish_to_menu(target: Message, state: FSMContext):
    await state.clear()
    await target.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.")

    # –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Ö–µ–ª–ø–µ—Ä
    try:
        from app.routers.help import show_main_menu
        await show_main_menu(target)
    except Exception:
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ help –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏–º
        await target.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.")


__all__ = ["leader_router", "router", "leader_entry", "LeaderStates"]
