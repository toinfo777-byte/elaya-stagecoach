from __future__ import annotations

import os
from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.keyboards.reply import main_menu_kb, BTN_APPLY
from app.storage.repo_extras import save_leader_intent, save_premium_request

router = Router(name="leader")

ADMIN_ALERT_CHAT_ID = int(os.getenv("ADMIN_ALERT_CHAT_ID", "0"))

class LeaderStates(StatesGroup):
    intent = State()
    micro = State()     # –∂–¥—ë–º —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ
    premium = State()

INTENT_INSTR = {
    "voice": (
        "–ì–û–õ–û–° ¬∑ 2‚Äì4 –º–∏–Ω\n"
        "‚Ä¢ 30c ‚Äî –¥—ã—Ö–∞–Ω–∏–µ ¬´–≤–Ω–∏–∑¬ª, 2 —Ü–∏–∫–ª–∞.\n"
        "‚Ä¢ 60‚Äì90c ‚Äî ¬´–º-–Ω-–∑¬ª + —Ñ—Ä–∞–∑–∞ –¥–Ω—è —Å 2‚Äì3 —Å–º—ã—Å–ª–æ–≤—ã–º–∏ –ø–∞—É–∑–∞–º–∏.\n"
        "‚Ä¢ 15c ‚Äî –æ—Ç–º–µ—Ç—å 1 –æ—â—É—â–µ–Ω–∏–µ –∏ —Ü–µ–ª—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å."
    ),
    "public": (
        "–ü–£–ë–õ–ò–ß–ù–´–ï ¬∑ 2‚Äì4 –º–∏–Ω\n"
        "‚Ä¢ 30c ‚Äî –≤—ã–≥–æ–¥–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.\n"
        "‚Ä¢ 60‚Äì90c ‚Äî —Ç–µ–∑–∏—Å ‚Üí –ø—Ä–∏–º–µ—Ä ‚Üí –≤—ã–≤–æ–¥.\n"
        "‚Ä¢ 15c ‚Äî 1 —Å–ª–æ–≤–æ-–∏—Ç–æ–≥ + –≥–¥–µ —Å—Ç–∞–≤–∏–ª –ø–∞—É–∑—ã."
    ),
    "stage": (
        "–°–¶–ï–ù–ê ¬∑ 2‚Äì4 –º–∏–Ω\n"
        "‚Ä¢ 30c ‚Äî —Å—Ç–æ–π–∫–∞: —Å—Ç–æ–ø—ã, –∫–æ–ª–µ–Ω–∏ –º—è–≥–∫–∏–µ, —Ü–µ–Ω—Ç—Ä –≤–Ω–∏–∑—É.\n"
        "‚Ä¢ 60‚Äì90c ‚Äî ¬´–º–∞—Ä—à—Ä—É—Ç¬ª (3 —Ç–æ—á–∫–∏) + —Ç–µ–∫—Å—Ç, –ø–∞—É–∑—ã –≤ —Ç–æ—á–∫–∞—Ö.\n"
        "‚Ä¢ 15c ‚Äî 1 —Å–ª–æ–≤–æ-–∏—Ç–æ–≥ –ø—Ä–æ —Ç–µ–ª–æ/–≤–∑–≥–ª—è–¥/—ç–Ω–µ—Ä–≥–∏—é."
    ),
    "other": (
        "–î–†–£–ì–û–ï ¬∑ 2‚Äì4 –º–∏–Ω\n"
        "‚Ä¢ –í–æ–∑—å–º–∏ –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–≥–æ–≤–æ—Ä–∏ —Ç–µ–∑–∏—Å ‚Üí –º–∏–Ω–∏-–ø—Ä–∏–º–µ—Ä ‚Üí –≤—ã–≤–æ–¥.\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –∫—Ä—É–≥–∞."
    ),
}

def _intent_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ì–æ–ª–æ—Å", callback_data="leader:intent:voice")
    kb.button(text="–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", callback_data="leader:intent:public")
    kb.button(text="–°—Ü–µ–Ω–∞", callback_data="leader:intent:stage")
    kb.button(text="–î—Ä—É–≥–æ–µ", callback_data="leader:intent:other")
    kb.adjust(1)
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    return kb.as_markup()

def _ready_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ì–æ—Ç–æ–≤–æ", callback_data="leader:ready")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    return kb.as_markup()

async def _entry_core(msg: Message, state: FSMContext):
    await state.set_state(LeaderStates.intent)
    await msg.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ç–≤–æ–π –≤–µ–∫—Ç–æ—Ä. 3 —à–∞–≥–∞, 2‚Äì4 –º–∏–Ω—É—Ç—ã.\n–ß—Ç–æ –≤–∞–∂–Ω–µ–µ —Å–µ–π—á–∞—Å?",
        reply_markup=_intent_kb(),
    )

@router.message(StateFilter("*"), F.text == BTN_APPLY)
@router.message(StateFilter("*"), Command("apply"))
async def start_leader(msg: Message, state: FSMContext):
    await _entry_core(msg, state)

@router.callback_query(StateFilter(LeaderStates.intent), F.data.startswith("leader:intent:"))
async def on_intent(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    intent = cb.data.split(":")[-1]
    await state.update_data(intent=intent)
    # –ø–µ—Ä–≤–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
    try:
        await save_leader_intent(cb.from_user.id, intent=intent, micro_note=None)
    except Exception:
        pass

    await cb.message.answer(INTENT_INSTR.get(intent, INTENT_INSTR["other"]), reply_markup=_ready_kb())

@router.callback_query(StateFilter("*"), F.data == "leader:ready")
async def leader_ready(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(LeaderStates.micro)
    await cb.message.answer("–°–¥–µ–ª–∞–π –∫—Ä—É–≥. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å? (–¥–æ 140 —Å–∏–º–≤)")

@router.message(StateFilter(LeaderStates.micro), F.text)
async def on_micro(msg: Message, state: FSMContext):
    note = (msg.text or "")[:140]
    data = await state.get_data()
    intent = data.get("intent", "other")
    try:
        await save_leader_intent(msg.from_user.id, intent=intent, micro_note=note, upsert=True)
    except Exception:
        pass

    await state.set_state(LeaderStates.premium)
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="premium:leave")
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="premium:skip")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    kb.adjust(2, 1)
    await msg.answer(
        "–•–æ—á–µ—à—å –≤ ‚≠êÔ∏è–†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é? –ù–∞–ø–∏—à–∏ 1 —Ñ—Ä–∞–∑—É –æ —Ü–µ–ª–∏ (–¥–æ 280 —Å–∏–º–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=kb.as_markup()
    )

@router.callback_query(StateFilter(LeaderStates.premium), F.data == "premium:skip")
async def premium_skip(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await cb.message.answer("–û–∫, –±–µ–∑ –∑–∞—è–≤–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.callback_query(StateFilter(LeaderStates.premium), F.data == "premium:leave")
async def premium_leave(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer("–ù–∞–ø–∏—à–∏ 1 —Ñ—Ä–∞–∑—É –æ —Å–µ–±–µ/–∑–∞–¥–∞—á–µ (–¥–æ 280 —Å–∏–º–≤).")

@router.message(StateFilter(LeaderStates.premium), F.text)
async def premium_text(msg: Message, state: FSMContext):
    text = (msg.text or "")[:280]
    data = await state.get_data()
    try:
        await save_premium_request(user_id=msg.from_user.id, text=text, source="leader")
    except Exception:
        pass

    # –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if ADMIN_ALERT_CHAT_ID:
        u = msg.from_user
        alert = (f"‚≠êÔ∏è Premium request\n"
                 f"User: {u.full_name} (@{u.username}) id {u.id}\n"
                 f"Intent: {data.get('intent','n/a')}\n"
                 f"Source: leader\n"
                 f"Text: {text}")
        try:
            await msg.bot.send_message(ADMIN_ALERT_CHAT_ID, alert)
        except Exception:
            pass

    await state.clear()
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.", reply_markup=main_menu_kb())
