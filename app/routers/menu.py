# app/routers/menu.py
from __future__ import annotations

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.storage.repo import session_scope
from app.storage.models import User, DrillRun

# –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç—ã –ø—Ä—è–º–æ –∏–∑ system.py
from app.routers.system import PRIVACY_TEXT, HELP_TEXT

# ¬´–≤—Ö–æ–¥—ã¬ª —Ñ–∏—á
from app.routers.training import training_entry
from app.routers.casting import casting_entry

router = Router(name="menu")

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å coach._MENU_TEXTS)
BTN_TRAIN = "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"
BTN_PROGRESS = "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
BTN_APPLY = "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"
BTN_CASTING = "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"
BTN_PRIVACY = "üîê –ü–æ–ª–∏—Ç–∏–∫–∞"
BTN_HELP = "üí¨ –ü–æ–º–æ—â—å"

def main_menu() -> ReplyKeyboardMarkup:
    # —à–∏—Ä–æ–∫–∞—è –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ + –¥–≤–µ ¬´—É–∑–∫–∏–µ¬ª –Ω–∏–∂–µ
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text=BTN_TRAIN), KeyboardButton(text=BTN_PROGRESS)],
            [KeyboardButton(text=BTN_APPLY)],
            [KeyboardButton(text=BTN_CASTING)],
            [KeyboardButton(text=BTN_PRIVACY), KeyboardButton(text=BTN_HELP)],
        ],
    )

# ===== /menu =====
@router.message(Command("menu"))
async def open_menu(m: Message):
    await m.answer("–ì–æ—Ç–æ–≤–æ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é.", reply_markup=main_menu())


# ===== –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è =====
@router.message(F.text == BTN_TRAIN)
async def menu_training(m: Message):
    # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º ¬´–≤—Ö–æ–¥¬ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    from aiogram.fsm.context import FSMContext  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –ª–∏—à–Ω–µ–µ
    state = FSMContext(storage=m.bot.dispatcher.storage, chat=m.chat, user=m.from_user)
    await training_entry(m, state)


# ===== –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ =====
@router.message(F.text == BTN_CASTING)
async def menu_casting(m: Message):
    from aiogram.fsm.context import FSMContext
    state = FSMContext(storage=m.bot.dispatcher.storage, chat=m.chat, user=m.from_user)
    await casting_entry(m, state)


# ===== –ü–æ–ª–∏—Ç–∏–∫–∞ =====
@router.message(F.text == BTN_PRIVACY)
async def menu_privacy(m: Message):
    await m.answer(PRIVACY_TEXT)


# ===== –ü–æ–º–æ—â—å =====
@router.message(F.text == BTN_HELP)
async def menu_help(m: Message):
    await m.answer(HELP_TEXT)


# ===== –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤) =====
@router.message(F.text == BTN_PROGRESS)
async def menu_progress(m: Message):
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:
    - —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users)
    - —Å–∫–æ–ª—å–∫–æ —ç—Ç—é–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–ø–æ DrillRun)
    """
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ /start, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –≤ ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.", reply_markup=main_menu())
            return

        # —Å—Ç—Ä–∏–∫
        streak = u.streak or 0

        # —ç—Ç—é–¥—ã –∑–∞ 7 –¥–Ω–µ–π
        since = datetime.utcnow() - timedelta(days=7)
        runs_7d = (
            s.query(DrillRun)
            .filter(DrillRun.user_id == u.id, DrillRun.created_at >= since)
            .count()
        )

    txt = (
        "üìà *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
        f"‚Ä¢ –°—Ç—Ä–∏–∫: *{streak}*\n"
        f"‚Ä¢ –≠—Ç—é–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: *{runs_7d}*\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá"
    )
    await m.answer(txt, reply_markup=main_menu(), parse_mode="Markdown")
