from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ä–æ—É—Ç–µ—Ä ‚Äî –ò–ú–ï–ù–ù–û –¢–ê–ö, —á—Ç–æ–±—ã main —Å–º–æ–≥: from app.routers.menu import router
router = Router(name="menu")

# ===== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–µ–π –∫–Ω–æ–ø–æ–∫ (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∞–≤–¥—ã) =====
BTN_TRAIN      = "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"
BTN_PROGRESS   = "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
BTN_CASTING    = "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"
BTN_LEADER     = "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"
BTN_POLICY     = "üîê –ü–æ–ª–∏—Ç–∏–∫–∞"
BTN_HELP       = "üí¨ –ü–æ–º–æ—â—å"
BTN_SETTINGS   = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
BTN_PREMIUM    = "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
BTN_DELETE     = "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
BTN_MENU       = "–ú–µ–Ω—é"

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é =====
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_TRAIN),   KeyboardButton(text=BTN_PROGRESS)],
            [KeyboardButton(text=BTN_LEADER),  KeyboardButton(text=BTN_CASTING)],
            [KeyboardButton(text=BTN_POLICY),  KeyboardButton(text=BTN_HELP)],
            [KeyboardButton(text=BTN_SETTINGS), KeyboardButton(text=BTN_PREMIUM)],
            [KeyboardButton(text=BTN_DELETE)],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é‚Ä¶",
    )

# ===== –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é (/menu –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ú–µ–Ω—é¬ª) =====
@router.message(Command("menu"))
@router.message(F.text == BTN_MENU)
async def open_menu(m: Message):
    await m.answer("–ú–µ–Ω—é:", reply_markup=main_menu())

# ===== –§–æ–ª–±—ç–∫ –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ ¬´–Ω–∏—á–µ–π–Ω–æ–º¬ª —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é =====
@router.message(StateFilter(None), F.text)
async def any_text_to_menu(m: Message):
    # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã: –∏—Ö –ø–æ–π–º–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ Command(...)
    if m.text and m.text.startswith("/"):
        return
    await m.answer("–ì–æ—Ç–æ–≤–æ. –í–æ—Ç –º–µ–Ω—é:", reply_markup=main_menu())
