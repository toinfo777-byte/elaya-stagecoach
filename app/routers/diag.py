# app/routers/diag.py
from __future__ import annotations

import hashlib
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from app.build import BUILD_MARK
from app.config import settings

router = Router(name="diag")

def _panic_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"), KeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),   KeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")],
            [KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å / FAQ"),   KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞"),       KeyboardButton(text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")],
        ],
        resize_keyboard=True,
        is_persistent=True,
        input_field_placeholder="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –∫–Ω–æ–ø–∫–∏ –∂–∏–≤—ã–µ",
    )

@router.message(Command("build"))
async def cmd_build(m: Message):
    await m.answer(f"üß± BUILD: <code>{BUILD_MARK}</code>")

@router.message(Command("who"))
async def cmd_who(m: Message):
    me = await m.bot.get_me()
    token_hash = hashlib.md5(settings.bot_token.encode()).hexdigest()[:8]
    await m.answer(
        "ü§ñ <b>–ë–æ—Ç</b>\n"
        f"‚Ä¢ username: @{me.username}\n"
        f"‚Ä¢ id: <code>{me.id}</code>\n"
        f"‚Ä¢ token-hash: <code>{token_hash}</code>"
    )

@router.message(Command("webhook"))
async def cmd_webhook(m: Message):
    info = await m.bot.get_webhook_info()
    # —É aiogram v3 —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å .url, .has_custom_certificate, .pending_update_count, .ip_address, .allowed_updates
    await m.answer(
        "üï∏ <b>Webhook</b>\n"
        f"‚Ä¢ url: <code>{getattr(info, 'url', '')}</code>\n"
        f"‚Ä¢ pending: <code>{getattr(info, 'pending_update_count', 0)}</code>\n"
        f"‚Ä¢ ip: <code>{getattr(info, 'ip_address', '')}</code>\n"
        f"‚Ä¢ allowed: <code>{','.join(getattr(info, 'allowed_updates', []) or [])}</code>"
    )

@router.message(Command("panicmenu"))
async def cmd_panicmenu(m: Message):
    await m.answer("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é (reply-–∫–ª–∞–≤–∞):", reply_markup=_panic_kb())

@router.message(Command("panicoff"))
async def cmd_panicoff(m: Message):
    await m.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞", reply_markup=ReplyKeyboardRemove())

@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üü¢")

@router.message(Command("logout"))
async def cmd_logout(m: Message):
    # ‚ö†Ô∏è –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—É—â–∞—è long-polling —Å–µ—Å—Å–∏—è –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è —Å —Å—Ç–æ—Ä–æ–Ω—ã Telegram.
    try:
        await m.bot.log_out()
        await m.answer("‚Ü™Ô∏è logOut –≤—ã–ø–æ–ª–Ω–µ–Ω (—Å—Ç–∞—Ä—ã–µ long-polling-—Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã). –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å.")
    except Exception as e:
        await m.answer(f"‚ùó logOut –æ—à–∏–±–∫–∞: <code>{e}</code>")
