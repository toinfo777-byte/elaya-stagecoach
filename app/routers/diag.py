from aiogram import Router, F
from aiogram.types import Message
import sentry_sdk

router = Router(name="diag")

# ... —Ç–≤–æ–∏ /ping, /sentry_ping, /boom –æ—Å—Ç–∞—é—Ç—Å—è ...

@router.message(F.text.in_({"/sentry_status", "sentry_status"}))
async def cmd_sentry_status(msg: Message):
    hub = sentry_sdk.Hub.current
    client = getattr(hub, "client", None)
    if not client:
        await msg.answer("‚ö†Ô∏è Sentry: –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    opts = getattr(client, "options", {}) or {}
    dsn = str(opts.get("dsn") or "")
    env = opts.get("environment")
    rel = opts.get("release")
    await msg.answer(
        "üß≠ Sentry —Å—Ç–∞—Ç—É—Å:\n"
        f"‚Ä¢ initialized: ‚úÖ\n"
        f"‚Ä¢ env: {env}\n"
        f"‚Ä¢ release: {rel}\n"
        f"‚Ä¢ dsn set: {'yes' if dsn else 'no'}"
    )

@router.message(F.text.in_({"/sentry_force", "sentry_force"}))
async def cmd_sentry_force(msg: Message):
    try:
        sentry_sdk.capture_message("üß™ forced test message (manual)")
        sentry_sdk.flush(timeout=5.0)  # –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª –∏ —Ñ–ª—ç—à–Ω—É–ª —Å–æ–±—ã—Ç–∏–µ –≤ Sentry")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/flush: {e}")
