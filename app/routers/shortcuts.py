# app/routers/shortcuts.py
from __future__ import annotations

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from sqlalchemy import inspect as sqla_inspect
from sqlalchemy.sql.sqltypes import DateTime, Date

from app.routers.system import PRIVACY_TEXT, HELP_TEXT
from app.routers.training import training_entry
from app.routers.casting import casting_entry
from app.storage.repo import session_scope
from app.storage.models import User, DrillRun
from app.bot.states import ApplyStates
from app.routers.menu import (
    BTN_TRAIN,
    BTN_PROGRESS,
    BTN_APPLY,
    BTN_CASTING,
    BTN_PRIVACY,
    BTN_HELP,
    main_menu,
)

router = Router(name="shortcuts")


# ===== –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –õ–Æ–ë–û–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏ =====
@router.message(StateFilter("*"), Command("help"))
async def sc_help_cmd(m: Message):
    await m.answer(HELP_TEXT)


@router.message(StateFilter("*"), Command("privacy"))
async def sc_privacy_cmd(m: Message):
    await m.answer(PRIVACY_TEXT)


@router.message(StateFilter("*"), Command("progress"))
async def sc_progress_cmd(m: Message):
    await _send_progress(m)


# üîß –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–≤–∏–º /training –∏ /casting –µ—â—ë –î–û –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
@router.message(StateFilter("*"), Command("training"))
async def sc_training_cmd(m: Message, state: FSMContext):
    await training_entry(m, state)


@router.message(StateFilter("*"), Command("casting"))
async def sc_casting_cmd(m: Message, state: FSMContext):
    await casting_entry(m, state)


# üîß –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ apply.py)
@router.message(StateFilter("*"), Command("apply"))
async def sc_apply_cmd(m: Message, state: FSMContext):
    await state.set_state(ApplyStates.wait_text)
    await m.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )


# ===== –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ =====
@router.message(StateFilter("*"), F.text == BTN_TRAIN)
async def sc_training_btn(m: Message, state: FSMContext):
    await training_entry(m, state)


@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def sc_casting_btn(m: Message, state: FSMContext):
    await casting_entry(m, state)


@router.message(StateFilter("*"), F.text == BTN_APPLY)
async def sc_apply_btn(m: Message, state: FSMContext):
    await state.set_state(ApplyStates.wait_text)
    await m.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )


@router.message(StateFilter("*"), F.text == BTN_PRIVACY)
async def sc_privacy_text(m: Message):
    await m.answer(PRIVACY_TEXT)


@router.message(StateFilter("*"), F.text == BTN_HELP)
async def sc_help_text(m: Message):
    await m.answer(HELP_TEXT)


@router.message(StateFilter("*"), F.text == BTN_PROGRESS)
async def sc_progress_text_exact(m: Message):
    await _send_progress(m)


# ¬´—Ñ–∞–∑–∑–∏¬ª –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –∏–Ω—ã—Ö —ç–º–æ–¥–∑–∏/–ø—Ä–æ–±–µ–ª–æ–≤)
@router.message(
    StateFilter("*"),
    lambda m: isinstance(m.text, str) and "–ø—Ä–æ–≥—Ä–µ—Å—Å" in m.text.lower(),
)
async def sc_progress_text_fuzzy(m: Message):
    await _send_progress(m)


@router.message(
    StateFilter("*"),
    lambda m: isinstance(m.text, str) and "—Ç—Ä–µ–Ω–∏—Ä–æ–≤" in m.text.lower(),
)
async def sc_training_text_fuzzy(m: Message, state: FSMContext):
    await training_entry(m, state)


@router.message(
    StateFilter("*"),
    lambda m: isinstance(m.text, str) and "–∫–∞—Å—Ç–∏–Ω–≥" in m.text.lower(),
)
async def sc_casting_text_fuzzy(m: Message, state: FSMContext):
    await casting_entry(m, state)


# ===== –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª =====
async def _send_progress(m: Message):
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer(
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ /start, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –≤ ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.",
                reply_markup=main_menu(),
            )
            return

        streak = u.streak or 0
        q = s.query(DrillRun).filter(DrillRun.user_id == u.id)

        mapper = sqla_inspect(DrillRun)
        dt_col = next(
            (c for c in mapper.columns if isinstance(c.type, (DateTime, Date))), None
        )

        if dt_col is not None:
            since = datetime.utcnow() - timedelta(days=7)
            runs_7d = q.filter(dt_col >= since).count()
        else:
            runs_7d = q.count()

        # ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª –∏–∑ meta_json (–µ—Å–ª–∏ –µ—Å—Ç—å)
        src_txt = ""
        try:
            meta = dict(u.meta_json or {}) if hasattr(u, "meta_json") else {}
            sources = meta.get("sources", {})
            first_src = sources.get("first_source")
            last_src = sources.get("last_source")
            if first_src or last_src:
                if first_src and last_src and first_src != last_src:
                    src_txt = f"\n‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {first_src} ‚Üí {last_src}"
                elif last_src:
                    src_txt = f"\n‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {last_src}"
        except Exception:
            pass

    txt = (
        "üìà <b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        f"‚Ä¢ –°—Ç—Ä–∏–∫: <b>{streak}</b>\n"
        f"‚Ä¢ –≠—Ç—é–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: <b>{runs_7d}</b>"
        f"{src_txt}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá"
    )
    await m.answer(txt, reply_markup=main_menu())
