# app/routers/shortcuts.py
from __future__ import annotations

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.routers.system import PRIVACY_TEXT, HELP_TEXT
from app.routers.training import training_entry
from app.routers.casting import casting_entry
from app.storage.repo import session_scope
from app.storage.models import User, DrillRun

# ‚ö†Ô∏è –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç—ã –ø—Ä—è–º–æ –∏–∑ menu.py, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞
from app.routers.menu import (
    BTN_TRAIN,
    BTN_PROGRESS,
    BTN_APPLY,         # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–ª –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏
    BTN_CASTING,
    BTN_PRIVACY,
    BTN_HELP,
    main_menu,         # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ _send_progress
)

router = Router(name="shortcuts")

# ===== –ö–æ–º–∞–Ω–¥—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (—Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –î–û –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞) =====
@router.message(StateFilter("*"), Command("help"))
async def sc_help_cmd(m: Message):
    await m.answer(HELP_TEXT)

@router.message(StateFilter("*"), Command("privacy"))
async def sc_privacy_cmd(m: Message):
    await m.answer(PRIVACY_TEXT)

@router.message(StateFilter("*"), Command("progress"))
async def sc_progress_cmd(m: Message):
    await _send_progress(m)

# ===== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ =====
@router.message(StateFilter("*"), F.text == BTN_TRAIN)
async def sc_training(m: Message, state: FSMContext):
    await training_entry(m, state)

@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def sc_casting(m: Message, state: FSMContext):
    await casting_entry(m, state)

@router.message(StateFilter("*"), F.text == BTN_PRIVACY)
async def sc_privacy_text(m: Message):
    await m.answer(PRIVACY_TEXT)

@router.message(StateFilter("*"), F.text == BTN_HELP)
async def sc_help_text(m: Message):
    await m.answer(HELP_TEXT)

# ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—á–Ω—ã–π –º–∞—Ç—á
@router.message(StateFilter("*"), F.text == BTN_PROGRESS)
async def sc_progress_text_exact(m: Message):
    await _send_progress(m)

# ‚Äî ¬´—Ñ–∞–∑–∑–∏¬ª –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –¥—Ä—É–≥–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞/—ç–º–æ–¥–∑–∏/–ø—Ä–æ–±–µ–ª—ã)
@router.message(StateFilter("*"), lambda m: isinstance(m.text, str) and "–ø—Ä–æ–≥—Ä–µ—Å—Å" in m.text.lower())
async def sc_progress_text_fuzzy(m: Message):
    await _send_progress(m)

# ===== –†–µ–∞–ª–∏–∑–∞—Ü–∏—è ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª =====
async def _send_progress(m: Message):
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ /start, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –≤ ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.", reply_markup=main_menu())
            return

        streak = u.streak or 0
        since = datetime.utcnow() - timedelta(days=7)
        runs_7d = (
            s.query(DrillRun)
            .filter(DrillRun.user_id == u.id, DrillRun.created_at >= since)
            .count()
        )

    txt = (
        "üìà *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
        f"‚Ä¢ –°—Ç—Ä–∏–∫: *{streak}*\n"
        f"‚Ä¢ –≠—Ç—é–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: *{runs_7d}*\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá"
    )
    await m.answer(txt, reply_markup=main_menu(), parse_mode="Markdown")
