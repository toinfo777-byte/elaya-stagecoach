# app/routers/casting.py
from __future__ import annotations

import re
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.keyboards.menu import main_menu, BTN_CASTING, BTN_APPLY
from app.keyboards.inline import casting_skip_kb
from app.utils.admin import notify_admin
from app.storage.repo import save_casting

router = Router(name="casting")


class ApplyForm(StatesGroup):
    name = State()
    age = State()
    city = State()
    experience = State()
    contact = State()
    portfolio = State()


def _looks_like_url(text: str) -> bool:
    return bool(re.match(r"^https?://", text.strip(), re.I))


# ==== –°–¢–ê–†–¢ ====
@router.message(Command("casting"), StateFilter(None))
@router.message(F.text.in_({BTN_CASTING, BTN_APPLY}), StateFilter(None))
async def start_casting(m: Message, state: FSMContext):
    await state.set_state(ApplyForm.name)
    await m.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?\n<i>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è</i>")


# ==== –í–û–ü–†–û–°–´ ====
@router.message(StateFilter(ApplyForm.name))
async def q_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(ApplyForm.age)
    await m.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@router.message(StateFilter(ApplyForm.age))
async def q_age(m: Message, state: FSMContext):
    try:
        age = int(m.text.strip())
        if not (10 <= age <= 99):
            raise ValueError
    except Exception:
        await m.answer("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 10‚Äì99. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    await state.update_data(age=age)
    await state.set_state(ApplyForm.city)
    await m.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")


@router.message(StateFilter(ApplyForm.city))
async def q_city(m: Message, state: FSMContext):
    await state.update_data(city=m.text.strip())
    await state.set_state(ApplyForm.experience)
    await m.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç?\n‚Äì –Ω–µ—Ç\n‚Äì 1‚Äì2 –≥–æ–¥–∞\n‚Äì 3+ –ª–µ—Ç")


@router.message(StateFilter(ApplyForm.experience))
async def q_exp(m: Message, state: FSMContext):
    await state.update_data(experience=m.text.strip())
    await state.set_state(ApplyForm.contact)
    await m.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n@username / —Ç–µ–ª–µ—Ñ–æ–Ω / email")


@router.message(StateFilter(ApplyForm.contact))
async def q_contact(m: Message, state: FSMContext):
    await state.update_data(contact=m.text.strip())
    await state.set_state(ApplyForm.portfolio)
    await m.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)", reply_markup=casting_skip_kb())


# ==== –ü–û–†–¢–§–û–õ–ò–û (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ====
@router.callback_query(F.data == "casting:skip_portfolio", StateFilter(ApplyForm.portfolio))
async def skip_portfolio(c: CallbackQuery, state: FSMContext):
    await state.update_data(portfolio=None)
    await _finish(c.message, state)
    await c.answer()


@router.message(StateFilter(ApplyForm.portfolio))
async def q_portfolio(m: Message, state: FSMContext):
    text = (m.text or "").strip()
    portfolio = text if _looks_like_url(text) else None
    await state.update_data(portfolio=portfolio)
    await _finish(m, state)


# ==== –§–ò–ù–ò–® ====
async def _finish(m: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_casting(
        tg_id=m.from_user.id,
        name=str(data.get("name", "")),
        age=int(data.get("age", 0) or 0),
        city=str(data.get("city", "")),
        experience=str(data.get("experience", "")),
        contact=str(data.get("contact", "")),
        portfolio=data.get("portfolio"),
        agree_contact=True,
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    summary = (
        "üé≠ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–∫–∞—Å—Ç–∏–Ω–≥ / –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞)\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–û–ø—ã—Ç: {data.get('experience')}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact')}\n"
        f"–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {data.get('portfolio') or '‚Äî'}\n"
        f"–û—Ç: @{m.from_user.username or m.from_user.id}"
    )
    await notify_admin(summary, m.bot)

    await m.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –¥–Ω–µ–π.", reply_markup=main_menu())


# ==== –§–û–†–°–ò–†–û–í–ê–ù–ù–´–ô –í–´–•–û–î ====
@router.message(Command("menu"))
async def force_menu(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–ú–µ–Ω—é", reply_markup=main_menu())
