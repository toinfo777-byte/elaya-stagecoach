from __future__ import annotations

import json
from typing import List, Dict, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.config import settings
from app.keyboards.menu import main_menu, BTN_CASTING
from app.storage.mvp_repo import save_casting_application

router = Router(name="casting")

# –í–æ–ø—Ä–æ—Å—ã MVP (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –ø–æ–¥–º–µ–Ω–∏—Ç—å –Ω–∞ YAML)
QUESTIONS: List[Dict[str, Any]] = [
    {"key": "name",       "label": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",         "type": "text",   "required": True,  "hint": "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è"},
    {"key": "age",        "label": "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",       "type": "number", "required": True,  "min": 10, "max": 99},
    {"key": "city",       "label": "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",    "type": "text",   "required": True},
    {"key": "experience", "label": "–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç?",      "type": "choice", "required": True,  "options": ["–Ω–µ—Ç", "1‚Äì2 –≥–æ–¥–∞", "3+ –ª–µ—Ç"]},
    {"key": "contact",    "label": "–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏",       "type": "text",   "required": True,  "hint": "@username / —Ç–µ–ª–µ—Ñ–æ–Ω / email"},
    {"key": "portfolio",  "label": "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)", "type": "url", "required": False},
]

def kb_choices(options: List[str]) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=o)] for o in options],
        resize_keyboard=True
    )

class CastingSG(StatesGroup):
    q = State()


@router.message(F.text == BTN_CASTING)
@router.message(Command("casting"))
async def casting_entry(m: Message, state: FSMContext) -> None:
    await state.clear()
    await state.update_data(idx=0, answers={})
    await ask_next(m, state)


@router.message(Command("apply"))
async def apply_entry(m: Message, state: FSMContext) -> None:
    # –ü–æ –¢–ó: ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª –º–æ–∂–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥ ‚Äî —Ç–∞–∫ –∏ —Å–¥–µ–ª–∞–µ–º –≤ MVP
    await casting_entry(m, state)


async def ask_next(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    idx = int(data.get("idx", 0))
    if idx >= len(QUESTIONS):
        await finish_form(m, state)
        return

    q = QUESTIONS[idx]
    hint = f"\n<i>{q.get('hint','')}</i>" if q.get("hint") else ""

    # –ï—Å–ª–∏ choice ‚Äî –¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    if q["type"] == "choice":
        await m.answer(f"{q['label']}{hint}", reply_markup=kb_choices(q["options"]))
    else:
        await m.answer(f"{q['label']}{hint}")

    await state.set_state(CastingSG.q)


@router.message(CastingSG.q)
async def collect_answer(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    idx = int(data.get("idx", 0))
    answers = dict(data.get("answers", {}))
    q = QUESTIONS[idx]

    text = (m.text or "").strip()

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if q["type"] == "number":
        if not text.isdigit():
            await m.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        val = int(text)
        if ("min" in q and val < q["min"]) or ("max" in q and val > q["max"]):
            await m.reply(f"–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {q.get('min','?')}‚Äì{q.get('max','?')}.")
            return
        answers[q["key"]] = val
    elif q["type"] == "url":
        if text and not (text.startswith("http://") or text.startswith("https://")):
            await m.reply("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É (http/https) –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        answers[q["key"]] = text
    elif q["type"] == "choice":
        opts = set(q["options"])
        if text not in opts:
            await m.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
            return
        answers[q["key"]] = text
    else:
        if q.get("required") and not text:
            await m.reply("–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
            return
        answers[q["key"]] = text

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    idx += 1
    await state.update_data(idx=idx, answers=answers)
    await ask_next(m, state)


async def finish_form(m: Message, state: FSMContext) -> None:
    data = await state.get_data()
    answers = data.get("answers", {})
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –ë–î
    app_id = save_casting_application(m.from_user.id, json.dumps(answers, ensure_ascii=False))

    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if settings.admin_alert_chat_id:
        lines = [
            "üé¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥)</b>",
            f"‚Ä¢ ID: {app_id}",
            f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{m.from_user.username or '‚Äî'} (id {m.from_user.id})",
        ]
        for q in QUESTIONS:
            k, label = q["key"], q["label"]
            v = answers.get(k, "‚Äî")
            lines.append(f"‚Ä¢ {label}: {v}")
        await m.bot.send_message(settings.admin_alert_chat_id, "\n".join(lines))

    await m.answer(
        "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –¥–Ω–µ–π. üåü",
        reply_markup=main_menu()
    )
