# app/routers/feedback_any.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates

router = Router(name="feedback_any")


# === (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –∫–æ–º–∞–Ω–¥–µ =========================
def _ratings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üî•", callback_data="fb:rate:hot"),
                InlineKeyboardButton(text="üëå", callback_data="fb:rate:ok"),
                InlineKeyboardButton(text="üòê", callback_data="fb:rate:meh"),
            ],
            [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="fb:phrase")],
        ]
    )

@router.message(F.text.in_({"/feedback", "/fb", "–æ—Ç–∑—ã–≤"}))
async def feedback_entry(msg: Message, state: FSMContext) -> None:
    if await state.get_state() == FeedbackStates.wait_phrase:
        await state.clear()
    await msg.answer("–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç–ø–∏–∑–æ–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:", reply_markup=_ratings_kb())


# === –æ—Ü–µ–Ω–∫–∏ (üî•/üëå/üòê), –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ fb:* –ò demo_fb:* ==================
@router.callback_query(F.data.regexp(r"^(?:fb|demo_fb):rate:(.+)$"))
async def on_rate(cb: CallbackQuery) -> None:
    value = cb.match.group(1)  # 'hot' | 'ok' | 'meh'
    # TODO: —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (cb.from_user.id, value)
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    if cb.message:
        await cb.message.reply("–ü—Ä–∏–Ω—è–ª üëç")


# === —Å—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ fb:phrase –ò demo_fb:phrase) ================
@router.callback_query(F.data.in_({"fb:phrase", "demo_fb:phrase"}))
async def on_phrase_start(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    await state.set_state(FeedbackStates.wait_phrase)
    await cb.message.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


# === –ø—Ä–∏—ë–º —Ñ—Ä–∞–∑—ã =============================================================
@router.message(FeedbackStates.wait_phrase, F.text)
async def on_phrase_save(msg: Message, state: FSMContext) -> None:
    text = (msg.text or "").strip()
    if not text or len(text) > 120:
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω—è–µ–º (msg.from_user.id, text)
    await state.clear()
    await msg.reply("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç")


# === –æ—Ç–º–µ–Ω–∞ —Ñ—Ä–∞–∑—ã ============================================================
@router.message(FeedbackStates.wait_phrase, F.text == "/cancel")
async def on_phrase_cancel(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu")
