from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import main_menu
from app.storage.repo import session_scope, delete_user_cascade
from app.storage.models import User

router = Router(name="settings")

def _settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="wipe_confirm")],
    ])

def _confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="wipe_yes"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="wipe_no"),
        ]
    ])

# --- –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
@router.message(Command("settings"))
@router.message(lambda m: isinstance(m.text, str) and "–ù–∞—Å—Ç—Ä–æ–π" in m.text)
async def open_settings(m: Message):
    await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=_settings_kb())

# --- –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ---
@router.message(Command("wipe_me"))
async def wipe_me_command(m: Message):
    await m.answer("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=_confirm_kb())

# --- –ö–Ω–æ–ø–∫–∞ ¬´–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª ---
@router.callback_query(F.data == "wipe_confirm")
async def wipe_confirm(cb: CallbackQuery):
    await cb.message.answer("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=_confirm_kb())
    await cb.answer()

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
@router.callback_query(F.data.in_({"wipe_no", "wipe_yes"}))
async def wipe_actions(cb: CallbackQuery, state: FSMContext):
    if cb.data == "wipe_no":
        await cb.message.answer("–û–∫, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª.", reply_markup=main_menu())
        await cb.answer()
        return

    # wipe_yes
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=cb.from_user.id).first()
        if u:
            delete_user_cascade(s, u.id)

    await state.clear()
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. /start ‚Äî –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", reply_markup=main_menu())
    await cb.answer()
