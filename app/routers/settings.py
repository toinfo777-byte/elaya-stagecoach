from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.storage.repo import session_scope, delete_user_cascade
from app.storage.models import User
from app.keyboards.menu import main_menu, BTN_SETTINGS

router = Router(name="settings")

def kb_settings() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üì£ –í –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)

@router.message(Command("settings"))
@router.message(F.text == BTN_SETTINGS)
async def settings_entry(message: Message) -> None:
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n–ú–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
        reply_markup=kb_settings(),
    )

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def settings_wipe(message: Message) -> None:
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=message.from_user.id).first()
        if not u:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            ok = delete_user_cascade(s, user_id=u.id)
            await message.answer("–ì–æ—Ç–æ–≤–æ. –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã." if ok else "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())

@router.message(F.text.in_({"üì£ –í –º–µ–Ω—é", "–í –º–µ–Ω—é"}))
async def settings_back(message: Message) -> None:
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
