from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import (
    main_menu,
    BTN_SETTINGS,
    BTN_WIPE,
)

from app.storage.repo import session_scope, delete_user_cascade
from app.storage.models import User

router = Router(name="settings")

# ===== Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====

def _settings_kb() -> InlineKeyboardMarkup:
    """–ú–∏–Ω–∏-–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶", callback_data="wipe_confirm")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="settings_back")],
    ])

def _confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="wipe_yes"),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="wipe_no"),
    ]])

# ===== Handlers =====

# –û—Ç–∫—Ä—ã—Ç—å ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª
@router.message(F.text == BTN_SETTINGS)
async def open_settings(m: Message):
    txt = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–ø—Ü–∏–∏.\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ –°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    )
    await m.answer(txt, reply_markup=_settings_kb(), parse_mode="Markdown")

# –ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –í –º–µ–Ω—é¬ª
@router.callback_query(F.data == "settings_back")
async def settings_back(cb: CallbackQuery):
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –í–æ—Ç –º–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()

# –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É ¬´üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª ‚Äî —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
@router.message(F.text == BTN_WIPE)
async def wipe_me_button(m: Message):
    await m.answer("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=_confirm_kb())

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("wipe_me"))
async def wipe_me_command(m: Message):
    await m.answer("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=_confirm_kb())

# –ù–∞–∂–∞–ª–∏ ¬´–°—Ç–µ—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚Ä¶¬ª –∏–∑ –º–∏–Ω–∏-–º–µ–Ω—é ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data == "wipe_confirm")
async def wipe_confirm(cb: CallbackQuery):
    await cb.message.answer("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=_confirm_kb())
    await cb.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.in_({"wipe_no", "wipe_yes"}))
async def wipe_actions(cb: CallbackQuery, state: FSMContext):
    if cb.data == "wipe_no":
        await cb.message.answer("–û–∫, –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª.", reply_markup=main_menu())
        await cb.answer()
        return

    # wipe_yes
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=cb.from_user.id).first()
        if u:
            delete_user_cascade(s, u.id)

    await state.clear()
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω. /start ‚Äî –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥.", reply_markup=main_menu())
    await cb.answer()
