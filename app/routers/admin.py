from __future__ import annotations

import csv
import os
import tempfile
from datetime import datetime, timedelta

from aiogram import Router
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from app.config import settings
from app.storage.models import User, Lead
from app.storage.repo import session_scope
from app.services.feedback import export_feedback_csv  # –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤

router = Router(name="admin")


# ---- helpers ----
def _admin_ids_set() -> set[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º settings.admin_ids (list|set|tuple|str '1,2,3')."""
    try:
        ids = settings.admin_ids
        if isinstance(ids, (set, list, tuple)):
            return {int(x) for x in ids}
        if isinstance(ids, str):
            parts = ids.replace(";", ",").split(",")
            return {int(x.strip()) for x in parts if x.strip()}
    except Exception:
        pass
    return set()


def _is_admin(uid: int) -> bool:
    return uid in _admin_ids_set()


# ---- commands ----
@router.message(Command("admin"))
async def admin_help(m: Message):
    if not _is_admin(m.from_user.id):
        return
    await m.answer(
        "–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/leads_csv [track] ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –ª–∏–¥–æ–≤ (CSV), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Ç—Ä–µ–∫—É\n"
        "/feedback_csv ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ (CSV)\n"
        "/feedback_daily ‚Äî –æ—Ç–∑—ã–≤—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (CSV)\n"
        "/post_training ‚Äî –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏"
    )


@router.message(Command("broadcast"))
async def broadcast(m: Message):
    if not _is_admin(m.from_user.id):
        return

    text = m.text.partition(" ")[2].strip()
    if not text:
        await m.answer("–ù—É–∂–Ω–æ —Ç–∞–∫: /broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    sent = 0
    failed = 0

    # —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    with session_scope() as s:
        users = s.query(User).all()

    # —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è
    for u in users:
        try:
            await m.bot.send_message(u.tg_id, text)
            sent += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            failed += 1

    await m.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}")


@router.message(Command("leads_csv"))
async def leads_csv(m: Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: "/leads_csv leader"
    parts = m.text.split(maxsplit=1)
    track: str | None = parts[1].strip() if len(parts) > 1 else None

    # —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ Lead + User
    with session_scope() as s:
        q = (
            s.query(Lead, User)
            .join(User, User.id == Lead.user_id)
            .order_by(Lead.ts.desc())
        )
        if track:
            q = q.filter(Lead.track == track)

        data = q.all()

        rows = [
            {
                "ts": lead.ts.isoformat(sep=" ", timespec="seconds"),
                "tg_id": user.tg_id,
                "username": user.username,
                "name": user.name,
                "channel": lead.channel,
                "contact": lead.contact,
                "note": lead.note or "",
                "track": lead.track or "",
            }
            for lead, user in data
        ]

    if not rows:
        text = "–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç." if not track else f"–õ–∏–¥–æ–≤ —Å —Ç—Ä–µ–∫–æ–º ¬´{track}¬ª –Ω–µ—Ç."
        return await m.answer(text)

    # –ø–∏—à–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV
    fd, path = tempfile.mkstemp(prefix="leads_", suffix=".csv")
    os.close(fd)
    try:
        fieldnames = ["ts", "tg_id", "username", "name", "channel", "contact", "note", "track"]
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)

        title = f"Leads ({track})" if track else "Leads (all)"
        await m.answer_document(FSInputFile(path), caption=title)
    finally:
        try:
            os.remove(path)
        except OSError:
            pass


# -------- NEW: –≤—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ --------
@router.message(Command("feedback_csv"))
async def feedback_csv(m: Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    path = "exports/feedback_all.csv"
    with session_scope() as s:
        export_feedback_csv(s, path)
    await m.answer_document(FSInputFile(path), caption="Feedback (all)")


@router.message(Command("feedback_daily"))
async def feedback_daily(m: Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    since = datetime.utcnow() - timedelta(days=1)
    path = "exports/feedback_daily.csv"
    with session_scope() as s:
        export_feedback_csv(s, path, since=since)
    await m.answer_document(FSInputFile(path), caption="Feedback (last 24h)")


# -------- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ --------
@router.message(Command("post_training"))
async def post_training(m: Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    try:
        me = await m.bot.get_me()
        link_train = f"https://t.me/{me.username}?start=go_training"
        link_cast = f"https://t.me/{me.username}?start=go_casting"

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", url=link_train)],
            [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥", url=link_cast)],
        ])

        text = (
            "–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ä–∞–∑–º–∏–Ω–∫–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá\n"
            "‚Ä¢ ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª ‚Äî 2‚Äì3 –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ ¬´–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥¬ª ‚Äî 60 —Å–µ–∫—É–Ω–¥"
        )

        await m.bot.send_message(chat_id=settings.channel_username, text=text, reply_markup=kb)
        await m.answer("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ—Å—Ç–∏—Ç—å: {e!s}")
