# app/routers/progress.py
from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message

from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User, DrillRun, Drill, TestResult

router = Router(name="progress")

SPARK = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"

def spark(value: int) -> str:
    # value 0..5 ‚Üí —Å–∏–º–≤–æ–ª
    levels = [0,1,2,3,4,5,6,7]  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    ix = max(0, min(7, round(value * (len(levels)-1) / 5)))
    return SPARK[ix]

@router.message(StateFilter("*"), F.text == "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
@router.message(StateFilter("*"), Command("progress"))
@router.message(StateFilter("*"), lambda m: isinstance(m.text, str) and "–ø—Ä–æ–≥—Ä–µ—Å—Å" in m.text.lower())
async def show_progress(m: Message):
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ /start.", reply_markup=main_menu())
            return
        runs = (s.query(DrillRun).filter_by(user_id=u.id)
                .order_by(DrillRun.ts.desc()).limit(3).all())
        # —Ç–∞–π—Ç–ª—ã —ç—Ç—é–¥–æ–≤
        last = []
        for r in runs:
            d = s.query(Drill).filter_by(id=r.drill_id).first()
            if d:
                last.append(d.payload_json.get("title", r.drill_id))
        # –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–µ—Å—Ç—É
        tr = (s.query(TestResult).filter_by(user_id=u.id)
              .order_by(TestResult.ts.desc()).first())

    axes_txt = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–π–¥–∏—Ç–µ üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥)" if not tr else (
        "–í–Ω–∏–º–∞–Ω–∏–µ {0} {5}\n–ü–∞—É–∑–∞ {1} {6}\n–¢–µ–º–ø {2} {7}\n–ò–Ω—Ç–æ–Ω–∞—Ü–∏—è {3} {8}\n–õ–æ–≥–∏–∫–∞ {4} {9}".format(
            tr.axes_json.get("attention",0),
            tr.axes_json.get("pause",0),
            tr.axes_json.get("tempo",0),
            tr.axes_json.get("intonation",0),
            tr.axes_json.get("logic",0),
            spark(tr.axes_json.get("attention",0)),
            spark(tr.axes_json.get("pause",0)),
            spark(tr.axes_json.get("tempo",0)),
            spark(tr.axes_json.get("intonation",0)),
            spark(tr.axes_json.get("logic",0)),
        )
    )
    last_txt = "‚Äî –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π" if not last else "‚Ä¢ " + "\n‚Ä¢ ".join(last)
    msg = (
        f"–°—Ç—Ä–∏–∫: {u.streak}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç—Ç—é–¥—ã:\n{last_txt}\n\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å 5 –æ—Å–µ–π:\n{axes_txt}"
    )
    await m.answer(msg, reply_markup=main_menu())
