# app/routers/progress.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

# –ö–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–±–æ—Ä–∫–∞—Ö ‚Äî –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
try:
    from app.keyboards.reply import BTN_PROGRESS, main_menu_kb
except Exception:
    BTN_PROGRESS = "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
    def main_menu_kb():
        return None  # –±–µ–∑ –∫–ª–∞–≤—ã —Ç–æ–∂–µ –æ–∫

# –õ—ë–≥–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
try:
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ app.storage.repo –µ—Å—Ç—å —Å–∏–Ω–≥–ª—Ç–æ–Ω progress –∏ ensure_schema —É–∂–µ –≤—ã–∑–≤–∞–Ω –≤ main.py
    from app.storage.repo import progress as progress_repo
except Exception:
    progress_repo = None  # –Ω–µ —Ä–æ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç ‚Äî –≤–µ—Ä–Ω—ë–º –∑–∞–≥–ª—É—à–∫—É

router = Router(name="progress")


def _sparkline(days):
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞ 7 –¥–Ω–µ–π:
    0 ‚Äî '‚ñ°', >=1 ‚Äî '‚ñ†'
    """
    blocks = []
    for d, cnt in days:
        blocks.append("‚ñ†" if cnt > 0 else "‚ñ°")
    return "".join(blocks)


async def _render_progress(m: Message) -> None:
    if progress_repo is None:
        await m.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    try:
        s = await progress_repo.get_summary(user_id=m.from_user.id)
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    days_vis = _sparkline(s.last_days)
    txt = (
        "üìà –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ 7 –¥–Ω–µ–π\n"
        f"–°—Ç—Ä–∏–∫: <b>{s.streak}</b> –¥–Ω–µ–π\n"
        f"–≠–ø–∏–∑–æ–¥–æ–≤: <b>{s.episodes_7d}</b>\n"
        f"–û—á–∫–æ–≤: <b>{s.points_7d}</b>\n"
        f"{days_vis}  (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è –¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∏–∫ –∂–∏–≤—ã–º."
    )
    await m.answer(txt, reply_markup=main_menu_kb())


@router.message(Command("progress"))
async def cmd_progress(m: Message) -> None:
    await _render_progress(m)


@router.message(F.text == BTN_PROGRESS)
async def btn_progress(m: Message) -> None:
    await _render_progress(m)


__all__ = ["router"]
