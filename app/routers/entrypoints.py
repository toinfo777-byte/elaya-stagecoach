# app/routers/entrypoints.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.keyboards.reply import (
    BTN_TRAINING, BTN_CASTING, BTN_APPLY, BTN_PROGRESS,
    BTN_HELP, BTN_SETTINGS, BTN_EXTENDED, BTN_MENU
)
from app.keyboards.reply import main_menu_kb

# –≤—ã–∑–æ–≤—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
from app.routers.minicasting import start_minicasting
from app.routers.leader import start_leader_btn
from app.routers.training import show_training_levels

router = Router(name="entrypoints")

@router.message(StateFilter("*"), F.text == BTN_TRAINING)
async def ep_training(msg: Message, state: FSMContext):
    await state.clear()
    await show_training_levels(msg)

@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def ep_casting(msg: Message, state: FSMContext):
    await state.clear()
    await start_minicasting(msg, state)

@router.message(StateFilter("*"), F.text == BTN_APPLY)
async def ep_leader(msg: Message, state: FSMContext):
    await state.clear()
    await start_leader_btn(msg, state)

@router.message(StateFilter("*"), F.text == BTN_PROGRESS)
async def ep_progress(msg: Message, state: FSMContext):
    await state.clear()
    # –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç; –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–π show_progress ‚Äî –¥–µ—Ä–Ω–∏ –µ–≥–æ
    await msg.answer(
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n‚Ä¢ –°—Ç—Ä–∏–∫: 0\n‚Ä¢ –≠—Ç—é–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: 0\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá",
        reply_markup=main_menu_kb()
    )

@router.message(StateFilter("*"), F.text == BTN_HELP)
async def ep_help(msg: Message, state: FSMContext):
    await state.clear()
    from app.routers.help import help_cmd  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å —Ü–∏–∫–ª—ã
    await help_cmd(msg, state)

@router.message(StateFilter("*"), F.text == BTN_SETTINGS)
async def ep_settings(msg: Message, state: FSMContext):
    await state.clear()
    from app.routers.settings import open_settings
    await open_settings(msg, state)

@router.message(StateFilter("*"), F.text == BTN_EXTENDED)
async def ep_extended(msg: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.extended import extended_pitch
        await extended_pitch(msg)
    except Exception:
        await msg.answer("‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_MENU)
async def ep_menu(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
