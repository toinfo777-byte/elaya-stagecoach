# app/routers/entrypoints.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

go = Router(name="entrypoints")


# -------- –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —É—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é --------
async def _call_entry(mod_path: str, func_name: str, event: Message | CallbackQuery, state: FSMContext | None = None):
    """
    –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–∑–æ–≤ entry-—Ñ—É–Ω–∫—Ü–∏–∏.
    –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å —Å (event, state) -> (event) -> (event.message, state) -> (event.message).
    –ü—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        module = __import__(mod_path, fromlist=[func_name])
        func = getattr(module, func_name)
    except Exception:
        # fallback –≤ –º–µ–Ω—é
        await _show_menu_fallback(event)
        return

    # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    try:
        return await func(event, state) if state is not None else await func(event)
    except TypeError:
        # –≤–æ–∑–º–æ–∂–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –∂–¥—ë—Ç —Ç–æ–ª—å–∫–æ Message/CallbackQuery –±–µ–∑ state
        try:
            return await func(event)
        except TypeError:
            # –≤–æ–∑–º–æ–∂–Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–ª–∞ Message –≤–º–µ—Å—Ç–æ CallbackQuery
            msg = event.message if isinstance(event, CallbackQuery) else event
            try:
                return await func(msg, state) if state is not None else await func(msg)
            except Exception:
                await _show_menu_fallback(event)
                return
    except Exception:
        await _show_menu_fallback(event)
        return


async def _show_menu_fallback(event: Message | CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."""
    try:
        module = __import__("app.routers.help", fromlist=["show_main_menu"])
        show_main_menu = getattr(module, "show_main_menu")
    except Exception:
        return
    msg = event.message if isinstance(event, CallbackQuery) else event
    await show_main_menu(msg)


# ===================== –ö–æ–º–∞–Ω–¥—ã (—Å–æ–æ–±—â–µ–Ω–∏—è) ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è =====================

@go.message(StateFilter("*"), Command("menu"))
async def ep_cmd_menu(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_main_menu", m)

@go.message(StateFilter("*"), Command("training"))
async def ep_cmd_training(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.training", "show_training_levels", m, state)

@go.message(StateFilter("*"), Command("leader"))
@go.message(StateFilter("*"), Command("apply"))
async def ep_cmd_leader(m: Message, state: FSMContext):
    await state.clear()
    # –µ—Å–ª–∏ –Ω–µ—Ç leader_entry, –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π start_apply ‚Äî _call_entry —Å–∞–º –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ—Ç
    await _call_entry("app.routers.leader", "leader_entry", m, state)

@go.message(StateFilter("*"), Command("casting"))
async def ep_cmd_casting(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.minicasting", "start_minicasting", m, state)

@go.message(StateFilter("*"), Command("progress"))
async def ep_cmd_progress(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.progress", "show_progress", m)

@go.message(StateFilter("*"), Command("settings"))
async def ep_cmd_settings(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_settings", m, state)

@go.message(StateFilter("*"), Command("privacy"))
async def ep_cmd_privacy(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_privacy", m)

@go.message(StateFilter("*"), Command("help"))
async def ep_cmd_help(m: Message, state: FSMContext):
    # –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π /help –∏–∑ –≤–∞—à–µ–≥–æ help.py
    await _call_entry("app.routers.help", "help_cmd", m, state)


# ===================== –ö–æ–ª–ª–±—ç–∫–∏ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ‚Äî –∞–ª–∏–∞—Å—ã –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ payload‚Äô—ã =====================

MENU    = {"go:menu", "menu", "to_menu", "core:menu", "home", "main_menu", "–í_–º–µ–Ω—é"}
TRAIN   = {"go:training", "training", "training:start"}
LEADER  = {"go:leader", "go:apply", "leader"}
CAST    = {"go:casting", "casting"}
PROGR   = {"go:progress", "progress"}
SETTS   = {"go:settings", "settings"}
PRIV    = {"go:privacy", "privacy", "policy"}

@go.callback_query(StateFilter("*"), F.data.in_(MENU))
async def ep_cb_menu(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.help", "show_main_menu", cq)

@go.callback_query(StateFilter("*"), F.data.in_(TRAIN))
async def ep_cb_training(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.training", "show_training_levels", cq, state)

@go.callback_query(StateFilter("*"), F.data.in_(LEADER))
async def ep_cb_leader(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.leader", "leader_entry", cq, state)

@go.callback_query(StateFilter("*"), F.data.in_(CAST))
async def ep_cb_casting(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.minicasting", "start_minicasting", cq, state)

@go.callback_query(StateFilter("*"), F.data.in_(PROGR))
async def ep_cb_progress(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.progress", "show_progress", cq)

@go.callback_query(StateFilter("*"), F.data.in_(SETTS))
async def ep_cb_settings(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.help", "show_settings", cq, state)

@go.callback_query(StateFilter("*"), F.data.in_(PRIV))
async def ep_cb_privacy(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await state.clear()
    await _call_entry("app.routers.help", "show_privacy", cq)


# ============== –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å ReplyKeyboard (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ¬´–±–æ–ª—å—à–æ–µ –º–µ–Ω—é¬ª) ==============

TEXT_MENU     = {"üè† –í –º–µ–Ω—é", "–ú–µ–Ω—é", "–í –º–µ–Ω—é"}
TEXT_TRAIN    = {"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"}
TEXT_CAST     = {"üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"}
TEXT_LEADER   = {"üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"}
TEXT_PROGRESS = {"üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"}
TEXT_SETTINGS = {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"}
TEXT_PRIVACY  = {"üîê –ü–æ–ª–∏—Ç–∏–∫–∞"}

@go.message(StateFilter("*"), F.text.in_(TEXT_MENU))
async def ep_txt_menu(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_main_menu", m)

@go.message(StateFilter("*"), F.text.in_(TEXT_TRAIN))
async def ep_txt_training(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.training", "show_training_levels", m, state)

@go.message(StateFilter("*"), F.text.in_(TEXT_CAST))
async def ep_txt_casting(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.minicasting", "start_minicasting", m, state)

@go.message(StateFilter("*"), F.text.in_(TEXT_LEADER))
async def ep_txt_leader(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.leader", "leader_entry", m, state)

@go.message(StateFilter("*"), F.text.in_(TEXT_PROGRESS))
async def ep_txt_progress(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.progress", "show_progress", m)

@go.message(StateFilter("*"), F.text.in_(TEXT_SETTINGS))
async def ep_txt_settings(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_settings", m, state)

@go.message(StateFilter("*"), F.text.in_(TEXT_PRIVACY))
async def ep_txt_privacy(m: Message, state: FSMContext):
    await state.clear()
    await _call_entry("app.routers.help", "show_privacy", m)


# ============== –ü–æ—Å–ª–µ–¥–Ω–∏–π ¬´—Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π¬ª –∫–æ–ª–±—ç–∫: –ª—é–±—ã–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤ –º–µ–Ω—é ==============

@go.callback_query()
async def ep_fallback_cb(cq: CallbackQuery):
    await cq.answer()
    await _show_menu_fallback(cq)


# —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∏–º–ø–æ—Ä—Ç–æ–º r_entrypoints.router
router = go
__all__ = ["go", "router"]
