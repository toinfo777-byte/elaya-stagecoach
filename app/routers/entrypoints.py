from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.keyboards.reply import (
    BTN_TRAINING, BTN_CASTING, BTN_APPLY, BTN_PROGRESS,
    BTN_HELP, BTN_SETTINGS, BTN_EXTENDED, BTN_MENU, main_menu_kb
)

router = Router(name="entrypoints")

@router.message(StateFilter("*"), F.text == BTN_TRAINING)
async def on_training(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.training import training_start
        await training_start(m, state)
    except Exception:
        await m.answer("–†–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë—Ç—Å—è. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def on_minicasting(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.minicasting import start_minicasting
        await start_minicasting(m, state)
    except Exception:
        await m.answer("–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_APPLY)
async def on_leader(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.leader import leader_entry
        await leader_entry(m, state)
    except Exception:
        await m.answer("–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_PROGRESS)
async def on_progress(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.progress import show_progress
        await show_progress(m)
    except Exception:
        await m.answer("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n‚Ä¢ –°—Ç—Ä–∏–∫: 0\n‚Ä¢ –≠—Ç—é–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: 0", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_HELP)
async def on_help(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.help import help_cmd
        await help_cmd(m, state)
    except Exception:
        await m.answer("–ü–æ–º–æ—â—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_SETTINGS)
async def on_settings(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.settings import open_settings
        await open_settings(m, state)
    except Exception:
        await m.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_EXTENDED)
async def on_extended(m: Message, state: FSMContext):
    await state.clear()
    try:
        from app.routers.extended import extended_pitch
        await extended_pitch(m)
    except Exception:
        await m.answer("‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ. –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())

@router.message(StateFilter("*"), F.text == BTN_MENU)
async def on_menu(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
