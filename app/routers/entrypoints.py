from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

# —Ç–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω-—Ñ—É–Ω–∫—Ü–∏–∏:
from app.routers.help import show_main_menu, show_privacy, show_settings
from app.routers.training import show_training_levels
from app.routers.leader import leader_entry
from app.routers.minicasting import start_minicasting
from app.routers.progress import show_progress
# –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
# from app.routers.apply import start_apply

router = Router(name="entrypoints")


# ---------- –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –õ–Æ–ë–û–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è) ----------
@router.message(StateFilter("*"), Command("menu"))
async def ep_cmd_menu(m: Message, state: FSMContext):
    await state.clear()
    await show_main_menu(m)

@router.message(StateFilter("*"), Command("training"))
async def ep_cmd_training(m: Message, state: FSMContext):
    await state.clear()
    await show_training_levels(m, state)

@router.message(StateFilter("*"), Command("apply"))
@router.message(StateFilter("*"), Command("leader"))
async def ep_cmd_leader(m: Message, state: FSMContext):
    await state.clear()
    await leader_entry(m, state)

@router.message(StateFilter("*"), Command("casting"))
async def ep_cmd_casting(m: Message, state: FSMContext):
    await state.clear()
    await start_minicasting(m, state)

@router.message(StateFilter("*"), Command("progress"))
async def ep_cmd_progress(m: Message, state: FSMContext):
    await state.clear()
    await show_progress(m)

@router.message(StateFilter("*"), Command("settings"))
async def ep_cmd_settings(m: Message, state: FSMContext):
    await state.clear()
    await show_settings(m, state)

@router.message(StateFilter("*"), Command("privacy"))
async def ep_cmd_privacy(m: Message, state: FSMContext):
    await state.clear()
    await show_privacy(m)

# –µ—Å–ª–∏ –Ω—É–∂–µ–Ω /apply –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è:
# @router.message(StateFilter("*"), Command("apply"))
# async def ep_cmd_apply(m: Message, state: FSMContext):
#     await state.clear()
#     await start_apply(m, state)


# ---------- –∞–ª–∏–∞—Å—ã callback_data –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ----------
MENU = {"go:menu", "menu", "to_menu", "core:menu", "home", "main_menu", "–í_–º–µ–Ω—é"}
TRAIN = {"go:training", "training", "training:start"}
LEAD  = {"go:leader", "go:apply", "leader", "apply"}
CAST  = {"go:casting", "casting"}
PROGR = {"go:progress", "progress"}
SETTS = {"go:settings", "settings"}
PRIV  = {"go:privacy", "privacy", "policy"}

@router.callback_query(StateFilter("*"), F.data.in_(MENU))
async def ep_cb_menu(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await show_main_menu(cb.message)

@router.callback_query(StateFilter("*"), F.data.in_(TRAIN))
async def ep_cb_training(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await show_training_levels(cb.message, state)

@router.callback_query(StateFilter("*"), F.data.in_(LEAD))
async def ep_cb_leader(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await leader_entry(cb.message, state)

@router.callback_query(StateFilter("*"), F.data.in_(CAST))
async def ep_cb_casting(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await start_minicasting(cb.message, state)

@router.callback_query(StateFilter("*"), F.data.in_(PROGR))
async def ep_cb_progress(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await show_progress(cb.message)

@router.callback_query(StateFilter("*"), F.data.in_(SETTS))
async def ep_cb_settings(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await show_settings(cb.message, state)

@router.callback_query(StateFilter("*"), F.data.in_(PRIV))
async def ep_cb_privacy(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.clear()
    await show_privacy(cb.message)


# ---------- —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ ReplyKeyboard (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ¬´–±–æ–ª—å—à–æ–µ –º–µ–Ω—é¬ª) ----------
@router.message(StateFilter("*"), F.text.in_({"üè† –í –º–µ–Ω—é", "–ú–µ–Ω—é", "–í –º–µ–Ω—é"}))
async def ep_txt_menu(m: Message, state: FSMContext):
    await state.clear()
    await show_main_menu(m)

@router.message(StateFilter("*"), F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è")
async def ep_txt_training(m: Message, state: FSMContext):
    await state.clear()
    await show_training_levels(m, state)

@router.message(StateFilter("*"), F.text == "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥")
async def ep_txt_casting(m: Message, state: FSMContext):
    await state.clear()
    await start_minicasting(m, state)

@router.message(StateFilter("*"), F.text == "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")
async def ep_txt_leader(m: Message, state: FSMContext):
    await state.clear()
    await leader_entry(m, state)

@router.message(StateFilter("*"), F.text == "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def ep_txt_progress(m: Message, state: FSMContext):
    await state.clear()
    await show_progress(m)

@router.message(StateFilter("*"), F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def ep_txt_settings(m: Message, state: FSMContext):
    await state.clear()
    await show_settings(m, state)

@router.message(StateFilter("*"), F.text == "üîê –ü–æ–ª–∏—Ç–∏–∫–∞")
async def ep_txt_privacy(m: Message, state: FSMContext):
    await state.clear()
    await show_privacy(m)


__all__ = ["router"]
