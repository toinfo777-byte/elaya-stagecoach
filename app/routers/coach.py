# app/routers/coach.py
from datetime import datetime, timezone

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.bot.states import CoachStates

router = Router(name="coach")

# ===== –•–µ–ª–ø–µ—Ä—ã =====

_RECENT_WINDOW_SEC = 180  # 3 –º–∏–Ω ‚Äî –æ–∫–Ω–æ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –º—è–≥–∫–æ –∏–≥–Ω–æ—Ä–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã


async def _mark_feeling_saved(state: FSMContext) -> None:
    """
    –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à–∞–≥ –∫–æ—É—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ.
    –í aiogram v3 —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ FSMContext.
    """
    now_ts = int(datetime.now(timezone.utc).timestamp())
    # —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        coach_last="feeling_saved",
        coach_last_ts=now_ts,
    )


async def _recently_saved(state: FSMContext, within: int = _RECENT_WINDOW_SEC) -> bool:
    """
    True, –µ—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞ already saved.
    """
    data = await state.get_data()
    ts = data.get("coach_last_ts")
    if not ts:
        return False
    now_ts = int(datetime.now(timezone.utc).timestamp())
    return (now_ts - int(ts)) < within and data.get("coach_last") == "feeling_saved"


# ===== –•—ç–Ω–¥–ª–µ—Ä—ã =====

@router.message(F.text == "/coach_on")
async def coach_on(msg: Message, state: FSMContext):
    await msg.answer(
        "–ö–æ—Ä–æ—Ç–∫–æ: –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ ‚Äî –ü–∞—É–∑–∞ –∫–∞–∫ –ø—Ä–∞–≤–¥–∞ (4-2-6-2).\n"
        "–®–∞–≥–∏: –í–¥–æ—Ö 4 ‚Üí –ü–∞—É–∑–∞ 2 ‚Üí –í—ã–¥–æ—Ö 6 ‚Üí –ü–∞—É–∑–∞ 2.\n"
        "–ü—Ä–∏–∑–Ω–∞–∫: –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã?\n"
        "–ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–º–µ—Ç—å –æ—â—É—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.\n\n"
        "‚è± –¢–∞–π–º–µ—Ä 60 —Å–µ–∫"
    )
    await state.set_state(CoachStates.wait_feeling)


@router.message(CoachStates.wait_feeling, F.text)
async def coach_feeling(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ¬´–æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ¬ª
    if not text or len(text.split()) > 2 or len(text) > 32:
        await msg.answer("–û–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ª–æ–≤–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return

    # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏
    # save_feeling(user_id=msg.from_user.id, feeling=text)

    await _mark_feeling_saved(state)
    await state.clear()

    await msg.answer("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –º–µ–Ω—é: /menu")


# –ú—è–≥–∫–∏–π –≥–∞—Ä–¥: –µ—Å–ª–∏ —é–∑–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è,
# –æ—Ç–≤–µ—á–∞–µ–º –º—è–≥–∫–æ, –∞ –Ω–µ –≤–∞–ª–∏–º—Å—è –≤ –æ–±—â–∏–π —Ñ–æ–ª–±—ç–∫.
@router.message(F.text)
async def coach_post_saved_soft_guard(msg: Message, state: FSMContext):
    if await _recently_saved(state):
        await msg.answer(
            "–Ø —É–∂–µ –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –æ—â—É—â–µ–Ω–∏–µ üëå\n"
            "–ù–∞—á–∞—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî /coach_on, –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚Äî /menu"
        )
        return
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã (–º–µ–Ω—é –∏ —Ç.–ø.) –ø–æ–¥—Ö–≤–∞—Ç—è—Ç
