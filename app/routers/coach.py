# app/routers/coach.py
from __future__ import annotations

import asyncio
import time
from datetime import datetime, timedelta
from typing import Iterable

from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, MessageEntity
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.keyboards.coach import timer_kb
from app.services.coach_rules import pick_drill_by_keywords
from app.storage.repo import session_scope, log_event
from app.storage.models import User

router = Router(name="coach")

# --- —Ñ–ª–∞–≥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
_COACH_USERS: dict[int, dict] = {}      # user_id -> {"until": dt, "last": monotonic_ts}
_ALLOWED_CHATS: set[int] = set()        # —á–∞—Ç—ã, –≥–¥–µ –≤–∫–ª—é—á—ë–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º
_MAINTENANCE: bool = False              # –±—ã—Å—Ç—Ä—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å
_GROUPS_DISABLED: bool = False          # –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º

_TTL_MIN_DEFAULT = 15
_RATE_SEC_DEFAULT = 5

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö –≤ –ø–∞—Å—Å–∏–≤–Ω–æ–º —Å–ª—É—à–∞—Ç–µ–ª–µ
_MENU_TEXTS: set[str] = {
    "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",
    "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",
    "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",
    "üîê –ü–æ–ª–∏—Ç–∏–∫–∞",
    "üí¨ –ü–æ–º–æ—â—å",
}

def _has_bot_command(entities: Iterable[MessageEntity] | None) -> bool:
    if not entities:
        return False
    return any(getattr(e, "type", None) == "bot_command" for e in entities)

def _coach_on(uid: int):
    ttl_min = getattr(settings, "coach_ttl_min", _TTL_MIN_DEFAULT)
    _COACH_USERS[uid] = {
        "until": datetime.utcnow() + timedelta(minutes=ttl_min),
        "last": 0.0,
    }

# ====== –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã / —Ç–µ–∫—Å—Ç—ã ======
@router.message(StateFilter("*"), Command("coach_on"))
async def cmd_on(m: Message):
    if _MAINTENANCE:
        return await m.answer("üîß –ò–¥—É—Ç —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    _coach_on(m.from_user.id)
    await m.answer("ü§ù –õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –≤–∫–ª—é—á—ë–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç. "
                   "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ–±–ª–µ–º—É ‚Äî –æ—Ç–≤–µ—á—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É —ç—Ç—é–¥.")

@router.message(StateFilter("*"), Command("coach_off"))
async def cmd_off(m: Message):
    _COACH_USERS.pop(m.from_user.id, None)
    await m.answer("üëã –õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω.")

@router.message(StateFilter("*"), Command("coach_status"))
async def cmd_status(m: Message):
    uid = m.from_user.id
    st = _COACH_USERS.get(uid)
    personal = "–≤–∫–ª—é—á—ë–Ω –¥–æ " + st["until"].strftime("%H:%M UTC") if st and datetime.utcnow() < st["until"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    if m.chat.type in {"group", "supergroup"}:
        group = "–≤–∫–ª—é—á—ë–Ω" if m.chat.id in _ALLOWED_CHATS and not _GROUPS_DISABLED else "–≤—ã–∫–ª—é—á–µ–Ω"
        await m.answer(f"üìä –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:\n‚Ä¢ –õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º: {personal}\n‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —á–∞—Ç–∞: {group}")
    else:
        await m.answer(f"üìä –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞:\n‚Ä¢ –õ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º: {personal}")

@router.message(StateFilter("*"), Command("ask"))
@router.message(StateFilter("*"), F.text.regexp(r"^/–≤–æ–ø—Ä–æ—Å\s+.+"))
async def ask_cmd(m: Message):
    if _MAINTENANCE:
        return await m.answer("üîß –ò–¥—É—Ç —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    text = m.text.split(maxsplit=1)[1] if " " in m.text else ""
    await _handle_question(m, text)

@router.message(
    StateFilter("*"),
    F.chat.type.in_({"group", "supergroup"}),
    Command("coach_toggle")
)
async def coach_toggle(m: Message):
    if _MAINTENANCE or _GROUPS_DISABLED:
        return await m.answer("üîï –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    cid = m.chat.id
    if cid in _ALLOWED_CHATS:
        _ALLOWED_CHATS.remove(cid)
        await m.answer("üîï –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞ **–≤—ã–∫–ª—é—á—ë–Ω**.")
    else:
        _ALLOWED_CHATS.add(cid)
        await m.answer("üîî –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞ **–≤–∫–ª—é—á—ë–Ω**.")

# ====== –ø–∞—Å—Å–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ ======
@router.message(F.text)
async def passive_listen(m: Message, state: FSMContext):
    if _MAINTENANCE:
        return  # —Ç–∏—Ö–æ –º–æ–ª—á–∏–º –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö—Ä–∞–±–æ—Ç

    # –ì—Ä—É–ø–ø—ã ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏, –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    if m.chat.type in {"group", "supergroup"}:
        if _GROUPS_DISABLED or m.chat.id not in _ALLOWED_CHATS:
            return

    txt = (m.text or "").strip()
    if not txt or txt in _MENU_TEXTS:
        return
    if _has_bot_command(m.entities) or txt.startswith("/"):
        return

    uid = m.from_user.id
    st = _COACH_USERS.get(uid)
    if not st:
        return
    if datetime.utcnow() > st["until"]:
        _COACH_USERS.pop(uid, None)
        return await m.answer("‚è≥ –°–µ—Å—Å–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. –í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /coach_on")

    # Rate limit
    rate_sec = getattr(settings, "coach_rate_sec", _RATE_SEC_DEFAULT)
    now = time.monotonic()
    if now - st["last"] < rate_sec:
        return
    st["last"] = now

    await _handle_question(m, txt)

# ====== —Å–ª—É–∂–µ–±–Ω—ã–µ ======
async def _send_typing(bot, chat_id: int, stop_event: asyncio.Event):
    try:
        while not stop_event.is_set():
            await bot.send_chat_action(chat_id, ChatAction.TYPING)
            await asyncio.sleep(5.5)
    except Exception:
        pass

async def _handle_question(m: Message, q: str):
    if not q.strip():
        return await m.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ —Å—É—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–∂–∏–º –≤ –≥–æ—Ä–ª–µ¬ª.")
    stop = asyncio.Event()
    typing_task = asyncio.create_task(_send_typing(m.bot, m.chat.id, stop))
    try:
        drill = pick_drill_by_keywords(q)
        title = drill["title"]
        steps = drill["steps"][:4]
        sign = drill.get("check_question", "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è?")
        reply = (
            f"–ö–æ—Ä–æ—Ç–∫–æ: –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ ‚Äî {title}.\n"
            f"–®–∞–≥–∏: " + " ‚Üí ".join(steps) + ".\n"
            f"–ü—Ä–∏–∑–Ω–∞–∫: {sign}\n"
            f"–ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–º–µ—á–∞–π –æ—â—É—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
        )
        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π
        try:
            with session_scope() as s:
                u = s.query(User).filter_by(tg_id=m.from_user.id).first()
                log_event(s, u.id if u else None, "coach_answer", {"q": q, "drill_id": drill.get("id")})
        except Exception:
            pass
        await m.answer(reply, reply_markup=timer_kb())
    except Exception:
        await m.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤—Ç–æ—Ä–∏ —à–∞–≥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é: /menu üôè")
        raise
    finally:
        stop.set()
        try:
            await typing_task
        except Exception:
            pass

@router.callback_query(F.data == "coach_timer_60")
async def coach_timer(cb: CallbackQuery):
    msg = await cb.message.answer("‚è≥ 60 —Å–µ–∫.")
    for left in (45, 30, 15, 5):
        await asyncio.sleep(60 - left if left == 45 else 15 if left in (30, 15) else 10)
        await msg.edit_text(f"‚è≥ {left} —Å–µ–∫.")
    await asyncio.sleep(5)
    await msg.edit_text("‚è± –ì–æ—Ç–æ–≤–æ! –ö–∞–∫ –æ—â—É—â–µ–Ω–∏–µ? –û–¥–Ω–æ —Å–ª–æ–≤–æ.")
    await cb.answer()

# ====== –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä—ã—Ö —Ñ–ª–∞–≥–æ–≤ ======
def _is_admin(uid: int) -> bool:
    admin_ids = getattr(settings, "admin_ids", []) or []
    return uid in admin_ids

@router.message(StateFilter("*"), Command("maint_on"))
async def maint_on(m: Message):
    if not _is_admin(m.from_user.id):
        return
    global _MAINTENANCE
    _MAINTENANCE = True
    await m.answer("üîß –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤–∫–ª—é—á—ë–Ω. –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

@router.message(StateFilter("*"), Command("maint_off"))
async def maint_off(m: Message):
    if not _is_admin(m.from_user.id):
        return
    global _MAINTENANCE
    _MAINTENANCE = False
    await m.answer("‚úÖ –¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

@router.message(StateFilter("*"), Command("coach_groups_off"))
async def groups_off(m: Message):
    if not _is_admin(m.from_user.id):
        return
    global _GROUPS_DISABLED
    _GROUPS_DISABLED = True
    await m.answer("üîï –ì–ª–æ–±–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.")

@router.message(StateFilter("*"), Command("coach_groups_on"))
async def groups_on(m: Message):
    if not _is_admin(m.from_user.id):
        return
    global _GROUPS_DISABLED
    _GROUPS_DISABLED = False
    await m.answer("üîî –ì–ª–æ–±–∞–ª—å–Ω–æ –≤–∫–ª—é—á—ë–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.")
