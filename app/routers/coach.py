from __future__ import annotations
import asyncio, time
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.keyboards.coach import timer_kb
from app.services.coach_rules import pick_drill_by_keywords
from app.storage.repo import session_scope, log_event
from app.storage.models import User

router = Router(name="coach")

_COACH_USERS: dict[int, dict] = {}   # user_id -> {"until": dt, "last": ts}
_ALLOWED_CHATS: set[int] = set()     # –≤–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ /coach_toggle

def _coach_on(u: int):
    _COACH_USERS[u] = {"until": datetime.utcnow() + timedelta(minutes=settings.coach_ttl_min), "last": 0.0}

async def coach_on(m: Message):
    _coach_on(m.from_user.id)
    await m.answer("ü§ù –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤–∫–ª—é—á—ë–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç. –°–ø—Ä–æ—Å–∏ –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –æ—Ç–≤–µ—á—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É —ç—Ç—é–¥.")

@router.message(Command("coach_on"))
async def cmd_on(m: Message):
    await coach_on(m)

@router.message(Command("coach_off"))
async def cmd_off(m: Message):
    _COACH_USERS.pop(m.from_user.id, None)
    await m.answer("üëã –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω.")

@router.message(Command("ask"))
@router.message(F.text.regexp(r"^/–≤–æ–ø—Ä–æ—Å\s+.+"))
async def ask_cmd(m: Message):
    text = m.text.split(maxsplit=1)[1] if " " in m.text else ""
    await _handle_question(m, text)

@router.message(F.chat.type.in_({"group","supergroup"}), Command("coach_toggle"))
async def coach_toggle(m: Message):
    cid = m.chat.id
    if cid in _ALLOWED_CHATS:
        _ALLOWED_CHATS.remove(cid)
        await m.answer("üîï –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –æ—Ç–∫–ª—é—á—ë–Ω.")
    else:
        _ALLOWED_CHATS.add(cid)
        await m.answer("üîî –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤–∫–ª—é—á—ë–Ω.")

@router.message(F.text)
async def passive_listen(m: Message, state: FSMContext):
    # –≥—Ä—É–ø–ø–æ–≤—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏
    if m.chat.type in {"group","supergroup"} and m.chat.id not in _ALLOWED_CHATS:
        return
    # —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –∏ –≤ —Ä–∞–º–∫–∞—Ö TTL
    u = m.from_user.id
    st = _COACH_USERS.get(u)
    if not st:
        return
    if datetime.utcnow() > st["until"]:
        _COACH_USERS.pop(u, None)
        return await m.answer("‚è≥ –°–µ—Å—Å–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. –í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /coach_on")

    # rate limit
    now = time.monotonic()
    if now - st["last"] < settings.coach_rate_sec:
        return  # –º–æ–ª—á–∞
    st["last"] = now
    await _handle_question(m, m.text)

async def _send_typing(bot, chat_id: int, stop_event: asyncio.Event):
    try:
        while not stop_event.is_set():
            await bot.send_chat_action(chat_id, ChatAction.TYPING)
            await asyncio.sleep(5.5)
    except Exception:
        pass

async def _handle_question(m: Message, q: str):
    if not q.strip():
        return await m.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ —Å—É—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–∂–∏–º –≤ –≥–æ—Ä–ª–µ¬ª.")

    # typing‚Ä¶
    stop = asyncio.Event()
    asyncio.create_task(_send_typing(m.bot, m.chat.id, stop))

    # –ø–æ–¥–±–∏—Ä–∞–µ–º —ç—Ç—é–¥ (fallback –±–µ–∑ LLM)
    drill = pick_drill_by_keywords(q)
    title = drill["title"]
    steps = drill["steps"][:4]
    sign  = drill.get("check_question","–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è?")

    reply = (
        f"–ö–æ—Ä–æ—Ç–∫–æ: –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ ‚Äî {title}.\n"
        f"–®–∞–≥–∏: " + " ‚Üí ".join(steps) + ".\n"
        f"–ü—Ä–∏–∑–Ω–∞–∫: {sign}\n"
        f"–ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–º–µ—á–∞–π –æ—â—É—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
    )
    # –ª–æ–≥
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        log_event(s, u.id if u else None, "coach_answer", {"q": q, "drill_id": drill["id"]})

    stop.set()
    await m.answer(reply, reply_markup=timer_kb())

@router.callback_query(F.data == "coach_timer_60")
async def coach_timer(cb: CallbackQuery):
    msg = await cb.message.answer("‚è≥ 60 —Å–µ–∫.")
    for left in (45, 30, 15, 5):
        await asyncio.sleep(60 - left if left == 45 else 15 if left in (30,15) else 10)
        await msg.edit_text(f"‚è≥ {left} —Å–µ–∫.")
    await asyncio.sleep(5)
    await msg.edit_text("‚è± –ì–æ—Ç–æ–≤–æ! –ö–∞–∫ –æ—â—É—â–µ–Ω–∏–µ? –û–¥–Ω–æ —Å–ª–æ–≤–æ.")
    await cb.answer()
