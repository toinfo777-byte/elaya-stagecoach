# app/routers/coach.py
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.bot.states import CoachStates

router = Router(name="coach")


def _utc_ts() -> float:
    return datetime.now(timezone.utc).timestamp()


# ===== helpers ===============================================================

async def _mark_feeling_saved(state: FSMContext) -> None:
    """
    –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à–∞–≥ –∫–æ—É—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ state.bot).
    """
    # get_data/update_data ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Aiogram 3
    data = await state.get_data()
    data = dict(data or {})
    data["coach_last"] = "feeling_saved"
    data["coach_last_ts"] = _utc_ts()
    await state.update_data(**data)


async def _recently_saved(state: FSMContext, within_sec: int = 180) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –ª–∏ —á—É–≤—Å—Ç–≤–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ within_sec —Å–µ–∫—É–Ω–¥.
    """
    data = await state.get_data()
    if not data:
        return False
    ts = float(data.get("coach_last_ts") or 0)
    if not ts:
        return False
    is_recent = (_utc_ts() - ts) < within_sec
    return is_recent and data.get("coach_last") == "feeling_saved"


# ===== handlers ==============================================================

@router.message(F.text == "/coach_on")
async def coach_on(msg: Message, state: FSMContext):
    await msg.answer(
        "–ö–æ—Ä–æ—Ç–∫–æ: –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ ‚Äî –ü–∞—É–∑–∞ –∫–∞–∫ –ø—Ä–∞–≤–¥–∞ (4-2-6-2).\n"
        "–®–∞–≥–∏: –í–¥–æ—Ö 4 ‚Üí –ü–∞—É–∑–∞ 2 ‚Üí –í—ã–¥–æ—Ö 6 ‚Üí –ü–∞—É–∑–∞ 2.\n"
        "–ü—Ä–∏–∑–Ω–∞–∫: –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã?\n"
        "–ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –∏ –æ—Ç–º–µ—Ç—å –æ—â—É—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.\n\n"
        "‚è± –¢–∞–π–º–µ—Ä 60 —Å–µ–∫"
    )
    await state.set_state(CoachStates.wait_feeling)


@router.message(CoachStates.wait_feeling, F.text)
async def coach_feeling(msg: Message, state: FSMContext):
    text = (msg.text or "").strip()

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è ¬´–æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ¬ª
    if not text or len(text.split()) > 2 or len(text) > 32:
        await msg.answer("–û–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ª–æ–≤–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÇ")
        return

    # —Ç—É—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # save_feeling(user_id=msg.from_user.id, feeling=text)

    await _mark_feeling_saved(state)
    await state.clear()
    await msg.answer("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /coach_on –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é: /menu")


# –ú—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ü–õ–û–°–ö–ò–ô —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥—ã), –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏
@router.message(F.text & ~F.text.startswith("/"))
async def coach_post_saved_soft_guard(msg: Message, state: FSMContext):
    if await _recently_saved(state):
        await msg.answer(
            "–Ø —É–∂–µ –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –æ—â—É—â–µ–Ω–∏–µ üëå\n"
            "–ù–∞—á–∞—Ç—å –µ—â—ë —Ä–∞–∑ ‚Äî /coach_on, –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚Äî /menu"
        )
        return
    # –∏–Ω–∞—á–µ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è ‚Äî –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
