# app/routers/minicasting.py
from __future__ import annotations

import json
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.reply import main_menu_kb, BTN_CASTING
# –í–ê–ñ–ù–û: –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äì app.storage.repo
from app.storage.repo import save_casting_session, save_feedback, log_progress_event

router = Router(name="minicasting")


# ===========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (inline)
# ===========================
def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s0:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s0:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s0:next")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


def kb_q1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s1:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s1:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s1:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


def kb_q2() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s2:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s2:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s2:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


def kb_q3() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–∞—É–∑–∞", callback_data="mc:s3:pause"),
         InlineKeyboardButton(text="–¢–µ–º–±—Ä", callback_data="mc:s3:timbre"),
         InlineKeyboardButton(text="–¢–æ –∂–µ", callback_data="mc:s3:same")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


def kb_rate() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî•", callback_data="mc:rate:fire"),
         InlineKeyboardButton(text="üëå", callback_data="mc:rate:ok"),
         InlineKeyboardButton(text="üòê", callback_data="mc:rate:meh")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mc:rate:skip")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


# ===========================
# FSM
# ===========================
class MC(StatesGroup):
    wait_word = State()  # –∂–¥—ë–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏


# ===========================
# Entry (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
# ===========================
async def start_minicasting(target: Message | CallbackQuery, state: FSMContext) -> None:
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∏–∑ message –∏–ª–∏ –∏–∑ callback): —Å—Ç–∞—Ä—Ç –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥–∞.
    """
    if isinstance(target, CallbackQuery):
        await target.answer()
        m = target.message
    else:
        m = target

    await state.clear()
    await state.update_data(ans=[])  # –±—É–¥–µ–º –∫–æ–ø–∏—Ç—å –æ—Ç–≤–µ—Ç—ã Q1/Q2
    await m.answer(
        "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫ ‚Äî –ø–∞—É–∑–∞, —Ç–µ–º–±—Ä, –æ—â—É—â–µ–Ω–∏–µ. "
        "–ù–∞ –≤—ã—Ö–æ–¥–µ ‚Äî 1 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏ –∫—Ä—É–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
    )
    await m.answer("–≠—Ç–æ –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: 2‚Äì3 –º–∏–Ω. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ. –ì–æ—Ç–æ–≤?", reply_markup=kb_start())


# –°—Ç–∞—Ä—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ ReplyKeyboard (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ) –∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /casting
@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def start_minicasting_btn(msg: Message, state: FSMContext):
    await start_minicasting(msg, state)


@router.message(StateFilter("*"), Command("casting"))
async def start_minicasting_cmd(msg: Message, state: FSMContext):
    await start_minicasting(msg, state)


# ===========================
# –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞
# ===========================
@router.callback_query(StateFilter("*"), F.data.in_({"mc:s0:yes", "mc:s0:no", "mc:s0:next"}))
async def mc_step_1(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await cq.message.answer("Q1. –£–¥–µ—Ä–∂–∞–ª –ª–∏ 2 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–∑–æ–π?", reply_markup=kb_q1())


@router.callback_query(StateFilter("*"), F.data.startswith("mc:s1:"))
async def mc_step_2(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    ans = cq.data.split(":")[-1]  # yes|no|next
    data = await state.get_data()
    answers = list(data.get("ans", []))
    if ans in {"yes", "no"}:
        answers.append(ans)
        await state.update_data(ans=answers)

    await cq.message.answer("Q2. –ì–æ–ª–æ—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∑–≤—É—á–∞–ª —Ä–æ–≤–Ω–µ–µ?", reply_markup=kb_q2())


@router.callback_query(StateFilter("*"), F.data.startswith("mc:s2:"))
async def mc_step_3(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    ans = cq.data.split(":")[-1]  # yes|no|next
    data = await state.get_data()
    answers = list(data.get("ans", []))
    if ans in {"yes", "no"}:
        answers.append(ans)
        await state.update_data(ans=answers)

    await cq.message.answer("Q3. –ß—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–µ–µ?", reply_markup=kb_q3())


@router.callback_query(StateFilter("*"), F.data.startswith("mc:s3:"))
async def mc_summary(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    diff = cq.data.split(":")[-1]  # pause|timbre|same
    data = await state.get_data()
    answers: list[str] = list(data.get("ans", []))

    tip = (
        "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: –Ω–µ –¥–∞–≤–∞–π –ø–∞—É–∑–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è."
        if answers[:2].count("no") >= 1
        else "–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ –∫—É—Ä—Å –∏ —Ç–µ–º–ø."
    )

    await cq.message.answer(f"–ò—Ç–æ–≥: {tip}")
    await cq.message.answer(
        "–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç üî•/üëå/üòê –∏ –¥–æ–±–∞–≤—å 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
        reply_markup=kb_rate(),
    )

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é (–µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç repo: tg_id + payload:str)
    try:
        payload = json.dumps({
            "answers": answers,
            "diff": diff,
            "result": "pause" if "no" in answers[:2] else "ok",
        }, ensure_ascii=False)
        await save_casting_session(tg_id=cq.from_user.id, payload=payload)
        await log_progress_event(tg_id=cq.from_user.id, kind="minicasting")
    except Exception:
        # –Ω–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏
        pass


# ===========================
# –§–∏–¥–±—ç–∫ (—ç–º–æ–¥–∑–∏ + —Å–ª–æ–≤–æ)
# ===========================
_EMOJI_TO_RATING = {"fire": 3, "ok": 2, "meh": 1}

@router.callback_query(StateFilter("*"), F.data.startswith("mc:rate:"))
async def mc_rate(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    rate = cq.data.split(":")[-1]  # fire|ok|meh|skip

    if rate == "skip":
        await state.clear()
        await cq.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return

    await state.update_data(emoji=rate)
    await state.set_state(MC.wait_word)
    await cq.message.answer(
        "–ü—Ä–∏–Ω—è–ª —ç–º–æ–¥–∑–∏. –ú–æ–∂–µ—à—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ–ø–∏—Å–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140 —Å–∏–º–≤) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´/menu¬ª."
    )


@router.message(MC.wait_word)
async def mc_word(msg: Message, state: FSMContext):
    data = await state.get_data()
    emoji = str(data.get("emoji", "ok"))
    phrase = (msg.text or "").strip()[:140] if msg.text else ""

    try:
        rating = _EMOJI_TO_RATING.get(emoji, None)
        text = (f"emoji={emoji}; " + phrase).strip()
        await save_feedback(tg_id=msg.from_user.id, text=text, rating=rating)
    except Exception:
        pass

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())


# –ü—É–±–ª–∏—á–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –∏–º–µ–Ω–∞
mc_router = router
__all__ = ["router", "mc_router", "start_minicasting", "start_minicasting_cmd"]
