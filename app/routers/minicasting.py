from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb, BTN_CASTING
from app.storage.repo_extras import (
    save_casting_session, save_feedback, log_progress_event
)

router = Router(name="minicasting")


# === –°–æ—Å—Ç–æ—è–Ω–∏—è ==============================================================

class MiniCasting(StatesGroup):
    q = State()
    feedback = State()


# === –í–æ–ø—Ä–æ—Å—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===================================================

QUESTIONS = [
    "–£–¥–µ—Ä–∂–∞–ª –ª–∏ 2 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–∑–æ–π? (–î–∞/–ù–µ—Ç)",
    "–ì–æ–ª–æ—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∑–≤—É—á–∞–ª —Ä–æ–≤–Ω–µ–µ? (–î–∞/–ù–µ—Ç)",
    "–ß—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–µ–µ? (–ü–∞—É–∑–∞/–¢–µ–º–±—Ä/–¢–æ –∂–µ)",
    "–õ—ë–≥–∫–æ—Å—Ç—å –¥—ã—Ö–∞–Ω–∏—è –ø–æ –æ—â—É—â–µ–Ω–∏—è–º? (–î–∞/–ù–µ—Ç)",
    "–•–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫—Ä—É–≥ —Å–µ–π—á–∞—Å? (–î–∞/–ù–µ—Ç)",
]


def _yn_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data="mini:yes")
    kb.button(text="–ù–µ—Ç", callback_data="mini:no")
    kb.button(text="–î–∞–ª—å—à–µ", callback_data="mini:next")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="mc:skip")
    kb.adjust(2, 2)
    return kb.as_markup()


def _feedback_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üî•", callback_data="fb:fire")
    kb.button(text="üëå", callback_data="fb:ok")
    kb.button(text="üòê", callback_data="fb:meh")
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mc:skip")
    kb.adjust(3, 1)
    return kb.as_markup()


# === –ü—É–±–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥—ã ========================================================

async def minicasting_entry(message: Message, state: FSMContext):
    """–ï–¥–∏–Ω—ã–π —Å—Ç–∞—Ä—Ç –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥–∞ (–∫–Ω–æ–ø–∫–∞/–∫–æ–º–∞–Ω–¥–∞/–¥–∏–ø–ª–∏–Ω–∫)."""
    await state.set_state(MiniCasting.q)
    await state.update_data(q=0, answers=[], emoji=None)
    await message.answer("–≠—Ç–æ –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: 2‚Äì3 –º–∏–Ω. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ. –ì–æ—Ç–æ–≤?", reply_markup=_yn_kb())


# –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
start_minicasting = minicasting_entry


@router.message(StateFilter("*"), F.text == BTN_CASTING)
async def start_minicasting_by_button(msg: Message, state: FSMContext):
    await minicasting_entry(msg, state)


@router.message(StateFilter("*"), Command("casting", "minicasting"))
async def start_minicasting_cmd(msg: Message, state: FSMContext):
    await minicasting_entry(msg, state)


# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ä–æ—Å =========================================================

@router.callback_query(StateFilter(MiniCasting.q), F.data.startswith("mini:"))
async def on_answer(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    data = await state.get_data()
    q = int(data.get("q", 0))
    answers: list = data.get("answers", [])

    if cb.data in {"mini:yes", "mini:no"}:
        answers.append(cb.data.split(":")[1])

    if cb.data == "mini:next":
        # –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç–∞
        pass

    # ¬´–í –º–µ–Ω—é¬ª –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ ‚Äî —á–µ—Ä–µ–∑ mc:skip
    # —à–∞–≥ –≤–ø–µ—Ä—ë–¥
    q += 1

    if q <= len(QUESTIONS):
        await state.update_data(q=q, answers=answers)
        await cb.message.edit_text(QUESTIONS[q - 1], reply_markup=_yn_kb())
    else:
        # –º–∏–Ω–∏-—Ä–µ–∑—é–º–µ
        tip = "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: –Ω–µ –¥–∞–≤–∞–π –ø–∞—É–∑–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è." if answers[:2].count("no") >= 1 else "–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ –∫—É—Ä—Å –∏ —Ç–µ–º–ø."
        await cb.message.edit_text(f"–ò—Ç–æ–≥: {tip}")
        await cb.message.answer(
            "–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç üî•/üëå/üòê –∏ –¥–æ–±–∞–≤—å 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
            reply_markup=_feedback_kb()
        )
        await state.set_state(MiniCasting.feedback)
        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
        try:
            await save_casting_session(cb.from_user.id, answers=answers, result=("pause" if "no" in answers[:2] else "ok"))
        except Exception:
            pass  # –Ω–µ –ª–æ–º–∞–µ–º UX


# === –û—Ç–∑—ã–≤/—Ñ–∏–Ω–∞–ª ============================================================

@router.callback_query(StateFilter(MiniCasting.feedback), F.data == "mc:skip")
async def mc_skip(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    # –∑–∞—á—Ç—ë–º —Å–æ–±—ã—Ç–∏–µ ¬´minicasting¬ª
    try:
        await log_progress_event(cb.from_user.id, kind="minicasting", level=None)
    except Exception:
        pass
    await state.clear()
    await cb.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())


@router.callback_query(StateFilter(MiniCasting.feedback), F.data.startswith("fb:"))
async def on_fb_emoji(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    emoji = cb.data.split(":", 1)[1]
    await state.update_data(emoji=emoji)
    await cb.message.answer("–ü—Ä–∏–Ω—è–ª —ç–º–æ–¥–∑–∏. –ú–æ–∂–µ—à—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ–ø–∏—Å–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140 —Å–∏–º–≤) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´/menu¬ª.")


@router.message(StateFilter(MiniCasting.feedback))
async def on_fb_phrase(msg: Message, state: FSMContext):
    data = await state.get_data()
    emoji = data.get("emoji")
    phrase = (msg.text or "")[:140] if msg.text else None
    try:
        await save_feedback(msg.from_user.id, emoji=emoji, phrase=phrase)
    except Exception:
        pass
    # –∑–∞—á—Ç—ë–º —Å–æ–±—ã—Ç–∏–µ ¬´minicasting¬ª
    try:
        await log_progress_event(msg.from_user.id, kind="minicasting", level=None)
    except Exception:
        pass

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())


# === –≠–∫—Å–ø–æ—Ä—Ç ================================================================

__all__ = ["router", "minicasting_entry", "start_minicasting"]
