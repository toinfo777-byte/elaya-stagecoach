# app/routers/minicasting.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

mc_router = Router(name="minicasting")  # <-- main.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç mc_router

# ---------- UI ----------
def _kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",     callback_data="mc:s0:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç",    callback_data="mc:s0:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s0:next")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _kb_q1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="mc:s1:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s1:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s1:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _kb_q2() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞",  callback_data="mc:s2:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s2:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s2:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _kb_q3() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–∞—É–∑–∞",  callback_data="mc:s3:pause"),
         InlineKeyboardButton(text="–¢–µ–º–±—Ä",  callback_data="mc:s3:timbre"),
         InlineKeyboardButton(text="–¢–æ –∂–µ",  callback_data="mc:s3:same")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _kb_rate() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî•", callback_data="mc:rate:fire"),
         InlineKeyboardButton(text="üëå", callback_data="mc:rate:ok"),
         InlineKeyboardButton(text="üòê", callback_data="mc:rate:meh")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mc:rate:skip")],
    ])

class McState(StatesGroup):
    wait_text = State()

# ---------- entry ----------
async def start_minicasting(obj: Message | CallbackQuery, state: FSMContext | None = None):
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        m = obj.message
    else:
        m = obj
    if state:
        await state.clear()
    await m.answer("üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫ 2‚Äì3 –º–∏–Ω. –ì–æ—Ç–æ–≤?",
                   reply_markup=_kb_start())

@mc_router.message(Command("casting"))
async def cmd_casting(m: Message, state: FSMContext):
    await start_minicasting(m, state)

# ---------- steps ----------
@mc_router.callback_query(StateFilter("*"), F.data.in_({"mc:s0:yes", "mc:s0:no", "mc:s0:next"}))
async def mc_step1(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.update_data(s0=cb.data.split(":")[-1])
    await cb.message.answer("Q1. –£–¥–µ—Ä–∂–∞–ª –ª–∏ 2 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–∑–æ–π?",
                            reply_markup=_kb_q1())

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s1:"))
async def mc_step2(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.update_data(s1=cb.data.split(":")[-1])
    await cb.message.answer("Q2. –ì–æ–ª–æ—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∑–≤—É—á–∞–ª —Ä–æ–≤–Ω–µ–µ?",
                            reply_markup=_kb_q2())

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s2:"))
async def mc_step3(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.update_data(s2=cb.data.split(":")[-1])
    await cb.message.answer("Q3. –ß—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–µ–µ?", reply_markup=_kb_q3())

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s3:"))
async def mc_summary(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.update_data(s3=cb.data.split(":")[-1])
    data = await state.get_data()
    tip = "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: –Ω–µ –¥–∞–≤–∞–π –ø–∞—É–∑–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è." if data.get("s1") == "no" \
        else "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: —É–¥–µ—Ä–∂–∏–≤–∞–π —Ç–µ–º–±—Ä –ø–æ—Å–ª–µ –ø–∞—É–∑—ã."
    await cb.message.answer(f"–ò—Ç–æ–≥: {tip}\n–°–¥–µ–ª–∞–π 1 –∫—Ä—É–≥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤–µ—Ä–Ω–∏—Å—å.")
    await cb.message.answer("–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç üî•/üëå/üòê –∏ –¥–æ–±–∞–≤—å 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
                            reply_markup=_kb_rate())

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:rate:"))
async def mc_rate(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    rate = cb.data.split(":")[-1]
    await state.update_data(rate=rate)
    if rate == "skip":
        await state.clear()
        from app.routers.help import show_main_menu
        await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        return await show_main_menu(cb)
    await state.set_state(McState.wait_text)
    await cb.message.answer("–ü—Ä–∏–Ω—è–ª —ç–º–æ–¥–∑–∏. –ú–æ–∂–µ—à—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ–ø–∏—Å–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140 —Å–∏–º–≤) "
                            "–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´/menu¬ª.")

@mc_router.message(McState.wait_text, F.text.len() > 0)
async def mc_text_feedback(m: Message, state: FSMContext):
    txt = (m.text or "").strip()[:140]
    try:
        from app.storage.repo_extras import save_feedback, log_progress_event
        data = await state.get_data()
        await save_feedback(user_id=m.from_user.id, emoji=data.get("rate"), phrase=txt)
        await log_progress_event(m.from_user.id, kind="minicasting", meta=None)
    except Exception:
        pass
    await state.clear()
    from app.routers.help import show_main_menu
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
    await show_main_menu(m)
