from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.routers.help import show_main_menu
try:
    from app.storage.repo_extras import save_casting_session, save_feedback, log_progress_event
except Exception:
    async def save_casting_session(*args, **kwargs): return None
    async def save_feedback(*args, **kwargs): return None
    async def log_progress_event(*args, **kwargs): return None

mc_router = Router(name="minicasting")


class McState(StatesGroup):
    wait_word = State()


def _start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s0:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s0:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s0:next")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _rate_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî•", callback_data="mc:rate:fire"),
         InlineKeyboardButton(text="üëå", callback_data="mc:rate:ok"),
         InlineKeyboardButton(text="üòê", callback_data="mc:rate:meh")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="mc:rate:skip")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


async def start_minicasting(obj: Message | CallbackQuery, state: FSMContext | None = None):
    m = obj.message if isinstance(obj, CallbackQuery) else obj
    if isinstance(obj, CallbackQuery):
        await obj.answer()
    if state:
        await state.clear()
    await m.answer("üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫ 2‚Äì3 –º–∏–Ω. –ì–æ—Ç–æ–≤?", reply_markup=_start_kb())


@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s0:"))
async def mc_begin(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("Q1. –£–¥–µ—Ä–∂–∞–ª –ª–∏ 2 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–∑–æ–π?")
    await cb.message.answer("–í—ã–±–µ—Ä–∏: –î–∞ / –ù–µ—Ç", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s1:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s1:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s1:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ]))

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s1:"))
async def mc_q2(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("Q2. –ì–æ–ª–æ—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∑–≤—É—á–∞–ª —Ä–æ–≤–Ω–µ–µ?")
    await cb.message.answer("–í—ã–±–µ—Ä–∏: –î–∞ / –ù–µ—Ç", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="mc:s2:yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mc:s2:no")],
        [InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data="mc:s2:next"),
         InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ]))

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:s2:"))
async def mc_summary(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer(
        "–ò—Ç–æ–≥: –¥–µ—Ä–∂–∏ –ø–∞—É–∑—É –∏ –Ω–µ —Ä–æ–Ω—è–π —Ç–µ–º–±—Ä.\n"
        "–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç –∏ –¥–æ–±–∞–≤—å 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
        reply_markup=_rate_kb()
    )
    try:
        await save_casting_session(cb.from_user.id, answers=[], result="ok")
        await log_progress_event(cb.from_user.id, kind="minicasting", meta={})
    except Exception:
        pass

@mc_router.callback_query(StateFilter("*"), F.data.startswith("mc:rate:"))
async def mc_rate(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    rate = cb.data.split(":")[-1]  # fire|ok|meh|skip
    await state.update_data(emoji=None if rate == "skip" else rate)
    if rate == "skip":
        await cb.message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
        return await show_main_menu(cb)
    await state.set_state(McState.wait_word)
    await cb.message.answer("–ü—Ä–∏–Ω—è–ª —ç–º–æ–¥–∑–∏. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ–ø–∏—à–∏ –æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140 —Å–∏–º–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –í –º–µ–Ω—é¬ª.")

@mc_router.message(McState.wait_word)
async def mc_word(msg: Message, state: FSMContext):
    data = await state.get_data()
    phrase = (msg.text or "").strip()[:140]
    try:
        await save_feedback(msg.from_user.id, emoji=data.get("emoji", "ok"), phrase=phrase)
    except Exception:
        pass
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.")
    await show_main_menu(msg)
