# app/routers/minicasting.py
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.storage.repo_extras import save_casting_session, save_feedback
from app.keyboards.reply import main_menu_kb, BTN_CASTING
from app.keyboards.inline import mc_feedback_kb

router = Router(name="minicasting")

class MiniCasting(StatesGroup):
    q = State()
    answers = State()
    feedback = State()

QUESTIONS = [
    "–£–¥–µ—Ä–∂–∞–ª –ª–∏ 2 —Å–µ–∫ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Ñ—Ä–∞–∑–æ–π? (–î–∞/–ù–µ—Ç)",
    "–ì–æ–ª–æ—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã –∑–≤—É—á–∞–ª —Ä–æ–≤–Ω–µ–µ? (–î–∞/–ù–µ—Ç)",
    "–ß—Ç–æ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–µ–µ? (–ü–∞—É–∑–∞/–¢–µ–º–±—Ä/–¢–æ –∂–µ)",
    "–õ—ë–≥–∫–æ—Å—Ç—å –¥—ã—Ö–∞–Ω–∏—è –ø–æ –æ—â—É—â–µ–Ω–∏—è–º? (–î–∞/–ù–µ—Ç)",
    "–•–æ—á–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫—Ä—É–≥ —Å–µ–π—á–∞—Å? (–î–∞/–ù–µ—Ç)",
]

def yn_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data="mini:yes")
    kb.button(text="–ù–µ—Ç", callback_data="mini:no")
    kb.button(text="–î–∞–ª—å—à–µ", callback_data="mini:next")
    kb.button(text="–í –º–µ–Ω—é", callback_data="mini:menu")
    kb.adjust(2, 2)
    return kb.as_markup()

async def _start_minicasting_core(msg: Message, state: FSMContext):
    await state.set_state(MiniCasting.q)
    await state.update_data(q=0, answers=[])
    await msg.answer("–≠—Ç–æ –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥: 2‚Äì3 –º–∏–Ω. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ. –ì–æ—Ç–æ–≤?", reply_markup=yn_kb())

@router.message(F.text == BTN_CASTING)
async def start_minicasting(msg: Message, state: FSMContext):
    await _start_minicasting_core(msg, state)

@router.message(StateFilter("*"), Command("casting"))
async def start_minicasting_cmd(msg: Message, state: FSMContext):
    await _start_minicasting_core(msg, state)

@router.callback_query(F.data.startswith("mini:"), MiniCasting.q)
async def on_answer(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    q = data["q"]
    answers = data["answers"]

    if cb.data == "mini:menu":
        await state.clear()
        await cb.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return await cb.answer()

    if cb.data in {"mini:yes", "mini:no"}:
        answers.append(cb.data.split(":")[1])

    q += 1
    if q <= len(QUESTIONS):
        await state.update_data(q=q, answers=answers)
        await cb.message.edit_text(QUESTIONS[q-1], reply_markup=yn_kb())
        return await cb.answer()

    # –∏—Ç–æ–≥
    tip = "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞: –Ω–µ –¥–∞–≤–∞–π –ø–∞—É–∑–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è." if answers[:2].count("no") >= 1 else "–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ –∫—É—Ä—Å –∏ —Ç–µ–º–ø."
    await cb.message.edit_text(f"–ò—Ç–æ–≥: {tip}")
    await cb.message.answer("–û—Ü–µ–Ω–∏ –æ–ø—ã—Ç üî•/üëå/üòê –∏ –¥–æ–±–∞–≤—å 1 —Å–ª–æ–≤–æ-–æ—â—É—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).", reply_markup=mc_feedback_kb())
    await state.set_state(MiniCasting.feedback)
    try:
        await save_casting_session(cb.from_user.id, answers=answers, result=("pause" if "no" in answers[:2] else "ok"))
    except Exception:
        pass
    await cb.answer()

# –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data == "mc:skip", StateFilter(MiniCasting.feedback, MiniCasting.q))
async def mc_skip(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await cb.answer()

# –≠–º–æ–¥–∑–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–µ–∫—É—â–∏–º–∏ fb:* payload'–∞–º–∏)
@router.callback_query(F.data.startswith("fb:"), MiniCasting.feedback)
async def on_fb_emoji(cb: CallbackQuery, state: FSMContext):
    # fb:fire | fb:ok | fb:meh  (–Ω–µ —ç–º–æ–¥–∑–∏-—Å–∞–º —Å–∏–º–≤–æ–ª, –∞ –∫–æ–¥)
    emoji_code = cb.data.split(":", 1)[1]
    mapping = {"fire": "üî•", "ok": "üëå", "meh": "üòê"}
    emoji = mapping.get(emoji_code, "üëå")
    try:
        await save_feedback(cb.from_user.id, emoji=emoji, phrase=None)
    except Exception:
        pass
    await cb.message.answer("–ü—Ä–∏–Ω—è–ª. –ú–æ–∂–µ—à—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –¥–æ–ø–∏—Å–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ (–¥–æ 140 —Å–∏–º–≤) –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–í –º–µ–Ω—é¬ª.")
    await cb.answer()

# –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤ –º–µ–Ω—é
@router.message(MiniCasting.feedback)
async def on_fb_phrase(msg: Message, state: FSMContext):
    phrase = (msg.text or "").strip()[:140] if msg.text else ""
    try:
        await save_feedback(msg.from_user.id, emoji="üëå", phrase=phrase or None)
    except Exception:
        pass
    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–ø–∏—Å–∞–ª. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())
