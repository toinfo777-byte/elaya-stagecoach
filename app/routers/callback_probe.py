from __future__ import annotations
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

router = Router(name="callback_probe")
log = logging.getLogger("probe")

def _probe_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîò test (probe)", callback_data="probe:ping")],
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è", callback_data="go:training")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",   callback_data="go:progress")],
    ])

@router.message(Command("probe"))
async def cmd_probe(m: Message):
    await m.answer("¬∑", reply_markup=ReplyKeyboardRemove())
    await m.answer("probe: –Ω–∞–∂–º–∏ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî —è –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å callback", reply_markup=_probe_kb())

# –õ–æ–≤–∏–º –õ–Æ–ë–û–ô callback_query –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ª–æ–≥–∏—Ä—É–µ–º
@router.callback_query()
async def any_callback(cq: CallbackQuery):
    data = (cq.data or "").strip()
    log.info("probe callback: %r", data)
    # –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ ¬´–ø—Ä–æ–∂–∞–ª–∞—Å—å¬ª
    await cq.answer(f"cb: {data[:32]}", show_alert=False)

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ–º–Ω–æ–≥–æ —ç—Ö–∞ –≤ —á–∞—Ç (–Ω–µ —Å–ø–∞–º–∏–º)
    if data.startswith(("probe:", "go:")):
        await cq.message.answer(f"probe ‚úì –ø–æ–ª—É—á–µ–Ω callback: <code>{data}</code>")
