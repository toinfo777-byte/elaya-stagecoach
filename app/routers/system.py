# app/routers/system.py
from datetime import datetime, timezone
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, BotCommand,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.storage.repo import session_scope, delete_user_cascade
from app.storage.models import User

router = Router(name="system")

# –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Äî –¥–ª—è uptime
STARTED_AT = datetime.now(timezone.utc)

HELP_TEXT = (
    "–Ø ‚Äî ¬´–≠–ª–∞–π—è ‚Äî —Ç—Ä–µ–Ω–µ—Ä —Å—Ü–µ–Ω—ã¬ª.\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥\n"
    "/menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
    "/training ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n"
    "/progress ‚Äî –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –∫–∞–∫ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
    "/wipe_me ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø–∏—Å–∏\n"
    "\n–ü–æ–¥—Å–∫–∞–∑–∫–∏: –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –Ω–∏–∫–∞–∫–æ–≥–æ HTML/Markdown."
)

PRIVACY_TEXT = (
    "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫—Ä–∞—Ç–∫–æ\n"
    "‚Ä¢ –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º: id, –∏–º—è/username, –æ—Ç–≤–µ—Ç—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
    "‚Ä¢ ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª: —Ö—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫—É (–∫–æ–Ω—Ç–∞–∫—Ç, –º–æ—Ç–∏–≤–∞—Ü–∏—è) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ —Ç—Ä–µ–∫—É.\n"
    "‚Ä¢ –û—Ç–∑—ã–≤—ã: –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –≤ –æ—Ç—á—ë—Ç–∞—Ö; —Ö—Ä–∞–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç/–æ—Ü–µ–Ω–∫—É/–≥–æ–ª–æ—Å–æ–≤—ã–µ.\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë –∫–æ–º–∞–Ω–¥–æ–π /wipe_me ‚Äî –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è.\n"
    "‚Ä¢ –ë—ç–∫–∞–ø –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î —Ä–∞–∑ –≤ –¥–µ–Ω—å, —Ö—Ä–∞–Ω–µ–Ω–∏–µ 7 –¥–Ω–µ–π. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ —É –∫–æ–º–∞–Ω–¥—ã.\n"
    "–í–æ–ø—Ä–æ—Å—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —á–∞—Ç–µ, –º—ã –Ω–∞ —Å–≤—è–∑–∏."
)

VERSION = settings.version if getattr(settings, "version", None) else "dev"


def _uptime() -> str:
    delta = datetime.now(timezone.utc) - STARTED_AT
    secs = int(delta.total_seconds())
    d, secs = divmod(secs, 86400)
    h, secs = divmod(secs, 3600)
    m, s = divmod(secs, 60)
    if d:
        return f"{d}d {h:02}:{m:02}:{s:02}"
    return f"{h:02}:{m:02}:{s:02}"


@router.message(Command("help"))
async def help_cmd(m: types.Message):
    await m.answer(HELP_TEXT)


@router.message(Command("privacy"))
async def privacy_cmd(m: types.Message):
    await m.answer(PRIVACY_TEXT + "\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wipe_me")


@router.message(Command("health"))
async def health_cmd(m: types.Message):
    db_kind = "sqlite" if settings.db_url.startswith("sqlite") else "postgres"
    await m.answer(f"ok | env={settings.env} | db={db_kind} | uptime={_uptime()}")


@router.message(Command("version"))
async def version_cmd(m: types.Message):
    await m.answer(f"version: {VERSION}")


@router.message(Command("whoami"))
async def whoami_cmd(m: types.Message):
    uid = m.from_user.id
    is_admin = uid in settings.admin_ids
    un = f"@{m.from_user.username}" if m.from_user.username else "-"
    full = " ".join(filter(None, [m.from_user.first_name, m.from_user.last_name]))
    await m.answer(f"id={uid} | user={un} | name={full or '-'} | admin={is_admin}")


# ---------- /wipe_me: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ----------
class WipeFlow(StatesGroup):
    confirm = State()


def _wipe_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data="wipe_yes")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="wipe_no")],
    ])


@router.message(Command("wipe_me"))
async def wipe_me_start(m: types.Message, state: FSMContext):
    await state.set_state(WipeFlow.confirm)
    await m.answer(
        "‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—ç—Ç—é–¥—ã, —Ç–µ—Å—Ç—ã, —Å–æ–±—ã—Ç–∏—è, –ª–∏–¥—ã, –∑–∞—è–≤–∫–∏). "
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=_wipe_kb()
    )


@router.callback_query(WipeFlow.confirm, F.data.in_({"wipe_yes", "wipe_no"}))
async def wipe_me_confirm(cb: CallbackQuery, state: FSMContext):
    if cb.data == "wipe_no":
        await state.clear()
        await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
        await cb.answer()
        return

    # wipe_yes
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=cb.from_user.id).first()
        if u:
            delete_user_cascade(s, u.id)
    await state.clear()
    try:
        await cb.message.edit_text("–ì–æ—Ç–æ–≤–æ. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ /start.")
    except Exception:
        await cb.message.answer("–ì–æ—Ç–æ–≤–æ. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∑–∞—è–≤–∫–∏ –∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ /start.")
    await cb.answer()


# ---------- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ----------
async def setup_commands(bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞."""
    cmds = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="wipe_me", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
    ]
    await bot.set_my_commands(cmds)
