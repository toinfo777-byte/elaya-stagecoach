# app/routers/system.py
from datetime import datetime, timezone
from aiogram import Router, F, types
from aiogram.filters import Command
from app.config import settings
from app.storage.repo import session_scope
from app.storage.models import User

router = Router(name="system")

# –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚Äî –¥–ª—è uptime
STARTED_AT = datetime.now(timezone.utc)

HELP_TEXT = (
    "–Ø ‚Äî ¬´–≠–ª–∞–π—è ‚Äî —Ç—Ä–µ–Ω–µ—Ä —Å—Ü–µ–Ω—ã¬ª.\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –Ω–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥\n"
    "/menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
    "/training ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n"
    "/progress ‚Äî –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –∫–∞–∫ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
    "/wipe_me ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø–∏—Å–∏\n"
    "\n–ü–æ–¥—Å–∫–∞–∑–∫–∏: –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, –Ω–∏–∫–∞–∫–æ–≥–æ HTML/Markdown."
)

PRIVACY_TEXT = (
    "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫—Ä–∞—Ç–∫–æ\n"
    "‚Ä¢ –•—Ä–∞–Ω–∏–º –º–∏–Ω–∏–º—É–º: id, –∏–º—è/username, –æ—Ç–≤–µ—Ç—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç—é–¥–æ–≤.\n"
    "‚Ä¢ –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë –∫–æ–º–∞–Ω–¥–æ–π /wipe_me ‚Äî –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è.\n"
    "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ ¬´–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥–∞¬ª –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n"
    "‚Ä¢ –ë–∞–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –±—ç–∫–∞–ø —Ä–∞–∑ –≤ –¥–µ–Ω—å, —Ö—Ä–∞–Ω–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
    "–í–æ–ø—Ä–æ—Å—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –≤ —á–∞—Ç–µ, –º—ã –Ω–∞ —Å–≤—è–∑–∏."
)

VERSION = settings.version if getattr(settings, "version", None) else "dev"

def _uptime() -> str:
    delta = datetime.now(timezone.utc) - STARTED_AT
    # –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∏–¥: d hh:mm:ss
    secs = int(delta.total_seconds())
    d, secs = divmod(secs, 86400)
    h, secs = divmod(secs, 3600)
    m, s = divmod(secs, 60)
    if d:
        return f"{d}d {h:02}:{m:02}:{s:02}"
    return f"{h:02}:{m:02}:{s:02}"

@router.message(Command("help"))
async def help_cmd(m: types.Message):
    await m.answer(HELP_TEXT)

@router.message(Command("privacy"))
async def privacy_cmd(m: types.Message):
    await m.answer(PRIVACY_TEXT + "\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wipe_me")

@router.message(Command("health"))
async def health_cmd(m: types.Message):
    db_kind = "sqlite" if settings.db_url.startswith("sqlite") else "postgres"
    await m.answer(f"ok | env={settings.env} | db={db_kind} | uptime={_uptime()}")

@router.message(Command("version"))
async def version_cmd(m: types.Message):
    await m.answer(f"version: {VERSION}")

@router.message(Command("whoami"))
async def whoami_cmd(m: types.Message):
    uid = m.from_user.id
    is_admin = uid in settings.admin_ids
    un = f"@{m.from_user.username}" if m.from_user.username else "-"
    full = " ".join(filter(None, [m.from_user.first_name, m.from_user.last_name]))
    await m.answer(f"id={uid} | user={un} | name={full or '-'} | admin={is_admin}")
