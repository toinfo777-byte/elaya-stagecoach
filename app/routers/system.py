from __future__ import annotations

import importlib
import logging
from typing import Iterable, Awaitable

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove,
)

router = Router(name="system")
log = logging.getLogger("system")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",    callback_data="go:training")],
        [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",      callback_data="go:casting")],
        [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",       callback_data="go:leader")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",      callback_data="go:progress")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å / FAQ",      callback_data="go:help")],
        [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",          callback_data="go:privacy")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",         callback_data="go:settings")],
        [InlineKeyboardButton(text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data="go:extended")],
    ])

MENU_TEXT = (
    "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
    "üèãÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
    "üé≠ <b>–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥</b> ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
    "üß≠ <b>–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞</b> ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
    "üìà <b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b> ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
    "üí¨ <b>–ü–æ–º–æ—â—å / FAQ</b> ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî –ø—Ä–æ—Ñ–∏–ª—å.\n"
    "üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞</b> ‚Äî –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ.\n"
    "‚≠ê <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b> ‚Äî —Å–∫–æ—Ä–æ."
)

async def _show_menu(obj: Message | CallbackQuery):
    """–°–Ω—è—Ç—å –ª–∏–ø–∫—É—é reply-–∫–ª–∞–≤—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–∑ 8 –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        await obj.message.answer("¬∑", reply_markup=ReplyKeyboardRemove())
        await obj.message.answer(MENU_TEXT, reply_markup=_menu_kb())
    else:
        await obj.answer("¬∑", reply_markup=ReplyKeyboardRemove())
        await obj.answer(MENU_TEXT, reply_markup=_menu_kb())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Dynamic import helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _call_optional(module: str, candidates: Iterable[str], *args, **kwargs) -> bool:
    try:
        mod = importlib.import_module(module)
    except Exception:
        return False
    for name in candidates:
        fn = getattr(mod, name, None)
        if callable(fn):
            res = fn(*args, **kwargs)
            if isinstance(res, Awaitable):
                await res
            return True
    return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(CommandStart(deep_link=False))
async def cmd_start(m: Message, state: FSMContext):
    await _show_menu(m)

@router.message(Command("menu"))
async def cmd_menu(m: Message, state: FSMContext):
    await _show_menu(m)

@router.message(Command("fixmenu"))
async def cmd_fixmenu(m: Message):
    await m.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await _show_menu(m)

@router.message(Command("ping"))
async def cmd_ping(m: Message):
    await m.answer("pong üü¢")

@router.message(Command("cancel"))
async def cmd_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("‚Ü©Ô∏è –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π.")
    await _show_menu(m)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–µ—Ä–µ—Ö–≤–∞—Ç ¬´–ª–∏–ø–∫–æ–π¬ª reply-–∫–ª–∞–≤—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TXT_TO_GO = {
    "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è":  "go:training",
    "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥":    "go:casting",
    "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞":     "go:leader",
    "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":    "go:progress",
    "üí¨ –ü–æ–º–æ—â—å":          "go:help",
    "üí¨ –ü–æ–º–æ—â—å / FAQ":    "go:help",
    "üîê –ü–æ–ª–∏—Ç–∏–∫–∞":        "go:privacy",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":       "go:settings",
    "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è": "go:extended",
    "–ú–µ–Ω—é":               "go:menu",
    "–í –º–µ–Ω—é":             "go:menu",
    "üè† –í –º–µ–Ω—é":          "go:menu",
}
@router.message(F.text.in_(set(TXT_TO_GO.keys())))
async def txt_redirect(m: Message, state: FSMContext):
    await m.answer("¬∑", reply_markup=ReplyKeyboardRemove())
    # —ç–º—É–ª–∏—Ä—É–µ–º ¬´–Ω–∞–∂–∞—Ç–∏–µ¬ª –Ω—É–∂–Ω–æ–π go:* –∫–Ω–æ–ø–∫–∏
    class _FakeCQ:
        def __init__(self, message, data): self.message, self.data = message, data
        async def answer(self): pass
    await cb_go_any(_FakeCQ(m, TXT_TO_GO[m.text]), state)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Callback go:* + –æ–±—â–∏–π –ª–æ–≥ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query()
async def cb_any_log(cq: CallbackQuery):
    log.info("callback: %r", (cq.data or "").strip())

@router.callback_query(F.data.startswith("go:"))
async def cb_go_any(cq: CallbackQuery, state: FSMContext):
    data = (cq.data or "").strip()
    await cq.answer()  # —É–±–∏—Ä–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª –≤ –∫–ª–∏–µ–Ω—Ç–µ
    log.info("go:* -> %s", data)

    if data == "go:menu":
        await _show_menu(cq); return

    if data == "go:training":
        # (Message, state)
        if await _call_optional("app.routers.training",
                                ("show_training_levels", "open_training", "start_training"),
                                cq.message, state):
            return
        await cq.message.answer("üèãÔ∏è ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."); return

    if data == "go:progress":
        # (Message)
        if await _call_optional("app.routers.progress",
                                ("show_progress", "open_progress"),
                                cq.message):
            return
        await cq.message.answer("üìà ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); return

    if data == "go:leader":
        if await _call_optional("app.routers.leader",
                                ("open_leader","show_leader","leader_entry","start_leader"),
                                cq.message, state):
            return
        await cq.message.answer("üß≠ ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."); return

    if data == "go:casting":
        if await _call_optional("app.routers.minicasting",
                                ("open_minicasting","show_minicasting","mc_entry","start_minicasting"),
                                cq.message, state):
            return
        await cq.message.answer("üé≠ ¬´–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥¬ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω."); return

    if data == "go:help":
        if await _call_optional("app.routers.help", ("show_help",), cq):
            return
        # –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ help –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é
        await _show_menu(cq); return

    if data == "go:privacy":
        if await _call_optional("app.routers.privacy", ("show_privacy","open_privacy"), cq):
            return
        await _show_menu(cq); return

    if data == "go:settings":
        if await _call_optional("app.routers.settings", ("show_settings","open_settings"), cq):
            return
        await _show_menu(cq); return

    if data == "go:extended":
        if await _call_optional("app.routers.extended", ("open_extended","show_extended","extended_entry"), cq):
            return
        await cq.message.answer("‚≠êÔ∏è ¬´–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬ª ‚Äî –ø–æ–∑–∂–µ."); return

    # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    await _show_menu(cq)
