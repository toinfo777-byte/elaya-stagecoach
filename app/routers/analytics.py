from __future__ import annotations

import os
from datetime import datetime, timedelta
from collections import defaultdict

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from sqlalchemy import inspect as sqla_inspect
from sqlalchemy.sql.sqltypes import DateTime, Date

from app.storage.repo import session_scope
from app.storage.models import User, DrillRun

# Event –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ
try:
    from app.storage.models import Event  # type: ignore
except Exception:  # –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è MetricEvent
    Event = None  # type: ignore[misc,assignment]

router = Router(name="analytics")


# ‚Äî‚Äî‚Äî –ø—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ‚Äî‚Äî‚Äî
def _admin_ids() -> set[int]:
    # 1) –∏–∑ settings.ADMIN_IDS
    try:
        from app.config import settings  # type: ignore
        ids = getattr(settings, "ADMIN_IDS", None)
        if ids:
            # –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–ø—è—Ç—ã–º–∏
            if isinstance(ids, (list, tuple, set)):
                return {int(x) for x in ids}
            if isinstance(ids, str):
                return {int(x) for x in ids.split(",") if x.strip()}
    except Exception:
        pass
    # 2) –∏–∑ ENV
    env = os.getenv("ADMIN_IDS") or os.getenv("ADMIN_TG_IDS") or ""
    return {int(x) for x in env.replace(";", ",").split(",") if x.strip().isdigit()}


def _is_admin(uid: int) -> bool:
    ids = _admin_ids()
    return not ids or uid in ids  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–µ —Ä–µ–∂–µ–º –¥–æ—Å—Ç—É–ø (dev)


# ‚Äî‚Äî‚Äî /traffic [days] ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî‚Äî‚Äî
@router.message(Command("traffic"))
async def traffic_report(m: Message):
    if not _is_admin(m.from_user.id):
        return

    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ /traffic 7
    try:
        parts = (m.text or "").strip().split()
        days = int(parts[1]) if len(parts) > 1 else 7
    except Exception:
        days = 7
    since = datetime.utcnow() - timedelta(days=days)

    with session_scope() as s:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        users = s.query(User).all()
        by_src_users_total = defaultdict(int)
        by_src_new_since = defaultdict(int)
        for u in users:
            src = (u.source or "‚Äî")
            by_src_users_total[src] += 1
            try:
                if getattr(u, "consent_at", None) and u.consent_at >= since:
                    by_src_new_since[src] += 1
            except Exception:
                pass

        # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        by_src_started = defaultdict(int)
        by_src_finished = defaultdict(int)

        mapper = sqla_inspect(DrillRun)
        dt_col = next((c for c in mapper.columns if isinstance(c.type, (DateTime, Date))), None)

        q = s.query(DrillRun).join(User, DrillRun.user_id == User.id)
        if dt_col is not None:
            q = q.filter(dt_col >= since)
        runs = q.all()
        for r in runs:
            # —Å—á–∏—Ç–∞–µ–º start/finish –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø–æ success_bool
            src = (getattr(r, "user", None).source if hasattr(r, "user") and r.user else None)  # type: ignore
            if src is None:
                # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å ‚Äî –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—Ä–∞—Ç—å –Ω–µ –±—É–¥–µ–º; –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–º "‚Äî"
                src = "‚Äî"
            by_src_started[src] += 1
            try:
                if getattr(r, "success_bool", None):
                    by_src_finished[src] += 1
            except Exception:
                pass

        # –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ–º–∏—É–º –∏–∑ —Å–æ–±—ã—Ç–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å Event)
        by_src_premium = defaultdict(int)
        if Event is not None:
            # –∏—â–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ "premium_interest" –∑–∞ –ø–µ—Ä–∏–æ–¥
            ev_mapper = sqla_inspect(Event)
            ev_dt = next((c for c in ev_mapper.columns if isinstance(c.type, (DateTime, Date))), None)
            ev_q = s.query(Event).join(User, Event.user_id == User.id).filter(getattr(Event, "event", None) == "premium_interest")
            if ev_dt is not None:
                ev_q = ev_q.filter(ev_dt >= since)
            for ev in ev_q.all():
                try:
                    src = ev.user.source if hasattr(ev, "user") and ev.user else "‚Äî"  # type: ignore[attr-defined]
                except Exception:
                    src = "‚Äî"
                by_src_premium[src] += 1

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sources = sorted(set().union(
        by_src_users_total.keys(),
        by_src_new_since.keys(),
        by_src_started.keys(),
        by_src_finished.keys(),
        by_src_premium.keys(),
    ), key=lambda x: (x == "‚Äî", x))

    # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    lines = [
        f"üìä <b>–¢—Ä–∞—Ñ–∏–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</b> (–∑–∞ {days} –¥–Ω.)",
        "–ò—Å—Ç–æ—á–Ω–∏–∫ | –ù–æ–≤—ã–µ | –í—Å–µ–≥–æ | –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω. | –§–∏–Ω–∏—à —Ç—Ä–µ–Ω. | –ó–∞—è–≤–∫–∏ ‚≠êÔ∏è",
        "‚Äî"*60,
    ]
    for src in sources:
        new_ = by_src_new_since.get(src, 0)
        total = by_src_users_total.get(src, 0)
        st = by_src_started.get(src, 0)
        fin = by_src_finished.get(src, 0)
        pm = by_src_premium.get(src, 0)
        lines.append(f"{src} | {new_} | {total} | {st} | {fin} | {pm}")

    lines.append("\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–π –¥–∏–ø–ª–∏–Ω–∫–∏ –≤–∏–¥–∞ <code>https://t.me/<bot>?start=src_vc_sep</code>")
    await m.answer("\n".join(lines))


# ‚Äî‚Äî‚Äî /dl <–∫–æ–¥> ‚Äî –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–∏–Ω–∫ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å payload ‚Äî‚Äî‚Äî
@router.message(Command("dl"))
async def make_deeplink(m: Message):
    if not _is_admin(m.from_user.id):
        return
    parts = (m.text or "").split(maxsplit=1)
    payload = parts[1].strip() if len(parts) == 2 else "src_demo"
    me = await m.bot.get_me()
    link = f"https://t.me/{me.username}?start={payload}"
    await m.answer(f"üîó <b>–î–∏–ø–ª–∏–Ω–∫</b> –¥–ª—è –∫–æ–¥–∞ <code>{payload}</code>:\n{link}")
