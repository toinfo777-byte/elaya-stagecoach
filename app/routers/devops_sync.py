# app/routers/devops_sync.py
from __future__ import annotations
import asyncio, os
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

router = Router(name="devops_sync")

def _is_admin(uid: int) -> bool:
    raw = os.getenv("ADMIN_IDS", "")  # —á–∏—Ç–∞–µ–º –∏–∑ ADMIN_IDS –≤ Render
    ids = {int(x) for x in raw.split(",") if x.strip().isdigit()}
    return uid in ids if ids else False


@router.message(Command("sync_status"))
async def sync_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /sync_status ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —à—Ç–∞–±–Ω—ã–µ —Ñ–∞–π–ª—ã —Å GitHub"""
    if not _is_admin(message.from_user.id):
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    note = await message.reply("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —à—Ç–∞–±–∞‚Ä¶")

    cmd = ["python", "tools/sync_status.py"]
    try:
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        out, err = await proc.communicate()
        out_text = out.decode().strip()
        err_text = err.decode().strip()

        if proc.returncode == 0:
            msg = "‚úÖ –ì–æ—Ç–æ–≤–æ.\n" + (out_text or "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –≤—ã–≤–æ–¥–∞.")
        else:
            msg = f"‚ùå –û—à–∏–±–∫–∞ ({proc.returncode}).\n{err_text or out_text or 'no details'}"

        await note.edit_text(msg)
    except Exception as e:
        await note.edit_text(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
