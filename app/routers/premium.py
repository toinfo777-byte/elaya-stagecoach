from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="premium")

def premium_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="lead_start")],
        [InlineKeyboardButton(text="üì£ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ", url="https://t.me/elaya_theatre")]
    ])

class LeadForm(StatesGroup):
    email = State()
    note = State()

# –í—Ö–æ–¥ –≤ –ø—Ä–µ–º–∏—É–º (–≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ + —Ñ–∞–∑–∑–∏ –ø–æ —Ç–µ–∫—Å—Ç—É)
@router.message(StateFilter("*"), Command("premium"))
@router.message(StateFilter("*"), lambda m: isinstance(m.text, str) and "–†–∞—Å—à–∏—Ä–µ–Ω" in m.text)
async def premium_entry(m: Message):
    text = (
        "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (stub)\n\n"
        "–ü–∞–∫–µ—Ç—ã:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ 4 –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏-–≥—Ä—É–ø–ø–∞ ¬´–ü—Ä–æ–±–∞ —Å—Ü–µ–Ω—ã¬ª\n\n"
        "–ù–∞–∂–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."
    )
    await m.answer(text, reply_markup=premium_kb())

@router.callback_query(F.data == "lead_start")
async def lead_start(cb: CallbackQuery, state: FSMContext):
    await state.set_state(LeadForm.email)
    await cb.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.")
    await cb.answer()

@router.message(LeadForm.email)
async def lead_email(m: Message, state: FSMContext):
    email = None if (m.text or "").strip() == "-" else (m.text or "").strip()
    await state.update_data(email=email)
    await state.set_state(LeadForm.note)
    await m.answer("–õ—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.")

@router.message(LeadForm.note)
async def lead_note(m: Message, state: FSMContext):
    data = await state.get_data()
    note = None if (m.text or "").strip() == "-" else (m.text or "").strip()
    tg_contact = f"@{m.from_user.username}" if m.from_user.username else str(m.from_user.id)

    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            u = User(tg_id=m.from_user.id, username=m.from_user.username or "", name=m.from_user.full_name)
            s.add(u)
            s.flush()

        payload = []
        if data.get("email"):
            payload.append(f"email={data['email']}")
        if note:
            payload.append(f"note={note}")
        final_note = "; ".join(payload) if payload else None

        lead = Lead(user_id=u.id, channel="telegram", contact=tg_contact, note=final_note)
        s.add(lead)

    await state.clear()
    await m.answer("üëç –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø–∏—Å–∞–Ω. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu())
