# app/routers/premium.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from sqlalchemy import select, desc

from app.config import settings
from app.storage.repo import session_scope
from app.storage.models import User
from app.utils.dt import fmt_local

# –ï—Å–ª–∏ —É –≤–∞—Å –º–æ–¥–µ–ª—å premium_requests –ª–µ–∂–∏—Ç –≤ –¥—Ä—É–≥–æ–º –º–æ–¥—É–ª–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å—Ç–µ import:
from app.storage.models import PremiumRequest  # id, user_id, created_at, status, meta

router = Router(name="premium")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------------------------------------------------

KB_PREMIUM = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"), KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="üè† –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

# --- Helpers -----------------------------------------------------------------

STATUS_EMOJI = {
    "new": "üü°",
    "seen": "üü†",
    "approved": "üü¢",
    "rejected": "üî¥",
}


def _status_badge(status: str) -> str:
    return f"{STATUS_EMOJI.get(status, 'üü°')} {status}"


async def _render_my_requests(user: User) -> str:
    with session_scope() as s:
        rows = s.execute(
            select(PremiumRequest).where(PremiumRequest.user_id == user.id).order_by(desc(PremiumRequest.created_at))
        ).scalars().all()

    if not rows:
        return "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."

    lines = ["–ú–æ–∏ –∑–∞—è–≤–∫–∏:"]
    for i, r in enumerate(rows, start=1):
        when = fmt_local(r.created_at, user.tz, settings.TZ_DEFAULT)
        lines.append(f"‚Ä¢ #{i} ‚Äî {when} ‚Äî {_status_badge(r.status)}")
    return "\n".join(lines)


# --- Handlers ----------------------------------------------------------------

@router.message(F.text == "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
@router.message(F.text == "/premium")
async def on_premium_menu(m: Message, user: User):
    await m.answer("‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", reply_markup=KB_PREMIUM)


@router.message(F.text == "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")
async def on_premium_inside(m: Message, user: User):
    await m.answer(
        "–í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –∂–∏–≤—ã–µ —Ä–∞–∑–±–æ—Ä—ã.\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –∏ –º—ã –ø–æ–¥–∫–ª—é—á–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–æ—Ç.",
        reply_markup=KB_PREMIUM,
    )


@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def on_premium_apply(m: Message, user: User):
    with session_scope() as s:
        s.add(PremiumRequest(user_id=user.id, status="new", meta={}))
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)", reply_markup=KB_PREMIUM)
    # ‚Üë —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ UX; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç–µ


@router.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def on_premium_list(m: Message, user: User):
    text = await _render_my_requests(user)
    await m.answer(text, reply_markup=KB_PREMIUM)


@router.message(F.text == "üè† –í –º–µ–Ω—é")
async def on_back_to_menu(m: Message, user: User):
    from app.keyboards.menu import main_menu
    await m.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
