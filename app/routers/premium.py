# app/routers/premium.py
from __future__ import annotations

import re
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="premium")

# ---------- UI ----------

def premium_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="lead_start")],
            [InlineKeyboardButton(text="üì£ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ", url="https://t.me/elaya_theatre")],
        ]
    )

# ---------- FSM ----------

class LeadForm(StatesGroup):
    email = State()
    note = State()

EMAIL_RE = re.compile(r"^[^@\s]+@[^@\s]+\.[^@\s]+$")

# ---------- Handlers ----------

# –ö–Ω–æ–ø–∫–∞ –∏ –∫–æ–º–∞–Ω–¥–∞ ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–≤ —Ç.—á. –≤–æ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã)
@router.message(StateFilter("*"), F.text == "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
@router.message(StateFilter("*"), Command("premium"))
async def premium_entry(m: Message):
    text = (
        "‚≠ê *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*\n\n"
        "–ü–∞–∫–µ—Ç—ã:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ 4 –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –ú–∏–Ω–∏-–≥—Ä—É–ø–ø–∞ ¬´–ü—Ä–æ–±–∞ —Å—Ü–µ–Ω—ã¬ª\n\n"
        "–ù–∞–∂–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç¬ª ‚Äî –º—ã –Ω–∞–ø–∏—à–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."
    )
    await m.answer(text, reply_markup=premium_kb(), parse_mode="Markdown")


@router.callback_query(StateFilter("*"), F.data == "lead_start")
async def lead_start(cb: CallbackQuery, state: FSMContext):
    await state.set_state(LeadForm.email)
    await cb.message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ e-mail (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.")
    await cb.answer()


@router.message(LeadForm.email)
async def lead_email(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    email: str | None
    if raw == "-":
        email = None
    else:
        email = raw if EMAIL_RE.match(raw) else None
        if raw and not email:
            await m.answer("–ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç e-mail –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
            return

    await state.update_data(email=email)
    await state.set_state(LeadForm.note)
    await m.answer(
        "–õ—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (—Ç–µ–ª–µ–≥—Ä–∞–º @, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–ø.) ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é. "
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª.",
    )


@router.message(LeadForm.note)
async def lead_note(m: Message, state: FSMContext):
    data = await state.get_data()
    note_text = (m.text or "").strip()
    note = None if note_text == "-" else note_text[:500]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É

    # –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ Telegram
    tg_contact = f"@{m.from_user.username}" if m.from_user.username else str(m.from_user.id)

    with session_scope() as s:
        # user –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            u = User(tg_id=m.from_user.id, username=m.from_user.username or "", name=m.from_user.full_name)
            s.add(u)
            s.flush()

        parts: list[str] = []
        if data.get("email"):
            parts.append(f"email={data['email']}")
        if note:
            parts.append(f"note={note}")
        final_note = "; ".join(parts) if parts else None

        lead = Lead(
            user_id=u.id,
            channel="telegram",
            contact=tg_contact,
            note=final_note,
        )
        s.add(lead)
        # session_scope() –∫–æ–º–º–∏—Ç–∏—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ –≤—ã—Ö–æ–¥—É

    await state.clear()
    await m.answer("üëç –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø–∏—Å–∞–Ω. –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è.", reply_markup=main_menu())
