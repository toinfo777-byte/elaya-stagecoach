from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import text

from app.keyboards.menu import (
    BTN_PREMIUM,
)
from app.storage.repo import SessionLocal

router = Router(name="premium")


# --------- FSM ---------
class PremiumForm(StatesGroup):
    waiting_goal = State()


# --------- inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---------
def kb_premium_menu() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", callback_data="prem:inside")
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="prem:req")
    kb.button(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="prem:list")
    kb.button(text="üì£ –í –º–µ–Ω—é", callback_data="prem:menu")
    kb.adjust(2, 2)
    return kb.as_markup()

# --------- —É—Ç–∏–ª–∏—Ç—ã ---------
def _markdown_premium_intro() -> str:
    return (
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>"
    )


def _ensure_user_and_get_id(telegram_id: int, username: str | None) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)."""
    with SessionLocal() as s:
        row = s.execute(
            text("SELECT id FROM users WHERE tg_id = :tg"),
            {"tg": telegram_id},
        ).fetchone()
        if row:
            return int(row[0])

        s.execute(
            text(
                "INSERT INTO users (tg_id, username, streak) VALUES (:tg, :un, 0)"
            ),
            {"tg": telegram_id, "un": username or None},
        )
        s.commit()
        row = s.execute(
            text("SELECT id FROM users WHERE tg_id = :tg"),
            {"tg": telegram_id},
        ).fetchone()
        return int(row[0])


async def _show_premium_menu(message: types.Message) -> None:
    await message.answer(_markdown_premium_intro(), reply_markup=kb_premium_menu())


# --------- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ---------
@router.message(Command("premium"))
@router.message(F.text == BTN_PREMIUM, state="*")
async def premium_entry(message: types.Message, state: FSMContext) -> None:
    # ¬´—Å—É–ø–µ—Ä-–∫–Ω–æ–ø–∫–∞¬ª: —á–∏—Å—Ç–∏–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª
    await state.clear()
    await _show_premium_menu(message)


# --------- –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ ---------
@router.callback_query(F.data == "prem:inside", state="*")
async def prem_inside(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await cb.message.answer(
        "–í–Ω—É—Ç—Ä–∏ ‚Äî —Ä–∞–∑–±–æ—Ä –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞—É–¥–∏–æ, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–∏–∫—Ä–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å.\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª.",
        reply_markup=kb_premium_menu(),
    )
    await cb.answer()


# --------- –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (—Å—Ç–∞—Ä—Ç) ---------
@router.callback_query(F.data == "prem:req", state="*")
async def prem_request_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(PremiumForm.waiting_goal)
    await cb.message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
    )
    await cb.answer()


# –æ—Ç–º–µ–Ω–∞
@router.message(Command("cancel"), PremiumForm.waiting_goal)
async def prem_cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.")
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞, —á—Ç–æ–±—ã –±—ã–ª–æ –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—Ä–∞–∑—É
    await _show_premium_menu(message)


# --------- –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (–ø—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞) ---------
@router.message(PremiumForm.waiting_goal)
async def prem_request_save(message: types.Message, state: FSMContext) -> None:
    user_id = _ensure_user_and_get_id(
        message.from_user.id,
        getattr(message.from_user, "username", None),
    )
    goal_text = (message.text or "").strip()[:200]

    # –ü–∏—à–µ–º –≤ premium_requests
    with SessionLocal() as s:
        # –¥–ª—è sqlite JSON ‚Äî –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ '{}' (–±–µ–∑ ::jsonb)
        s.execute(
            text(
                "INSERT INTO premium_requests (user_id, tg_username, status, meta) "
                "VALUES (:uid, :un, 'new', :meta)"
            ),
            {
                "uid": user_id,
                "un": getattr(message.from_user, "username", None),
                "meta": "{}",
            },
        )
        s.commit()

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç")
    await _show_premium_menu(message)


# --------- –ú–æ–∏ –∑–∞—è–≤–∫–∏ ---------
@router.callback_query(F.data == "prem:list", state="*")
async def prem_list(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    user_id = _ensure_user_and_get_id(cb.from_user.id, getattr(cb.from_user, "username", None))

    with SessionLocal() as s:
        rows = s.execute(
            text(
                "SELECT id, created_at, status "
                "FROM premium_requests WHERE user_id = :uid "
                "ORDER BY id DESC LIMIT 5"
            ),
            {"uid": user_id},
        ).fetchall()

    if not rows:
        await cb.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb_premium_menu())
        await cb.answer()
        return

    status_emoji = {"new": "üü°", "in_review": "üü†", "done": "üü¢"}
    lines = []
    for rid, created_at, status in rows:
        mark = status_emoji.get(status, "‚ö™Ô∏è")
        ts = str(created_at)[:16] if created_at else ""
        lines.append(f"‚Ä¢ #{rid} ‚Äî {ts} ‚Äî {mark} {status}")

    await cb.message.answer(
        "<b>–ú–æ–∏ –∑–∞—è–≤–∫–∏:</b>\n" + "\n".join(lines),
        reply_markup=kb_premium_menu(),
    )
    await cb.answer()


# --------- ¬´–í –º–µ–Ω—é¬ª –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ ---------
@router.callback_query(F.data == "prem:menu", state="*")
async def prem_back_to_menu(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await cb.message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.")
    await cb.answer()
