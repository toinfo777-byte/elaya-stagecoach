# app/routers/premium.py
from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message

router = Router(name="premium")

TITLE = "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
BODY = (
    "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
    "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
    "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª"
)

BTN_WHATS_INSIDE = "üîé –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
BTN_APPLY = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
BTN_MY_APPLIES = "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
BTN_TO_MENU = "üì£ –í –º–µ–Ω—é"

INSIDE_TEXT = "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤."
EMPTY_LIST = "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."

ASK_TEXT = (
    "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
)
CONFIRM_TEXT = "–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç"

TRIGGERS = {
    "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
    "‚≠êÔ∏è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è",
}

def _menu_text() -> str:
    return f"<b>{TITLE}</b>\n\n{BODY}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞–∑–¥–µ–ª–∞
@router.message(Command("premium"))
async def premium_cmd(message: Message) -> None:
    await message.answer(_menu_text())

@router.message(F.text.casefold().in_(t.lower() for t in TRIGGERS))
async def premium_text(message: Message) -> None:
    await message.answer(_menu_text())

# –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏
@router.message(F.text == BTN_WHATS_INSIDE)
async def premium_inside(message: Message) -> None:
    await message.answer(INSIDE_TEXT)

# –ú–æ–∏ –∑–∞—è–≤–∫–∏ (–ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫)
@router.message(F.text == BTN_MY_APPLIES)
async def premium_my_applies(message: Message) -> None:
    # TODO: –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î
    await message.answer(EMPTY_LIST)

# –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏
@router.message(F.text == BTN_APPLY)
async def premium_apply_ask(message: Message) -> None:
    await message.answer(ASK_TEXT)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏: –ª—é–±–æ–µ ¬´–æ–±—ã—á–Ω–æ–µ¬ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
# –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª—É–∂–µ–±–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π/–∫–Ω–æ–ø–∫–æ–π –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
@router.message(F.text & ~Command())
async def premium_apply_save(message: Message) -> None:
    t = (message.text or "").strip()
    if not t:
        return
    # –ù–µ –ª–æ–≤–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ/–º–µ–Ω—é—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã ¬´—Å–ø–∞—Å–∏–±–æ¬ª –Ω–µ —Å—ã–ø–∞–ª–æ—Å—å –ª–∏—à–Ω–∏–π —Ä–∞–∑
    skip = {
        BTN_WHATS_INSIDE, BTN_APPLY, BTN_MY_APPLIES, BTN_TO_MENU,
        "–ú–µ–Ω—é", "–ú–µ–Ω—é", "/menu", "/start", "/training", "/progress", "/casting", "/apply", "/settings", "/premium"
    }
    if t in skip:
        return
    if len(t) > 200:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ë–î (user_id, text)
    # repo.save_premium_apply(user_id=message.from_user.id, goal=t)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª —Å–Ω–æ–≤–∞
    await message.answer(CONFIRM_TEXT)
    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ ¬´üì£ –í –º–µ–Ω—é¬ª
