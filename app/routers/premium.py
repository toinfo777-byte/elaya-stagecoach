from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.utils.markdown import hbold as b

from app.keyboards.menu import (
    BTN_PREMIUM,
    main_menu,
)
from app.storage.repo import session_scope, add_premium_request_for_tg, list_premium_requests_for_tg

router = Router(name="premium")


# ‚îÄ‚îÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def kb_premium_menu() -> types.ReplyKeyboardMarkup:
    rows = [
        [types.KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")],
        [types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [types.KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏")],
        [types.KeyboardButton(text="üì£ –í –º–µ–Ω—é")],
    ]
    return types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


# ‚îÄ‚îÄ –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text == BTN_PREMIUM)
@router.message(Command("premium"))
async def premium_entry(msg: types.Message) -> None:
    await msg.answer(
        f"{b('‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è')}\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞\n\n"
        f"{b('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')}",
        reply_markup=kb_premium_menu(),
    )


# ‚îÄ‚îÄ –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text == "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")
async def premium_what(msg: types.Message) -> None:
    await msg.answer(
        "–í–Ω—É—Ç—Ä–∏ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å. "
        "–ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏: –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å.",
        reply_markup=kb_premium_menu(),
    )


# ‚îÄ‚îÄ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def premium_request_start(msg: types.Message) -> None:
    await msg.answer(
        f"{b('–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.')} \n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=kb_premium_menu(),
    )


@router.message(F.text, F.text.len() > 0, F.text != "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", F.text != "–ú–æ–∏ –∑–∞—è–≤–∫–∏", F.text != "üì£ –í –º–µ–Ω—é")
async def premium_request_catch_text(msg: types.Message) -> None:
    """
    –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬ª –∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π
    —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞—è–≤–∫—É.
    (–§–æ—Ä–º–∞–ª—å–Ω—ã–π FSM –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ —à–∞–≥–∞—Ö.)
    """
    # –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥, –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –±—ã–ª–æ –ø—Ä–µ–º–∏—É–º:
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–º–∏—É–º–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –ø–æ–∑–≤–æ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.
    text = (msg.text or "").strip()
    if not text or text.startswith("/"):
        return

    with session_scope() as s:
        add_premium_request_for_tg(
            s,
            tg_id=msg.from_user.id,
            username=msg.from_user.username,
            text_note=text,
            source="premium_text",
        )

    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ", reply_markup=kb_premium_menu())


# ‚îÄ‚îÄ –ú–æ–∏ –∑–∞—è–≤–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def premium_my_requests(msg: types.Message) -> None:
    with session_scope() as s:
        items = list_premium_requests_for_tg(s, msg.from_user.id)

    if not items:
        await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb_premium_menu())
        return

    lines = [f"{b('–ú–æ–∏ –∑–∞—è–≤–∫–∏')}: #{len(items)}"]
    for idx, it in enumerate(items, 1):
        note = (it.meta or {}).get("note") or "‚Äî"
        lines.append(f"{idx}. {it.created_at:%d.%m %H:%M} ‚Äî {it.status} ‚Äî {note[:100]}")
    await msg.answer("\n".join(lines), reply_markup=kb_premium_menu())


# ‚îÄ‚îÄ –í –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text == "üì£ –í –º–µ–Ω—é")
async def premium_back_to_menu(msg: types.Message) -> None:
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
