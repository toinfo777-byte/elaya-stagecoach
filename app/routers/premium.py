# app/routers/premium.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import (
    BTN_PREMIUM,
    main_menu,
)
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="premium")

# --- –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ ---
BTN_WHATS_INSIDE = "üîç –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"
BTN_LEAVE_REQUEST = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
BTN_MY_REQUESTS = "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏"
BTN_BACK_TO_MENU = "üì£ –í –º–µ–Ω—é"

def premium_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=BTN_WHATS_INSIDE)],
        [KeyboardButton(text=BTN_LEAVE_REQUEST)],
        [KeyboardButton(text=BTN_MY_REQUESTS)],
        [KeyboardButton(text=BTN_BACK_TO_MENU)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


# --- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ---
@router.message(Command("premium"))
@router.message(F.text == BTN_PREMIUM)
async def premium_entry(msg: Message) -> None:
    text = (
        "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await msg.answer(text, reply_markup=premium_kb())


# --- ¬´—á—Ç–æ –≤–Ω—É—Ç—Ä–∏¬ª ---
@router.message(F.text == BTN_WHATS_INSIDE)
async def premium_inside(msg: Message) -> None:
    await msg.answer(
        "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ‚Äî –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤.",
        reply_markup=premium_kb(),
    )


# --- ¬´–º–æ–∏ –∑–∞—è–≤–∫–∏¬ª ---
@router.message(F.text == BTN_MY_REQUESTS)
async def premium_my_requests(msg: Message) -> None:
    tg_id = msg.from_user.id
    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
            return

        leads = (
            s.query(Lead)
            .filter(Lead.user_id == user.id, Lead.track == "premium")
            .order_by(Lead.id.desc())
            .all()
        )

    if not leads:
        await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
        return

    lines = ["<b>–ú–æ–∏ –∑–∞—è–≤–∫–∏:</b>"]
    for i, lead in enumerate(leads, 1):
        lines.append(f"‚Ä¢ #{i} ‚Äî {lead.ts:%d.%m %H:%M} ‚Äî üü° –Ω–æ–≤–∞—è")
    await msg.answer("\n".join(lines), reply_markup=premium_kb())


# --- ¬´–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª ---
@router.message(F.text == BTN_LEAVE_REQUEST)
async def premium_leave_request(msg: Message) -> None:
    u = msg.from_user
    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=u.id).first()
        if not user:
            user = User(
                tg_id=u.id,
                username=u.username or None,
                name=(u.full_name or u.first_name or None),
            )
            s.add(user)
            s.flush()

        contact = f"@{u.username}" if u.username else str(u.id)
        lead = Lead(
            user_id=user.id,
            channel="tg",
            contact=contact,
            note=None,
            track="premium",
        )
        s.add(lead)

    await msg.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î).", reply_markup=premium_kb())


# --- ¬´–≤ –º–µ–Ω—é¬ª ---
@router.message(F.text == BTN_BACK_TO_MENU)
async def premium_back_to_menu(msg: Message) -> None:
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
