# app/routers/premium.py
from __future__ import annotations

import os
import json
import logging
from datetime import datetime

from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î, –Ω–æ –Ω–µ —Ä—É—à–∏–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try:
    from app.storage.repo import SessionLocal  # sync Session
    from sqlalchemy import text
except Exception:  # pragma: no cover
    SessionLocal = None  # type: ignore
    text = None  # type: ignore

log = logging.getLogger(__name__)
router = Router()

PREMIUM_BTN_TEXT = "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"


def _kb_main() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", callback_data="prem:info"),
        InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="prem:apply"),
    )
    kb.row(
        InlineKeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="prem:myreq"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="prem:back"),
    )
    return kb.as_markup()


@router.message(F.text == PREMIUM_BTN_TEXT)
async def premium_entry(msg: types.Message) -> None:
    await msg.answer(
        "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –±–æ–Ω—É—Å-–º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
        reply_markup=_kb_main(),
    )


@router.callback_query(F.data == "prem:back")
async def premium_back(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.")
    await cb.answer()


@router.callback_query(F.data == "prem:info")
async def premium_info(cb: types.CallbackQuery) -> None:
    await cb.message.edit_text(
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ ‚≠êÔ∏è:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "‚Ä¢ –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "–ù–∞–∂–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ—Å—Ç—É–ø.",
        reply_markup=_kb_main(),
    )
    await cb.answer()


# ---------- –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º ----------

def _db_available() -> bool:
    return bool(SessionLocal and text)


def _insert_request_sync(user_id: int, username: str | None) -> None:
    """
    –ü–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É premium_requests. –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–µ–π.
    –î–ª—è SQLite/PG —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ (–±–µ–∑ jsonb-—Å–ø–µ—Ü—Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞).
    """
    assert SessionLocal and text  # –¥–ª—è type checkers
    with SessionLocal() as s:
        s.execute(
            text(
                """
                INSERT INTO premium_requests (id, user_id, tg_username, created_at, status, meta)
                VALUES (:id, :user_id, :tg, :dt, :st, :meta)
                """
            ),
            {
                "id": int(datetime.utcnow().timestamp() * 1000),  # –ø—Ä–æ—Å—Ç–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
                "user_id": user_id,
                "tg": username or "",
                "dt": datetime.utcnow(),
                "st": "new",
                "meta": json.dumps({}),
            },
        )
        s.commit()


def _get_user_requests_sync(user_id: int) -> list[tuple]:
    assert SessionLocal and text
    with SessionLocal() as s:
        rows = s.execute(
            text(
                """
                SELECT id, created_at, status
                FROM premium_requests
                WHERE user_id = :uid
                ORDER BY created_at DESC
                LIMIT 10
                """
            ),
            {"uid": user_id},
        ).fetchall()
    return rows


def _admin_chat_id() -> int | None:
    # –ë–µ—Ä—ë–º –∏–∑ ENV, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    val = os.getenv("ADMIN_ALERT_CHAT_ID") or os.getenv("ADMIN_CHAT_ID")
    try:
        return int(val) if val else None
    except Exception:
        return None


@router.callback_query(F.data == "prem:apply")
async def premium_apply(cb: types.CallbackQuery) -> None:
    # –ü–∏—à–µ–º –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ë–î. –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º.
    if _db_available():
        try:
            _insert_request_sync(cb.from_user.id, cb.from_user.username)
            status = "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ"
        except Exception as e:  # –Ω–µ —Ä–æ–Ω—è–µ–º UX
            log.exception("premium request insert failed: %s", e)
            status = "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)"
    else:
        status = "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    admin_id = _admin_chat_id()
    if admin_id:
        try:
            await cb.message.bot.send_message(
                admin_id,
                (
                    "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é\n"
                    f"user_id: <code>{cb.from_user.id}</code>\n"
                    f"username: @{cb.from_user.username or '‚Äî'}"
                ),
            )
        except Exception as e:
            log.warning("admin notify failed: %s", e)

    await cb.message.edit_text(
        f"{status}\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –∏–ª–∏ –≤–∫–ª—é—á–∏–º –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=_kb_main(),
    )
    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == "prem:myreq")
async def premium_my_requests(cb: types.CallbackQuery) -> None:
    if not _db_available():
        await cb.message.edit_text(
            "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
            reply_markup=_kb_main(),
        )
        await cb.answer()
        return

    try:
        rows = _get_user_requests_sync(cb.from_user.id)
    except Exception as e:
        log.exception("select premium requests failed: %s", e)
        rows = []

    if not rows:
        text = "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        items = []
        for r in rows:
            _id, created_at, status = r
            dt = (
                created_at.strftime("%d.%m %H:%M")
                if hasattr(created_at, "strftime")
                else str(created_at)
            )
            items.append(f"‚Ä¢ #{_id} ‚Äî {status} ({dt})")
        text = "–¢–≤–æ–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(items)

    await cb.message.edit_text(text, reply_markup=_kb_main())
    await cb.answer()
