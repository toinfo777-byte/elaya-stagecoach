from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiagram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User
from app.services.leads import create_lead, LeadPayload

router = Router(name="premium")


OFFERS_TEXT = (
    "‚≠ê *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è*\n\n"
    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ ‚Äî 4 –Ω–µ–¥–µ–ª–∏\n"
    "‚Ä¢ –ú–∏–Ω–∏-–≥—Ä—É–ø–ø–∞ ¬´–ü—Ä–æ–±–∞ —Å—Ü–µ–Ω—ã¬ª\n\n"
    "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî —Å–≤—è–∂–µ–º—Å—è –∏ –ø–æ–¥—Å–∫–∞–∂–µ–º, —á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç –ª—É—á—à–µ."
)

def _offers_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="lead_start")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="lead_back")],
    ])

class LeadFSM(StatesGroup):
    channel = State()
    contact = State()
    note = State()

def _channels_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Telegram", callback_data="ch_telegram"),
            InlineKeyboardButton(text="WhatsApp", callback_data="ch_whatsapp"),
        ],
        [
            InlineKeyboardButton(text="Email", callback_data="ch_email"),
            InlineKeyboardButton(text="ch –¥—Ä—É–≥–æ–π", callback_data="ch_other"),
        ],
    ])

@router.message(F.text == "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
@router.message(Command("premium"))
async def show_offers(m: Message):
    await m.answer(OFFERS_TEXT, reply_markup=_offers_kb(), parse_mode="Markdown")

@router.callback_query(F.data == "lead_back")
async def lead_back(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()

@router.callback_query(F.data == "lead_start")
async def lead_start(cb: CallbackQuery, state: FSMContext):
    await state.set_state(LeadFSM.channel)
    await cb.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:", reply_markup=_channels_kb()
    )
    await cb.answer()

@router.callback_query(LeadFSM.channel, F.data.startswith("ch_"))
async def lead_choose_channel(cb: CallbackQuery, state: FSMContext):
    ch = cb.data.removeprefix("ch_")
    await state.update_data(channel=ch)
    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –µ—Å–ª–∏ –µ—Å—Ç—å username
    prefill = ""
    if ch == "telegram" and cb.from_user.username:
        prefill = f"@{cb.from_user.username}"
    await state.set_state(LeadFSM.contact)
    await cb.message.edit_text(
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫/—Ç–µ–ª–µ—Ñ–æ–Ω/email). –ü—Ä–∏–º–µ—Ä: `@elaya_school` –∏–ª–∏ `+79001234567`",
        parse_mode="Markdown",
    )
    if prefill:
        await cb.message.answer(f"–ü–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç?\n{prefill}\n–ï—Å–ª–∏ –¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ.")
    await cb.answer()

@router.message(LeadFSM.contact, F.text.len() > 0)
async def lead_save_contact(m: Message, state: FSMContext):
    await state.update_data(contact=m.text.strip())
    await state.set_state(LeadFSM.note)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ: —á–µ–º –ø–æ–º–æ—á—å? (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ ¬´-¬ª")
    
@router.message(LeadFSM.note, F.text.len() > 0)
async def lead_save_note(m: Message, state: FSMContext):
    d = await state.get_data()
    note = m.text if m.text != "-" else ""
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.", reply_markup=main_menu())
            await state.clear()
            return
        create_lead(
            s, u.id,
            LeadPayload(channel=d["channel"], contact=d["contact"], note=note)
        )
    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø–∏—Å–∞–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è. üôå", reply_markup=main_menu())
