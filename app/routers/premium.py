# app/routers/premium.py
from __future__ import annotations

import os
from datetime import datetime

from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.storage.repo import add_premium_request, list_user_premium_requests
from app.keyboards.menu import (
    BTN_PREMIUM,
    BTN_TRAIN, BTN_PROGRESS, BTN_APPLY, BTN_CASTING, BTN_PRIVACY, BTN_HELP, BTN_SETTINGS,
    main_menu,
)

router = Router(name="premium")

# --- callback data ---
CB_APPLY = "premium:apply"
CB_LIST = "premium:list"
CB_INFO = "premium:info"
CB_BACK = "premium:back"

ADMIN_ALERT_CHAT_ID = os.getenv("ADMIN_ALERT_CHAT_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ


def premium_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏", callback_data=CB_INFO)
    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=CB_APPLY)
    kb.button(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data=CB_LIST)
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data=CB_BACK)
    kb.adjust(2, 2)
    return kb.as_markup()


def _format_status(status: str) -> str:
    mapping = {
        "new": "üü° –Ω–æ–≤–∞—è",
        "in_review": "üü† –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
        "approved": "üü¢ –æ–¥–æ–±—Ä–µ–Ω–æ",
        "rejected": "üî¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
    }
    return mapping.get(status, status)


@router.message(F.text == BTN_PREMIUM)
async def premium_entry(msg: Message) -> None:
    await msg.answer(
        "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∞.",
        reply_markup=premium_kb(),
    )


@router.callback_query(F.data == CB_BACK)
async def premium_back(cb: CallbackQuery) -> None:
    await cb.message.edit_text("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù—É–∂–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É üëá")
    await cb.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu())
    await cb.answer()


@router.callback_query(F.data == CB_INFO)
async def premium_info(cb: CallbackQuery) -> None:
    await cb.message.edit_text(
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n"
        "‚Ä¢ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å;\n"
        "‚Ä¢ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞;\n"
        "‚Ä¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
        "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª.",
        reply_markup=premium_kb(),
    )
    await cb.answer()


@router.callback_query(F.data == CB_APPLY)
async def premium_apply(cb: CallbackQuery) -> None:
    user = cb.from_user
    pr = add_premium_request(user.id, user.username)

    # –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if ADMIN_ALERT_CHAT_ID:
        try:
            await cb.bot.send_message(
                int(ADMIN_ALERT_CHAT_ID),
                f"üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ ‚≠ê –ü—Ä–µ–º–∏—É–º\n"
                f"user_id: <code>{user.id}</code>\n"
                f"@{user.username or '‚Äî'}\n"
                f"status: {pr.status}\n"
                f"id: {pr.id}",
            )
        except Exception:
            pass

    text = (
        "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏–ª–∏ –≤–∫–ª—é—á–∏–º –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "–°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ ¬´–ú–æ–∏ –∑–∞—è–≤–∫–∏¬ª."
    )
    await cb.message.edit_text(text, reply_markup=premium_kb())
    await cb.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == CB_LIST)
async def premium_list(cb: CallbackQuery) -> None:
    rows = list_user_premium_requests(cb.from_user.id, limit=10)

    if not rows:
        await cb.message.edit_text("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=premium_kb())
        await cb.answer()
        return

    lines = []
    for r in rows:
        created = r.created_at
        if isinstance(created, str):
            try:
                created = datetime.fromisoformat(created)
            except Exception:
                created = None
        dt = created.strftime("%d.%m %H:%M") if isinstance(created, datetime) else "‚Äî"
        lines.append(f"‚Ä¢ #{r.id} ‚Äî {dt} ‚Äî {_format_status(r.status)}")

    await cb.message.edit_text("–ú–æ–∏ –∑–∞—è–≤–∫–∏:\n" + "\n".join(lines), reply_markup=premium_kb())
    await cb.answer()
