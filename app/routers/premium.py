from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import (
    BTN_PREMIUM,  # "‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
)
from app.keyboards.menu import main_menu  # –Ω–∞—à–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
from app.storage.repo import session_scope, log_event
from app.storage.models import User, Lead
from app.config import settings

router = Router(name="premium")

# --- –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª–æ–∫–∞ ---
def kb_premium() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"), KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="üì£ –í –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


class PremiumSG(StatesGroup):
    waiting_request_text = State()


TEXT_WHATS_INSIDE = (
    "‚≠êÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
    "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
    "‚Ä¢ –†–∞–∑–æ–≥—Ä–µ–≤ –≥–æ–ª–æ—Å–∞, –¥–∏–∫—Ü–∏—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ\n"
    "‚Ä¢ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ –∏ ¬´–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n\n"
    "–ù–∞–∂–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª ‚Äî —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ. –Ø —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –≤ —á–∞—Ç–µ."
)


def _admin_chat_id() -> int | None:
    try:
        v = getattr(settings, "ADMIN_ALERT_CHAT_ID", None)
        if not v:
            return None
        return int(str(v).strip())
    except Exception:
        return None


async def _send_admin_alert(text: str) -> None:
    """
    –ü–∞—Å—Å–∏–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ).
    –ò—Å–ø–æ–ª—å–∑—É–µ–º dp.bot —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–ª—å–∑—è: –∏–º–ø–æ—Ä—Ç –≤ —Ç–æ—á–∫–µ –≤—ã–∑–æ–≤–∞.
    """
    admin = _admin_chat_id()
    if not admin:
        return
    try:
        from aiogram import Bot
        from app.main import _resolve_token  # —Ç–æ—Ç –∂–µ —Ö–µ–ª–ø–µ—Ä, —á—Ç–æ –≤ main.py
        bot = Bot(token=_resolve_token())
        await bot.send_message(chat_id=admin, text=text)
    except Exception:
        pass


# --- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ---
@router.message(Command("premium"))
@router.message(F.text == BTN_PREMIUM)
async def premium_entry(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", reply_markup=kb_premium())


# --- —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ ---
@router.message(F.text.lower().in_({"—á—Ç–æ –≤–Ω—É—Ç—Ä–∏", "—á—Ç–æ –≤–Ω—É—Ç—Ä–∏?"}))
async def premium_whats_inside(message: Message) -> None:
    await message.answer(TEXT_WHATS_INSIDE)


# --- –≤ –º–µ–Ω—é ---
@router.message(F.text.in_({"üì£ –í –º–µ–Ω—é", "–í –º–µ–Ω—é"}))
async def premium_back_to_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


# --- –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É: —à–∞–≥ 1 (–≤–æ–ø—Ä–æ—Å) ---
@router.message(F.text.lower().in_({"–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}))
async def premium_leave_request_ask(message: Message, state: FSMContext) -> None:
    await state.set_state(PremiumSG.waiting_request_text)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
    )


# --- –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É: —à–∞–≥ 2 (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ---
@router.message(PremiumSG.waiting_request_text, F.text.len() > 0)
async def premium_leave_request_save(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å.")
        return
    if len(text) > 200:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ üôà –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    with session_scope() as s:
        # –Ω–∞–π–¥—ë–º/—Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        u = s.query(User).filter_by(tg_id=message.from_user.id).first()
        if not u:
            u = User(tg_id=message.from_user.id, username=message.from_user.username or None, name=message.from_user.full_name)
            s.add(u)
            s.commit()

        lead = Lead(
            user_id=u.id,
            channel="tg",
            contact=f"@{u.username}" if u.username else str(u.tg_id),
            note=text,
            track="premium",
        )
        s.add(lead)
        s.commit()

        await _send_admin_alert(
            f"üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ ‚≠êÔ∏è –ü—Ä–µ–º–∏—É–º –æ—Ç @{u.username or u.tg_id}\n"
            f"–¶–µ–ª—å: {text}"
        )
        log_event(s, u.id, "premium_request", {"text": text})

    await state.clear()
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –∏–ª–∏ –≤–∫–ª—é—á–∏–º –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=kb_premium())


# --- —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(F.text.lower().in_({"–º–æ–∏ –∑–∞—è–≤–∫–∏"}))
async def premium_my_requests(message: Message) -> None:
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=message.from_user.id).first()
        if not u:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        q = (
            s.query(Lead)
            .filter(Lead.user_id == u.id, Lead.track == "premium")
            .order_by(Lead.ts.desc())
            .limit(5)
        )
        items = list(q)
        if not items:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        lines = ["–ú–æ–∏ –∑–∞—è–≤–∫–∏:"]
        for i, l in enumerate(items, 1):
            # –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: –ø–æ–∫–∞ ¬´–Ω–æ–≤–∞—è¬ª
            lines.append(f"‚Ä¢ #{i} ‚Äî {l.ts:%d.%m %H:%M} ‚Äî üü° –Ω–æ–≤–∞—è\n  ¬´{l.note}¬ª")
        await message.answer("\n".join(lines), reply_markup=kb_premium())
