from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from sqlalchemy import select, desc

from app.keyboards.menu import main_menu  # –Ω–∏–∂–Ω–µ–µ ¬´–≥–ª–∞–≤–Ω–æ–µ¬ª –º–µ–Ω—é
from app.storage.repo import session_scope
from app.storage.models import User, PremiumRequest
from app.utils.textmatch import contains_ci

router = Router(name="premium")


# === –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è¬ª ============================

def _kb_premium() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"), KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="üß≠ –í –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


def _human_status(s: str) -> str:
    return {
        "new": "üü° –Ω–æ–≤–∞—è",
        "in_progress": "üü† –≤ —Ä–∞–±–æ—Ç–µ",
        "done": "üü¢ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
        "rejected": "üî¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }.get(s, s)


# === –•—ç–Ω–¥–ª–µ—Ä—ã =================================================================

@router.message(F.text.func(contains_ci("—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")))
@router.message(F.text == "/premium")
async def premium_entry(m: Message, user: User) -> None:
    """–í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª + –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ –∑–∞—è–≤–∫–∞–º."""
    with session_scope() as s:
        last = s.execute(
            select(PremiumRequest)
            .where(PremiumRequest.user_id == user.id)
            .order_by(desc(PremiumRequest.created_at))
            .limit(1)
        ).scalar_one_or_none()

    if last:
        text = (
            "–ú–æ–∏ –∑–∞—è–≤–∫–∏:\n"
            f"‚Ä¢ #{last.id} ‚Äî {last.created_at:%d.%m %H:%M} ‚Äî {_human_status(last.status)}"
        )
    else:
        text = "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."

    await m.answer(text, reply_markup=_kb_premium())


@router.message(F.text.func(contains_ci("—á—Ç–æ –≤–Ω—É—Ç—Ä–∏")))
async def premium_inside(m: Message, user: User) -> None:
    desc = (
        "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞;\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
    )
    await m.answer(desc, reply_markup=_kb_premium())


@router.message(F.text.func(contains_ci("–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")))
async def premium_apply(m: Message, user: User) -> None:
    """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    with session_scope() as s:
        pr = PremiumRequest(
            user_id=user.id,
            tg_username=(m.from_user.username if m.from_user else None),
            status="new",
            meta={},  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        )
        s.add(pr)

    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)", reply_markup=_kb_premium())
    # ‚Üë —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω, –∫–∞–∫ –≤—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–º–µ–Ω—è–π—Ç–µ.


@router.message(F.text.func(contains_ci("–º–æ–∏ –∑–∞—è–≤–∫–∏")))
async def premium_my_requests(m: Message, user: User) -> None:
    with session_scope() as s:
        rows = s.execute(
            select(PremiumRequest)
            .where(PremiumRequest.user_id == user.id)
            .order_by(desc(PremiumRequest.created_at))
            .limit(5)
        ).scalars().all()

    if not rows:
        await m.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=_kb_premium())
        return

    lines = ["–ú–æ–∏ –∑–∞—è–≤–∫–∏:"]
    for r in rows:
        lines.append(f"‚Ä¢ #{r.id} ‚Äî {r.created_at:%d.%m %H:%M} ‚Äî {_human_status(r.status)}")

    await m.answer("\n".join(lines), reply_markup=_kb_premium())


@router.message(F.text.func(contains_ci("–≤ –º–µ–Ω—é")))
async def premium_back_to_menu(m: Message, user: User) -> None:
    await m.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
