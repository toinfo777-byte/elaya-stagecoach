from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# –µ—Å–ª–∏ –µ—Å—Ç—å helper ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–ø–∏–∑–æ–¥–∞
try:
    from app.storage.repo_extras import save_training_episode
except Exception:
    save_training_episode = None  # –±—É–¥–µ–º –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å

log = logging.getLogger("training")
router = Router(name="training")

LEVEL1_TEXT = (
    "–£—Ä–æ–≤–µ–Ω—å 1 ¬∑ 5 –º–∏–Ω\n\n"
    "–î—ã—Ö–∞–Ω–∏–µ ‚Äî 1 –º–∏–Ω\n"
    "‚Ä¢ –í–¥–æ—Ö –Ω–∞ 4 ‚Äî –ø–∞—É–∑–∞ 2 ‚Äî –≤—ã–¥–æ—Ö –Ω–∞ 6 —á–µ—Ä–µ–∑ ¬´—Å¬ª.\n\n"
    "–†–æ—Ç/—è–∑—ã–∫ ‚Äî 2 –º–∏–Ω\n"
    "‚Ä¢ –¢—Ä–µ–ª—å –≥—É–±–∞–º–∏/—è–∑—ã–∫–æ–º –ø–æ 20‚Äì30 —Å–µ–∫; 10 —â–µ–ª—á–∫–æ–≤ —è–∑—ã–∫–æ–º.\n\n"
    "–ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è ‚Äî 2 –º–∏–Ω\n"
    "‚Ä¢ ¬´–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ‚Ä¶¬ª –æ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∫ –±—ã—Å—Ç—Ä–æ, —Å—Ç–∞–≤—å –ø–∞—É–∑—ã (|)."
)
LEVEL2_TEXT = (
    "–£—Ä–æ–≤–µ–Ω—å 2 ¬∑ 10 –º–∏–Ω\n\n"
    "–î—ã—Ö–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π ‚Äî 3 –º–∏–Ω\n"
    "‚Ä¢ –í–¥–æ—Ö –≤ –±–æ–∫–∞, –≤—ã–¥–æ—Ö –Ω–∞ ¬´—Ñ/—Å¬ª, –¥–µ—Ä–∂–∏ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞.\n\n"
    "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã (–º-–Ω-–∑) ‚Äî 3 –º–∏–Ω\n"
    "‚Ä¢ ¬´–º¬ª –Ω–∞ 3‚Äì5 –Ω–æ—Ç –ø–æ –≥–∞–º–º–µ, –∏—â–µ–º –≤–∏–±—Ä–∞—Ü–∏—é.\n\n"
    "–¢–µ–∫—Å—Ç-—Ä–∏—Ç–º ‚Äî 4 –º–∏–Ω\n"
    "‚Ä¢ –ê–±–∑–∞—Ü: 1) —Ä–æ–≤–Ω–æ, 2) ¬´3-2-1¬ª, 3) —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏."
)
LEVEL3_TEXT = (
    "–£—Ä–æ–≤–µ–Ω—å 3 ¬∑ 15 –º–∏–Ω (–ü—Ä–æ)\n\n"
    "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã ‚Äî 5 –º–∏–Ω\n"
    "‚Ä¢ ¬´–º-–Ω-–Ω–≥¬ª –ø–æ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π; 3 —Å–µ—Ä–∏–∏ ¬´–±–∏-–±–µ-–±–∞-–±–æ-–±—É¬ª.\n\n"
    "–¢–µ–∫—Å—Ç —Å –ø–∞—É–∑–∞–º–∏ ‚Äî 5 –º–∏–Ω\n"
    "‚Ä¢ 6‚Äì8 —Ñ—Ä–∞–∑. –ü–∞—É–∑—ã: 2|1|3|1|2|3 (—Å–µ–∫).\n\n"
    "–ú–∏–∫—Ä–æ-—ç—Ç—é–¥ ‚Äî 5 –º–∏–Ω\n"
    "‚Ä¢ –¢–µ–∑–∏—Å ‚Üí –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—è (20‚Äì30 —Å–µ–∫) ‚Üí –≤—ã–≤–æ–¥."
)

class TrState(StatesGroup):
    level = State()  # '1' | '2' | '3'

def _levels_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 1"), KeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 2")],
            [KeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 3"), KeyboardButton(text="üè† –í –º–µ–Ω—é")],
        ],
        resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å‚Ä¶"
    )

def _done_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)")], [KeyboardButton(text="üè† –í –º–µ–Ω—é")]],
        resize_keyboard=True
    )

# –ø—É–±–ª–∏—á–Ω—ã–π –≤—Ö–æ–¥
async def show_training_levels(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "üèãÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —à–∞–≥–∏.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª. –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî ¬´üè† –í –º–µ–Ω—é¬ª."
    )
    await message.answer(text, reply_markup=_levels_kb())

training_entry = show_training_levels
__all__ = ["router", "show_training_levels", "training_entry"]

@router.message(F.text.in_({"–£—Ä–æ–≤–µ–Ω—å 1","–£—Ä–æ–≤–µ–Ω—å 2","–£—Ä–æ–≤–µ–Ω—å 3"}))
async def open_level(m: Message, state: FSMContext):
    mapping = {
        "–£—Ä–æ–≤–µ–Ω—å 1": ("1", LEVEL1_TEXT),
        "–£—Ä–æ–≤–µ–Ω—å 2": ("2", LEVEL2_TEXT),
        "–£—Ä–æ–≤–µ–Ω—å 3": ("3", LEVEL3_TEXT),
    }
    lvl, text = mapping[m.text]
    await state.set_state(TrState.level)
    await state.update_data(level=lvl)
    await m.answer(text, reply_markup=_done_kb())

@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)")
async def done(m: Message, state: FSMContext):
    data = await state.get_data()
    level = data.get("level")
    if not level:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å üôå", reply_markup=_levels_kb())
        return

    if save_training_episode:
        try:
            await save_training_episode(user_id=m.from_user.id, level=str(level))
            log.info("training: user=%s episode saved (level=%s)", m.from_user.id, level)
        except Exception as e:
            log.exception("training save failed: %s", e)
    else:
        log.warning("save_training_episode not available; progress not persisted")

    await m.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=_levels_kb())
    await state.clear()
