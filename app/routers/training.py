# app/routers/training.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.reply import main_menu_kb  # ‚úÖ —É–∂–µ –µ—Å—Ç—å
from app.storage.repo_extras import log_progress_event  # ‚úÖ –∑–∞–≥–ª—É—à–∫–∞/—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è

router = Router(name="training")


# ========= inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
def kb_levels() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 1 ‚Ä¢ 5‚Äì8 –º–∏–Ω", callback_data="tr:lv:1")],
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ:
        # [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 2 ‚Ä¢ —Å–∫–æ—Ä–æ", callback_data="tr:lv:2:soon")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


def kb_lv1() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:lv1:done")],
        [InlineKeyboardButton(text="‚üµ –ö —É—Ä–æ–≤–Ω—è–º", callback_data="tr:back-levels")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


# ========= –ø—É–±–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ =========
async def show_training_levels(target: Message | CallbackQuery) -> None:
    if isinstance(target, CallbackQuery):
        await target.answer()
        m = target.message
    else:
        m = target

    await m.answer(
        "üèãÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è</b>\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —à–∞–≥–∏.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª. –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî ¬´üè† –í –º–µ–Ω—é¬ª.",
        reply_markup=kb_levels(),
    )


# ========= message-—ç–Ω—Ç—Ä–∏–ø–æ–∏–Ω—Ç—ã =========
@router.message(StateFilter("*"), Command("levels"))
@router.message(StateFilter("*"), Command("training"))
@router.message(StateFilter("*"), F.text.regexp(r"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"))
async def _entry_training(msg: Message):
    await show_training_levels(msg)


# ========= callbacks =========
@router.callback_query(StateFilter("*"), F.data == "tr:back-levels")
async def _back_levels(cq: CallbackQuery):
    await show_training_levels(cq)


@router.callback_query(StateFilter("*"), F.data == "tr:lv:1")
async def _lv1_open(cq: CallbackQuery):
    await cq.answer()
    text = (
        "üéØ <b>–£—Ä–æ–≤–µ–Ω—å 1 ¬∑ 5‚Äì8 –º–∏–Ω—É—Ç</b>\n"
        "1) 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã ‚Äî –¥—ã—Ö–∞–Ω–∏–µ —Ä–æ–≤–Ω–æ–µ.\n"
        "2) –°–∫–∞–∂–∏ –≤—Å–ª—É—Ö –ª—é–±—É—é –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (6‚Äì8 —Å–ª–æ–≤).\n"
        "3) –ü–æ–≤—Ç–æ—Ä–∏ —Ç–æ –∂–µ, –Ω–æ <i>—á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ</i> –∏ –º—è–≥—á–µ.\n"
        "4) –ü–æ—Å—Ç–∞–≤—å —Ç–æ—á–∫—É –≥–æ–ª–æ—Å–æ–º, —Å–¥–µ–ª–∞–π –ø–∞—É–∑—É 1‚Äì2 —Å–µ–∫.\n\n"
        "–ì–æ—Ç–æ–≤(–∞)? –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–ª(–∞) ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    )
    await cq.message.answer(text, reply_markup=kb_lv1())


@router.callback_query(StateFilter("*"), F.data == "tr:lv1:done")
async def _lv1_done(cq: CallbackQuery):
    await cq.answer("–ó–∞—á—Ç–µ–Ω–æ!")
    # –õ—ë–≥–∫–∞—è –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    try:
        await log_progress_event(cq.from_user.id, kind="training", meta={"level": 1})
    except Exception:
        pass

    await cq.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—à—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Å–µ–π—á–∞—Å.",
        reply_markup=kb_levels(),
    )


# ========= —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π =========
__all__ = ["router", "show_training_levels"]
