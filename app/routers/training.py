from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.keyboards.reply import main_menu_kb
from app.storage.repo_extras import log_training_done

router = Router(name="training")


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==============================================================

def _levels_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 1", callback_data="tr:l1")],
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 2", callback_data="tr:l2")],
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 3", callback_data="tr:l3")],
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:done")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")],
    ])


def _done_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:done")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")],
    ])


# === –ü—É–±–ª–∏—á–Ω—ã–µ –≤—Ö–æ–¥—ã =========================================================

async def show_training_levels(message: Message, state: FSMContext):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–º–µ–Ω—é, /training, –¥–∏–ø–ª–∏–Ω–∫)."""
    await state.clear()
    top = (
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n"
        "–£—Ä–æ–≤–µ–Ω—å 1 ‚Äî 5 –º–∏–Ω (—Ä–∞–∑–æ–≥—Ä–µ–≤) ¬∑ –£—Ä–æ–≤–µ–Ω—å 2 ‚Äî 10 –º–∏–Ω (–±–∞–∑–∞) ¬∑ –£—Ä–æ–≤–µ–Ω—å 3 ‚Äî 15 –º–∏–Ω (–ø—Ä–æ).\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    )
    await message.answer(top, reply_markup=_levels_kb())


# –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
training_entry = show_training_levels


@router.message(StateFilter("*"), Command("training"))
async def training_cmd(message: Message, state: FSMContext):
    await show_training_levels(message, state)


# === –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∏ –ø–ª–∞–Ω =====================================================

_PLANS = {
    "l1": (
        "–£—Ä–æ–≤–µ–Ω—å 1 ¬∑ 5 –º–∏–Ω\n\n"
        "–î—ã—Ö–∞–Ω–∏–µ ‚Äî 1 –º–∏–Ω\n"
        "‚Ä¢ –í–¥–æ—Ö –Ω–∞ 4 ‚Äî –ø–∞—É–∑–∞ 2 ‚Äî –≤—ã–¥–æ—Ö –Ω–∞ 6 —á–µ—Ä–µ–∑ ¬´—Å¬ª. –ü–ª–µ—á–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã.\n\n"
        "–†–æ—Ç-—è–∑—ã–∫-—â–µ–ª—á–∫–∏ ‚Äî 2 –º–∏–Ω\n"
        "‚Ä¢ ¬´–¢—Ä–µ–ª—å¬ª –≥—É–±–∞–º–∏/—è–∑—ã–∫–æ–º –ø–æ 20‚Äì30 —Å–µ–∫; 10 —á—ë—Ç–∫–∏—Ö —â–µ–ª—á–∫–æ–≤ —è–∑—ã–∫–æ–º.\n\n"
        "–ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è ‚Äî 2 –º–∏–Ω\n"
        "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–æ ‚Üí –±—ã—Å—Ç—Ä–æ: ¬´–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ‚Ä¶¬ª. –î–æ–±–∞–≤—å –ø–∞—É–∑—ã (|) –º–µ–∂–¥—É —Å–º—ã—Å–ª–æ–≤—ã–º–∏ –∫—É—Å–∫–∞–º–∏.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞). –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî üè† –í –º–µ–Ω—é."
    ),
    "l2": (
        "–£—Ä–æ–≤–µ–Ω—å 2 ¬∑ 10 –º–∏–Ω\n\n"
        "–î—ã—Ö–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π ‚Äî 3 –º–∏–Ω\n"
        "‚Ä¢ –í–¥–æ—Ö –≤–Ω–∏–∑ –≤ –±–æ–∫–∞, –≤—ã–¥–æ—Ö –Ω–∞ ¬´—Ñ/—Å¬ª, –¥–µ—Ä–∂–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞.\n\n"
        "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã (–º-–Ω-–∑) ‚Äî 3 –º–∏–Ω\n"
        "‚Ä¢ –ì—É–¥–∏–º ¬´–º¬ª –Ω–∞ 3‚Äì5 –Ω–æ—Ç –ø–æ –≥–∞–º–º–µ, –æ—â—É—â–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –≤ –≥—É–±–∞—Ö/–Ω–æ—Å–µ/—Å–∫—É–ª–µ.\n\n"
        "–¢–µ–∫—Å—Ç-—Ä–∏—Ç–º ‚Äî 4 –º–∏–Ω\n"
        "‚Ä¢ –ü—Ä–æ—á–∏—Ç–∞–π –∞–±–∑–∞—Ü: —Ä–æ–≤–Ω–æ ‚Üí —Å –ø–∞—É–∑–∞–º–∏ ¬´3-2-1¬ª ‚Üí —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞). –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî üè† –í –º–µ–Ω—é."
    ),
    "l3": (
        "–£—Ä–æ–≤–µ–Ω—å 3 ¬∑ 15 –º–∏–Ω (–ü—Ä–æ)\n\n"
        "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã ‚Äî 5 –º–∏–Ω\n"
        "‚Ä¢ ¬´–º-–Ω-–Ω–≥¬ª –ø–æ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π, –∏—â–µ–º –ø–æ–ª—ë—Ç –±–µ–∑ —Ñ–æ—Ä—Å–∞–∂–∞.\n"
        "‚Ä¢ 3 —Å–µ—Ä–∏–∏ ¬´–±–∏-–±–µ-–±–∞-–±–æ-–±—É¬ª –Ω–∞ –ª—ë–≥–∫–æ–π –æ–ø–æ—Ä–µ, –±–µ–∑ –∑–∞–∂–∏–º–∞.\n\n"
        "–¢–µ–∫—Å—Ç —Å –ø–∞—É–∑–∞–º–∏ ‚Äî 5 –º–∏–Ω\n"
        "‚Ä¢ –í–æ–∑—å–º–∏ 6‚Äì8 —Ñ—Ä–∞–∑. –°—Ö–µ–º–∞ –ø–∞—É–∑: 2|1|3|1|2|3 (—Å–µ–∫).\n"
        "‚Ä¢ –ù–∞ –ø–∞—É–∑–µ ‚Äî –≤–∑–≥–ª—è–¥ –≤ —Ç–æ—á–∫—É/–∂–µ—Å—Ç.\n\n"
        "–ú–∏–∫—Ä–æ-—ç—Ç—é–¥ ‚Äî 5 –º–∏–Ω\n"
        "‚Ä¢ –¢–µ–∑–∏—Å (1 —Ñ—Ä–∞–∑–∞) ‚Üí –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—è (20‚Äì30 —Å–µ–∫) ‚Üí –≤—ã–≤–æ–¥ (1 —Ñ—Ä–∞–∑–∞).\n"
        "‚Ä¢ –°–Ω–∏–º–∏ 30‚Äì45 —Å–µ–∫. –û—Ü–µ–Ω–∏: —Ç–µ–º–ø, –ø–∞—É–∑—ã, –∞–∫—Ü–µ–Ω—Ç—ã.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞). –•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî üè† –í –º–µ–Ω—é."
    ),
}


@router.callback_query(F.data.in_({"tr:l1", "tr:l2", "tr:l3"}))
async def training_level_selected(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    level = cb.data.split(":")[1]  # l1/l2/l3
    await state.update_data(training_level=level)
    await cb.message.answer(_PLANS[level], reply_markup=_done_kb())


# === –ó–∞—á—ë—Ç –¥–Ω—è ===============================================================

@router.callback_query(F.data == "tr:done")
async def training_done(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    level = data.get("training_level")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –±–µ–∑ –≤—ã–±–æ—Ä–∞

    try:
        await log_training_done(cb.from_user.id, level=level)
    except Exception:
        # –Ω–µ –º–µ—à–∞–µ–º UX'—É, –Ω–æ –≤ –ª–æ–≥–∞—Ö —É–≤–∏–¥–∏—à—å –æ—à–∏–±–∫—É
        pass

    await cb.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!")
    await state.clear()
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())


# === –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∏–º–µ–Ω–∞ ===========================================

__all__ = ["router", "show_training_levels", "training_entry"]
