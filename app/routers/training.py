# app/routers/training.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.keyboards.menu import main_menu, BTN_TRAINING
from app.keyboards.training import levels_kb, actions_kb, skip_confirm_kb
from app.storage.repo import log_training  # –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç

router = Router(name="training")

TRAINING_PROGRAMS = {
    "beginner": "–†–∞–∑–æ–≥—Ä–µ–≤ ¬∑ 5 –º–∏–Ω—É—Ç\n1) –î—ã—Ö–∞–Ω–∏–µ: 1 –º–∏–Ω\n2) –†–æ—Ç‚Äì—è–∑—ã–∫‚Äì—â–µ–ª—á–∫–∏: 2 –º–∏–Ω\n3) –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è: 2 –º–∏–Ω\nüí° –°–æ–≤–µ—Ç: –∑–∞–ø–∏—à–∏ 15 —Å–µ–∫ –¥–æ/–ø–æ—Å–ª–µ.",
    "medium":   "–ì–æ–ª–æ—Å ¬∑ 10 –º–∏–Ω—É—Ç\n1) –ì—É–¥–µ–Ω–∏–µ –Ω–∞ ¬´–º¬ª: 2 –º–∏–Ω\n2) –°–∫–æ–ª—å–∂–µ–Ω–∏—è (¬´—Å–∏—Ä–µ–Ω–∞¬ª): 3 –º–∏–Ω\n3) –ß–∏—Å—Ç–∞—è –¥–∏–∫—Ü–∏—è: 5 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫\nüí° –°–æ–≤–µ—Ç: –≥–æ–≤–æ—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ.",
    "pro":      "–°—Ü–µ–Ω–∞ ¬∑ 15 –º–∏–Ω—É—Ç\n1) –î—ã—Ö. —Ü–∏–∫–ª: 3 –º–∏–Ω\n2) –†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã: 5 –º–∏–Ω\n3) –¢–µ–∫—Å—Ç —Å –∑–∞–¥–∞—á–µ–π: 7 –º–∏–Ω\nüí° –°–æ–≤–µ—Ç: —Ä–∞–±–æ—Ç–∞–π —Å—Ç–æ—è, –∫–æ—Ä–ø—É—Å —Å–≤–æ–±–æ–¥–µ–Ω.",
}

def _extract_level(data: str, default: str = "beginner") -> str:
    try:
        parts = data.split(":")
        for tok in reversed(parts):
            if tok in ("beginner", "medium", "pro"):
                return tok
    except Exception:
        pass
    return default

async def show_training_levels(message: Message):
    await message.answer(
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´–í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=levels_kb(),
    )

start_training = show_training_levels

@router.message(Command("training"), StateFilter(None))
@router.message(F.text == BTN_TRAINING, StateFilter(None))
async def training_entry(m: Message):
    await show_training_levels(m)

@router.callback_query(F.data.startswith("training:level:"))
async def on_level_pick(c: CallbackQuery, state: FSMContext):
    await c.answer()
    level = _extract_level(c.data)
    await state.update_data(level=level)
    await c.message.answer(TRAINING_PROGRAMS[level], reply_markup=actions_kb(level))

@router.callback_query(F.data.startswith("tr:lvl:"))
async def on_level_pick_legacy(c: CallbackQuery, state: FSMContext):
    await c.answer()
    level = _extract_level(c.data)
    await state.update_data(level=level)
    await c.message.answer(TRAINING_PROGRAMS[level], reply_markup=actions_kb(level))

@router.callback_query(F.data.startswith("training:done:"))
async def on_done_with_lvl(c: CallbackQuery, state: FSMContext):
    await c.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")
    level = _extract_level(c.data) or (await state.get_data()).get("level", "beginner")
    await log_training(c.from_user.id, level=level, done=True)
    await c.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=main_menu())

@router.callback_query(F.data == "training:done")
async def on_done_plain(c: CallbackQuery, state: FSMContext):
    await c.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")
    level = (await state.get_data()).get("level", "beginner")
    await log_training(c.from_user.id, level=level, done=True)
    await c.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=main_menu())

@router.callback_query(F.data.startswith("tr:done:"))
async def on_done_legacy(c: CallbackQuery, state: FSMContext):
    await c.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")
    level = _extract_level(c.data) or (await state.get_data()).get("level", "beginner")
    await log_training(c.from_user.id, level=level, done=True)
    await c.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=main_menu())

@router.callback_query(F.data.startswith("training:skip:"))
async def on_skip_request(c: CallbackQuery, state: FSMContext):
    await c.answer()
    level = _extract_level(c.data) or (await state.get_data()).get("level", "beginner")
    await state.update_data(level=level)
    await c.message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=skip_confirm_kb(level))

@router.callback_query(F.data == "training:skip")
async def on_skip_request_plain(c: CallbackQuery, state: FSMContext):
    await c.answer()
    level = (await state.get_data()).get("level", "beginner")
    await c.message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=skip_confirm_kb(level))

@router.callback_query(F.data.startswith("tr:skip:"))
async def on_skip_request_legacy(c: CallbackQuery, state: FSMContext):
    await c.answer()
    level = _extract_level(c.data) or (await state.get_data()).get("level", "beginner")
    await state.update_data(level=level)
    await c.message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=skip_confirm_kb(level))

@router.callback_query(F.data.startswith("training:skip-confirm:"))
async def on_skip_confirm(c: CallbackQuery, state: FSMContext):
    await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    level = _extract_level(c.data) or (await state.get_data()).get("level", "beginner")
    await log_training(c.from_user.id, level=level, done=False)
    await c.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu())

@router.callback_query(F.data == "training:skip-confirm")
async def on_skip_confirm_plain(c: CallbackQuery, state: FSMContext):
    await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    level = (await state.get_data()).get("level", "beginner")
    await log_training(c.from_user.id, level=level, done=False)
    await c.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu())

@router.callback_query(F.data.startswith("training:skip-cancel:"))
async def on_skip_cancel(c: CallbackQuery):
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await c.message.answer("–¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–≤–µ–Ω—å –µ—â—ë —Ä–∞–∑ üëá", reply_markup=levels_kb())

@router.callback_query(F.data == "training:skip-cancel")
async def on_skip_cancel_plain(c: CallbackQuery):
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await c.message.answer("–¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–≤–µ–Ω—å –µ—â—ë —Ä–∞–∑ üëá", reply_markup=levels_kb())

@router.message(F.text.in_({"–ú–µ–Ω—é", "/menu"}))
async def leave_to_menu(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu())
