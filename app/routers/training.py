# app/routers/training.py
from __future__ import annotations

from datetime import date

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from app.keyboards.menu import main_menu, BTN_TRAINING
from app.keyboards.training import levels_kb, actions_kb, skip_confirm_kb
from app.storage.repo import repo_add_training_entry  # –∑–∞–ø–∏—Å—å –≤ –ë–î

router = Router(name="training")

TRAINING_PROGRAMS = {
    "beginner": "–†–∞–∑–æ–≥—Ä–µ–≤ ¬∑ 5 –º–∏–Ω—É—Ç\n1) –î—ã—Ö–∞–Ω–∏–µ: 1 –º–∏–Ω\n2) –†–æ—Ç‚Äì—è–∑—ã–∫‚Äì—â–µ–ª—á–∫–∏: 2 –º–∏–Ω\n3) –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è: 2 –º–∏–Ω\nüí° –°–æ–≤–µ—Ç: –∑–∞–ø–∏—à–∏ 15 —Å–µ–∫ –¥–æ/–ø–æ—Å–ª–µ.",
    "medium":   "–ì–æ–ª–æ—Å ¬∑ 10 –º–∏–Ω—É—Ç\n1) –ì—É–¥–µ–Ω–∏–µ –Ω–∞ ¬´–º¬ª: 2 –º–∏–Ω\n2) –°–∫–æ–ª—å–∂–µ–Ω–∏—è (¬´—Å–∏—Ä–µ–Ω–∞¬ª): 3 –º–∏–Ω\n3) –ß–∏—Å—Ç–∞—è –¥–∏–∫—Ü–∏—è: 5 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫\nüí° –°–æ–≤–µ—Ç: –≥–æ–≤–æ—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ.",
    "pro":      "–°—Ü–µ–Ω–∞ ¬∑ 15 –º–∏–Ω—É—Ç\n1) –î—ã—Ö. —Ü–∏–∫–ª: 3 –º–∏–Ω\n2) –†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã: 5 –º–∏–Ω\n3) –¢–µ–∫—Å—Ç —Å –∑–∞–¥–∞—á–µ–π: 7 –º–∏–Ω\nüí° –°–æ–≤–µ—Ç: —Ä–∞–±–æ—Ç–∞–π —Å—Ç–æ—è, –∫–æ—Ä–ø—É—Å —Å–≤–æ–±–æ–¥–µ–Ω.",
}

@router.message(F.text == BTN_TRAINING)  # –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é
async def training_entry(m: Message):
    await m.answer(
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´–í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=levels_kb(),
    )

@router.callback_query(F.data.startswith("training:level:"))
async def on_level_pick(c: CallbackQuery):
    level = c.data.split(":")[-1]
    await c.message.answer(TRAINING_PROGRAMS[level], reply_markup=actions_kb(level))
    await c.answer()

@router.callback_query(F.data.startswith("training:done:"))
async def on_done(c: CallbackQuery):
    level = c.data.split(":")[-1]
    # –∑–∞–ø–∏—Å—å –≤ –ë–î
    await repo_add_training_entry(
        user_id=c.from_user.id, day=date.today(), level=level, done=True
    )
    await c.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=main_menu())
    await c.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ")

@router.callback_query(F.data.startswith("training:skip:"))
async def on_skip_request(c: CallbackQuery):
    level = c.data.split(":")[-1]
    await c.message.answer("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=skip_confirm_kb(level))
    await c.answer()

@router.callback_query(F.data.startswith("training:skip-confirm:"))
async def on_skip_confirm(c: CallbackQuery):
    level = c.data.split(":")[-1]
    await repo_add_training_entry(
        user_id=c.from_user.id, day=date.today(), level=level, done=False
    )
    await c.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞.", reply_markup=main_menu())
    await c.answer("–ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∞–Ω")

@router.callback_query(F.data.startswith("training:skip-cancel:"))
async def on_skip_cancel(c: CallbackQuery):
    await c.message.answer("–¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π —É—Ä–æ–≤–µ–Ω—å –µ—â—ë —Ä–∞–∑ üëá", reply_markup=levels_kb())
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
