from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.keyboards.menu import main_menu, BTN_TRAINING
from app.storage.mvp_repo import log_training

router = Router(name="training")

# –ö–æ–Ω—Ç–µ–Ω—Ç MVP (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≤—ã–Ω–µ—Å—Ç–∏ –≤ YAML)
LEVELS = {
    "beginner": {
        "title": "–†–∞–∑–æ–≥—Ä–µ–≤ ¬∑ 5 –º–∏–Ω—É—Ç",
        "content": (
            "1) –î—ã—Ö–∞–Ω–∏–µ: 1 –º–∏–Ω\n"
            "2) –†–æ—Ç‚Äì—è–∑—ã–∫‚Äì—â—ë–ª—á–∫–∏: 2 –º–∏–Ω\n"
            "3) –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è: 2 –º–∏–Ω\n"
            "‚öë –°–æ–≤–µ—Ç: –∑–∞–ø–∏—à–∏ 15 —Å–µ–∫—É–Ω–¥ —Ä–µ—á–∏ –¥–æ/–ø–æ—Å–ª–µ."
        )
    },
    "medium": {
        "title": "–ì–æ–ª–æ—Å ¬∑ 10 –º–∏–Ω—É—Ç",
        "content": (
            "1) –ì—É–¥–µ–Ω–∏–µ –Ω–∞ ¬´–º¬ª: 2 –º–∏–Ω\n"
            "2) –°–∫–æ–ª—å–∂–µ–Ω–∏—è (¬´—Å–∏—Ä–µ–Ω–∞¬ª): 3 –º–∏–Ω\n"
            "3) –ß–∏—Å—Ç–∞—è –¥–∏–∫—Ü–∏—è: 5 —Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–æ–∫\n"
            "‚öë –°–æ–≤–µ—Ç: –≥–æ–≤–æ—Ä–∏ —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ, —á–µ–º –æ–±—ã—á–Ω–æ."
        )
    },
    "pro": {
        "title": "–°—Ü–µ–Ω–∞ ¬∑ 15 –º–∏–Ω—É—Ç",
        "content": (
            "1) –î—ã—Ö–∞–Ω–∏–µ + –∫–æ—Ä–ø—É—Å: 3 –º–∏–Ω\n"
            "2) –†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã: 5 –º–∏–Ω\n"
            "3) –¢–µ–∫—Å—Ç —Å –∑–∞–¥–∞—á–µ–π: 7 –º–∏–Ω\n"
            "‚öë –°–æ–≤–µ—Ç: —Ü–µ–ª—å —Ñ—Ä–∞–∑—ã > –≥—Ä–æ–º–∫–æ—Å—Ç—å."
        )
    },
}

def levels_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="lvl:beginner")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="lvl:medium")],
        [InlineKeyboardButton(text="üî¥ –ü—Ä–æ", callback_data="lvl:pro")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def done_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="train:done"),
            InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",  callback_data="train:skip"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


class TrainSG(StatesGroup):
    choose = State()
    running = State()


@router.message(F.text == BTN_TRAINING)
@router.message(Command("training"))
async def training_entry(m: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(TrainSG.choose)
    await m.answer(
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´–í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=main_menu()
    )
    await m.answer("–£—Ä–æ–≤–Ω–∏:", reply_markup=levels_kb())


@router.callback_query(F.data.startswith("lvl:"), TrainSG.choose)
async def pick_level(cq: CallbackQuery, state: FSMContext) -> None:
    level = cq.data.split(":", 1)[1]
    data = LEVELS.get(level)
    if not data:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", show_alert=True)
        return
    await state.update_data(level=level)
    await state.set_state(TrainSG.running)
    await cq.message.answer(
        f"<b>{data['title']}</b>\n{data['content']}",
        reply_markup=done_kb()
    )
    await cq.answer()


@router.callback_query(F.data == "train:done", TrainSG.running)
async def mark_done(cq: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    level = data.get("level", "beginner")
    log_training(cq.from_user.id, level, True)
    await state.clear()
    await cq.message.answer(
        "üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.",
        reply_markup=main_menu()
    )
    await cq.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")


@router.callback_query(F.data == "train:skip", TrainSG.running)
async def mark_skip(cq: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    level = data.get("level", "beginner")
    # –ú–æ–∂–Ω–æ –Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫; –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ ¬´–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª
    log_training(cq.from_user.id, level, False)
    await state.clear()
    await cq.message.answer("–û–∫, –≤–µ—Ä–Ω—ë–º—Å—è –∑–∞–≤—Ç—Ä–∞. üí´", reply_markup=main_menu())
    await cq.answer()
