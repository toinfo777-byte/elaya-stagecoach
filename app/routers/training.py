# app/routers/training.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb

router = Router(name="training")

def training_levels_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 1", callback_data="tr:l1")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 2", callback_data="tr:l2")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 3", callback_data="tr:l3")
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:done")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")
    kb.adjust(3, 2)
    return kb.as_markup()

TRAINING = {
    "l1": (
        "–†–∞–∑–æ–≥—Ä–µ–≤ ¬∑ ~5 –º–∏–Ω\n"
        "1) –î—ã—Ö–∞–Ω–∏–µ ‚Äî 1 –º–∏–Ω\n"
        "2) –†–æ—Ç‚Äì—è–∑—ã–∫‚Äì—â–µ–ª—á–∫–∏ ‚Äî 2 –º–∏–Ω\n"
        "3) –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è ‚Äî 2 –º–∏–Ω\n\n"
        "üí° –°–æ–≤–µ—Ç: –∑–∞–ø–∏—à–∏ 15 —Å–µ–∫ –¥–æ/–ø–æ—Å–ª–µ."
    ),
    "l2": (
        "–ë–∞–∑–∞ ¬∑ ~10 –º–∏–Ω\n"
        "1) –ü–∞—É–∑—ã –∏ –∞—Ç–∞–∫–∞ ‚Äî 3 –º–∏–Ω\n"
        "2) –¢–µ–º–±—Ä ‚Äî 3 –º–∏–Ω\n"
        "3) –î–∏–∫—Ü–∏—è (—Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏) ‚Äî 4 –º–∏–Ω"
    ),
    "l3": (
        "–ü—Ä–æ ¬∑ ~15 –º–∏–Ω\n"
        "1) –†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã ‚Äî 5 –º–∏–Ω\n"
        "2) –¢–µ–∫—Å—Ç —Å –ø–∞—É–∑–∞–º–∏ ‚Äî 5 –º–∏–Ω\n"
        "3) –ú–∏–∫—Ä–æ-—ç—Ç—é–¥ ‚Äî 5 –º–∏–Ω"
    ),
}

async def show_training_levels(msg: Message):
    await msg.answer(
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=training_levels_kb()
    )

@router.message(StateFilter("*"), Command("training"))
async def training_start(message: Message):
    await show_training_levels(message)

# –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
training_entry = training_start

@router.callback_query(F.data == "go:training")
async def training_from_help(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_reply_markup()
    await show_training_levels(cb.message)

@router.callback_query(F.data.in_({"tr:l1", "tr:l2", "tr:l3"}))
async def training_show_plan(cb: CallbackQuery):
    await cb.answer()
    key = cb.data.split(":")[1]
    await cb.message.answer(TRAINING[key])

@router.callback_query(F.data == "tr:done")
async def training_done(cb: CallbackQuery):
    await cb.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")
    await cb.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!", reply_markup=main_menu_kb())
