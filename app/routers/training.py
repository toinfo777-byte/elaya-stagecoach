from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.routers.help import show_main_menu
try:
    from app.storage.repo_extras import log_progress_event  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
except Exception:
    async def log_progress_event(*args, **kwargs):  # –∑–∞–≥–ª—É—à–∫–∞
        return None

tr_router = Router(name="training")


def _levels_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 1", callback_data="tr:l1")],
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 2", callback_data="tr:l2")],
        [InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å 3", callback_data="tr:l3")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _done_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:done")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])


async def show_training_levels(obj: Message | CallbackQuery):
    text = (
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    )
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        await obj.message.answer(text, reply_markup=_levels_kb())
    else:
        await obj.answer(text, reply_markup=_levels_kb())


LEVELS = {
    "tr:l1": (
        "–£—Ä–æ–≤–µ–Ω—å 1 ¬∑ 5 –º–∏–Ω\n\n"
        "–î—ã—Ö–∞–Ω–∏–µ ‚Äî 1 –º–∏–Ω\n‚Ä¢ –í–¥–æ—Ö 4 ‚Äî –ø–∞—É–∑–∞ 2 ‚Äî –≤—ã–¥–æ—Ö 6 –Ω–∞ ¬´—Å¬ª.\n\n"
        "–†–æ—Ç-—è–∑—ã–∫-—â–µ–ª—á–∫–∏ ‚Äî 2 –º–∏–Ω\n‚Ä¢ –¢—Ä–µ–ª—å –≥—É–±–∞–º–∏/—è–∑—ã–∫–æ–º 20‚Äì30 —Å–µ–∫; 10 —â–µ–ª—á–∫–æ–≤.\n\n"
        "–ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è ‚Äî 2 –º–∏–Ω\n‚Ä¢ ¬´–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ‚Ä¶¬ª –æ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ –∫ –±—ã—Å—Ç—Ä–æ.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    ),
    "tr:l2": (
        "–£—Ä–æ–≤–µ–Ω—å 2 ¬∑ 10 –º–∏–Ω\n\n"
        "–î—ã—Ö–∞–Ω–∏–µ —Å –æ–ø–æ—Ä–æ–π ‚Äî 3 –º–∏–Ω\n‚Ä¢ –í–¥–æ—Ö –≤–Ω–∏–∑ –≤ –±–æ–∫–∞, –≤—ã–¥–æ—Ö –Ω–∞ ¬´—Ñ/—Å¬ª.\n\n"
        "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã (–º-–Ω-–∑) ‚Äî 3 –º–∏–Ω\n‚Ä¢ ¬´–º¬ª –Ω–∞ 3‚Äì5 –Ω–æ—Ç, –∏—â–µ–º –≤–∏–±—Ä–∞—Ü–∏—é.\n\n"
        "–¢–µ–∫—Å—Ç‚Äì—Ä–∏—Ç–º ‚Äî 4 –º–∏–Ω\n‚Ä¢ –ê–±–∑–∞—Ü —Ä–æ–≤–Ω–æ ‚Üí —Å –ø–∞—É–∑–∞–º–∏ 3‚Äì2‚Äì1 ‚Üí —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    ),
    "tr:l3": (
        "–£—Ä–æ–≤–µ–Ω—å 3 ¬∑ 15 –º–∏–Ω (–ü—Ä–æ)\n\n"
        "–†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã ‚Äî 5 –º–∏–Ω\n‚Ä¢ ¬´–º-–Ω-–Ω–≥¬ª –ø–æ –Ω–∏—Å—Ö–æ–¥—è—â–µ–π, –ø–æ–ª—ë—Ç –±–µ–∑ —Ñ–æ—Ä—Å–∞–∂–∞.\n\n"
        "–¢–µ–∫—Å—Ç —Å –ø–∞—É–∑–∞–º–∏ ‚Äî 5 –º–∏–Ω\n‚Ä¢ 6‚Äì8 —Ñ—Ä–∞–∑, —Å—Ö–µ–º–∞ –ø–∞—É–∑ 2|1|3|1|2|3.\n\n"
        "–ú–∏–∫—Ä–æ-—ç—Ç—é–¥ ‚Äî 5 –º–∏–Ω\n‚Ä¢ –¢–µ–∑–∏—Å ‚Üí –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—è (20‚Äì30 —Å–µ–∫) ‚Üí –≤—ã–≤–æ–¥.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª."
    ),
}

@tr_router.callback_query(F.data.in_(LEVELS.keys()))
async def tr_level(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer(LEVELS[cb.data], reply_markup=_done_kb())

@tr_router.callback_query(F.data == "tr:done")
async def tr_done(cb: CallbackQuery):
    await cb.answer("–ó–∞—Å—á–∏—Ç–∞–Ω–æ!")
    try:
        await log_progress_event(cb.from_user.id, kind="training", meta={})
    except Exception:
        pass
    await cb.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!")
    await show_main_menu(cb)
