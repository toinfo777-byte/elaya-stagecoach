from aiogram import Router, F
from aiogram.filters import Command  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest


from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User, DrillRun
from app.services.drills import ensure_drills_in_db, choose_drill_for_user

router = Router(name="training")

class TrainingFlow(StatesGroup):
    steps = State()
    reflect_selecting = State()

def _step_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data="step_next")],
            [
                InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data="step_skip"),
                InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="step_done"),
            ],
        ]
    )

def _reflect_keyboard(selected: set[str], options: list[str]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, opt in enumerate(options):
        mark = "‚úÖ " if opt in selected else ""
        row.append(InlineKeyboardButton(text=f"{mark}{opt}", callback_data=f"mk_{i}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å üíæ", callback_data="mk_save")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(F.text == "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è")
async def training_entry(m: Message, state: FSMContext):
    with session_scope() as s:
        ensure_drills_in_db(s)
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.", reply_markup=main_menu())
            return
        drill = choose_drill_for_user(s, u)
    p = drill.payload_json
    await state.update_data(
        drill_id=p["id"], steps=p["steps"], idx=0, check_q=p["check_question"], markers=p["success_markers"]
    )
    await state.set_state(TrainingFlow.steps)
    await m.answer(f"–≠—Ç—é–¥: {p['title']}\n–®–∞–≥ 1/{len(p['steps'])}:\n{p['steps'][0]}", reply_markup=_step_keyboard())

# ‚Üê –ù–û–í–û–ï: –∫–æ–º–∞–Ω–¥–∞ /training
@router.message(Command("training"))
async def training_cmd(m: Message, state: FSMContext):
    return await training_entry(m, state)

# ‚Üê –ù–û–í–û–ï: –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è, –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏/–ø—Ä–æ–±–µ–ª—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
@router.message(lambda m: isinstance(m.text, str) and "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è" in m.text)
async def training_fuzzy(m: Message, state: FSMContext):
    return await training_entry(m, state)


@router.callback_query(TrainingFlow.steps, F.data.in_({"step_next", "step_skip", "step_done"}))
async def steps_flow(cb: CallbackQuery, state: FSMContext):
    d = await state.get_data()
    steps = d["steps"]
    idx = int(d.get("idx", 0))

    if cb.data == "step_done":
        await state.set_state(TrainingFlow.reflect_selecting)
        await cb.message.edit_text(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è: {d['check_q']}")
        await cb.message.answer("–û—Ç–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:", reply_markup=_reflect_keyboard(set(), d["markers"]))
        await cb.answer()
        return

    idx = idx + 1 if cb.data == "step_next" else idx + 2
    if idx >= len(steps):
        idx = len(steps) - 1
    await state.update_data(idx=idx)
    await cb.message.edit_text(f"–®–∞–≥ {idx+1}/{len(steps)}:\n{steps[idx]}", reply_markup=_step_keyboard())
    await cb.answer()

@router.callback_query(TrainingFlow.reflect_selecting, F.data.startswith("mk_"))
async def reflect_markers(cb: CallbackQuery, state: FSMContext):
    d = await state.get_data()
    selected = set(d.get("selected", set()))
    markers = d["markers"]

    if cb.data == "mk_save":
        success = len(selected) >= 2
        with session_scope() as s:
            u = s.query(User).filter_by(tg_id=cb.from_user.id).first()
            if u:
                run = DrillRun(
                    user_id=u.id,
                    drill_id=d["drill_id"],
                    result_json={"selected": list(selected)},
                    success_bool=success,
                )
                s.add(run)
                u.streak = (u.streak or 0) + 1
                s.commit()
        await state.clear()
        verdict = "—É—Å–ø–µ—Ö" if success else "–Ω—É–∂–Ω–æ –µ—â—ë —Ä–∞–∑–æ–∫"
        await cb.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {verdict}. –°—Ç—Ä–∏–∫ +1. üéâ", reply_markup=main_menu())
        await cb.answer()
        return

    _, ixs = cb.data.split("_", 1)
    i = int(ixs)
    if 0 <= i < len(markers):
        if markers[i] in selected:
            selected.remove(markers[i])
        else:
            selected.add(markers[i])

    await state.update_data(selected=selected)
    await cb.message.edit_reply_markup(reply_markup=_reflect_keyboard(selected, markers))
    await cb.answer()
