# app/routers/training.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb, BTN_TRAINING

router = Router(name="training")

# ‚Äî‚Äî‚Äî UI ‚Äî‚Äî‚Äî

def kb_training_levels():
    kb = InlineKeyboardBuilder()
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 1 ¬∑ 5 –º–∏–Ω", callback_data="tr:l1")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 2 ¬∑ 10 –º–∏–Ω", callback_data="tr:l2")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 3 ¬∑ 15 –º–∏–Ω", callback_data="tr:l3")
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)",    callback_data="tr:done")
    kb.button(text="üè† –í –º–µ–Ω—é",         callback_data="go:menu")
    kb.adjust(1, 1, 1, 1, 1)
    return kb.as_markup()

TRAINING_PLANS = {
    "l1": (
        "–†–∞–∑–æ–≥—Ä–µ–≤ ¬∑ 5 –º–∏–Ω—É—Ç\n"
        "1) –î—ã—Ö–∞–Ω–∏–µ ‚Äî 1 –º–∏–Ω\n"
        "2) –†–æ—Ç/—è–∑—ã–∫/—â–µ–ª—á–∫–∏ ‚Äî 2 –º–∏–Ω\n"
        "3) –ê—Ä—Ç–∏–∫—É–ª—è—Ü–∏—è ‚Äî 2 –º–∏–Ω\n\n"
        "üí° –°–æ–≤–µ—Ç: –∑–∞–ø–∏—à–∏ 15 —Å–µ–∫ ¬´–¥–æ/–ø–æ—Å–ª–µ¬ª."
    ),
    "l2": (
        "–ë–∞–∑–∞ ¬∑ 10 –º–∏–Ω—É—Ç\n"
        "1) –ü–∞—É–∑—ã –∏ –∞—Ç–∞–∫–∞ —Ñ—Ä–∞–∑—ã ‚Äî 3 –º–∏–Ω\n"
        "2) –¢–µ–º–±—Ä ‚Äî 3 –º–∏–Ω\n"
        "3) –î–∏–∫—Ü–∏—è (—Å–∫–æ—Ä–æ–≥–æ–≤–æ—Ä–∫–∏) ‚Äî 4 –º–∏–Ω"
    ),
    "l3": (
        "–ü—Ä–æ ¬∑ 15 –º–∏–Ω—É—Ç\n"
        "1) –†–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã ‚Äî 5 –º–∏–Ω\n"
        "2) –¢–µ–∫—Å—Ç —Å –ø–∞—É–∑–∞–º–∏ ‚Äî 5 –º–∏–Ω\n"
        "3) –ú–∏–∫—Ä–æ-—ç—Ç—é–¥ ‚Äî 5 –º–∏–Ω"
    ),
}

# ‚Äî‚Äî‚Äî Entry points ‚Äî‚Äî‚Äî

async def training_start(msg: Message, state: FSMContext | None = None) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏, –¥–∏–ø–ª–∏–Ω–∫–∏)."""
    if state is not None:
        await state.clear()
    await msg.answer(
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=kb_training_levels(),
    )

# ‚úÖ –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
training_entry = training_start

# –ö–æ–º–∞–Ω–¥–∞ /training ‚Äî –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(StateFilter("*"), Command("training"))
async def cmd_training(msg: Message, state: FSMContext):
    await training_start(msg, state)

# –ö–Ω–æ–ø–∫–∞ –∏–∑ ReplyKeyboard (¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª)
@router.message(StateFilter("*"), F.text == BTN_TRAINING)
async def btn_training(msg: Message, state: FSMContext):
    await training_start(msg, state)

# –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é (help / go-–∫–Ω–æ–ø–∫–∏)
@router.callback_query(StateFilter("*"), F.data == "go:training")
async def go_training(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await training_start(cb.message, state)

# ‚Äî‚Äî‚Äî Callbacks ‚Äî‚Äî‚Äî

@router.callback_query(F.data.in_({"tr:l1", "tr:l2", "tr:l3"}))
async def show_plan(cb: CallbackQuery):
    await cb.answer()
    key = cb.data.split(":")[1]
    await cb.message.answer(TRAINING_PLANS[key])

@router.callback_query(F.data == "tr:done")
async def training_done(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å/—Å—Ç—Ä–∏–∫
    await cb.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!")
    await state.clear()
    await cb.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
