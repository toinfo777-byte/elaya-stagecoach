# app/routers/training.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.keyboards.reply import main_menu_kb, BTN_TRAINING

router = Router(name="training")

class Training(StatesGroup):
    wait_done = State()

def training_levels_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 1", callback_data="tr:l1")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 2", callback_data="tr:l2")
    kb.button(text="–£—Ä–æ–≤–µ–Ω—å 3", callback_data="tr:l3")
    kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="tr:done")
    kb.adjust(2, 2)
    return kb.as_markup()

async def _start_training_core(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è\n\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª.",
        reply_markup=training_levels_kb()
    )
    await state.set_state(Training.wait_done)

# ‚Üê –Ω–æ–≤–æ–µ: —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, —á—Ç–æ–±—ã –µ—ë –º–æ–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å start.py
async def training_start(message: Message, state: FSMContext):
    await _start_training_core(message, state)

@router.message(StateFilter("*"), F.text == BTN_TRAINING)
async def training_btn(message: Message, state: FSMContext):
    await _start_training_core(message, state)

@router.message(StateFilter("*"), Command("training"))
async def training_cmd(message: Message, state: FSMContext):
    await _start_training_core(message, state)

@router.callback_query(F.data.startswith("tr:"), Training.wait_done)
async def training_actions(call: CallbackQuery, state: FSMContext):
    payload = call.data.split(":", 1)[1]
    await call.answer()
    if payload == "done":
        await call.message.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å –∑–∞—Å—á–∏—Ç–∞–Ω. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞!")
        await state.clear()
        return await call.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
    # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await call.message.answer("–í—ã–±–µ—Ä–∏ ¬´‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª(–∞)¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.")

# ‚Üê –∞–ª–∏–∞—Å –¥–ª—è legacy-–∏–º–ø–æ—Ä—Ç–∞: from app.routers.training import training_entry
training_entry = training_start
