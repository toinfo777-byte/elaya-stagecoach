# app/routers/feedback_demo.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.bot.states import FeedbackStates

router = Router(name="feedback_demo")


# --- keyboard ---------------------------------------------------------------

def _feedback_kb() -> InlineKeyboardMarkup:
    """
    –ú–∏–Ω–∏-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–æ–∫ + ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª.
    –ü—Ä–µ—Ñ–∏–∫—Å callback_data: demo_fb:...
    """
    rows = [
        [
            InlineKeyboardButton(text="üî•", callback_data="demo_fb:rate:hot"),
            InlineKeyboardButton(text="üëå", callback_data="demo_fb:rate:ok"),
            InlineKeyboardButton(text="üòê", callback_data="demo_fb:rate:meh"),
        ],
        [InlineKeyboardButton(text="‚úç 1 —Ñ—Ä–∞–∑–∞", callback_data="demo_fb:phrase")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# --- entry point ------------------------------------------------------------

@router.message(F.text.in_({"/feedback", "/fb", "–æ—Ç–∑—ã–≤"}))
async def feedback_entry(msg: Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–¥–µ —É–≥–æ–¥–Ω–æ."""
    # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Å–±—Ä–æ—Å–∏–º ¬´–æ–∂–∏–¥–∞–Ω–∏–µ —Ñ—Ä–∞–∑—ã¬ª, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—á–∞–ª —Å –∫–æ–º–∞–Ω–¥—ã
    if await state.get_state() == FeedbackStates.wait_phrase:
        await state.clear()

    await msg.answer("–ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç —ç–ø–∏–∑–æ–¥? –û—Ü–µ–Ω–∏—Ç–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤:",
                     reply_markup=_feedback_kb())


# --- rate buttons -----------------------------------------------------------

@router.callback_query(F.data.startswith("demo_fb:rate:"))
async def feedback_rate(cb: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π üî•/üëå/üòê.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –ë–î/–º–µ—Ç—Ä–∏–∫–∏ (cb.from_user.id, –∑–Ω–∞—á–µ–Ω–∏–µ).
    """
    _, _, value = cb.data.partition("demo_fb:rate:")
    # TODO: save rating (cb.from_user.id, value)

    # –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤–æ –≤—Å–ø–ª—ã–≤–∞—à–∫–µ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π reply
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ!")
    if cb.message:
        await cb.message.reply("–ü—Ä–∏–Ω—è–ª üëç")


# --- phrase flow ------------------------------------------------------------

@router.callback_query(F.data == "demo_fb:phrase")
async def feedback_phrase_start(cb: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞–∂–∞—Ç–∞ ¬´‚úç 1 —Ñ—Ä–∞–∑–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞–≤–∏–º FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await cb.answer()  # —Å–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    await state.set_state(FeedbackStates.wait_phrase)
    await cb.message.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )


@router.message(FeedbackStates.wait_phrase, F.text)
async def feedback_phrase_save(msg: Message, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º, ¬´—Å–æ—Ö—Ä–∞–Ω—è–µ–º¬ª, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    text = (msg.text or "").strip()
    if not text or len(text) > 120:
        await msg.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # TODO: save phrase (msg.from_user.id, text)

    await state.clear()
    await msg.reply("–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏–ª üëç")


@router.message(FeedbackStates.wait_phrase, F.text == "/cancel")
async def feedback_phrase_cancel(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.reply("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é: /menu")
