from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import text

from app.keyboards.menu import BTN_APPLY
from app.storage.repo import SessionLocal

router = Router(name="apply")


class ApplyForm(StatesGroup):
    waiting_goal = State()


def _ensure_user_and_get_id(telegram_id: int, username: str | None) -> int:
    from sqlalchemy import text
    from app.storage.repo import SessionLocal

    with SessionLocal() as s:
        row = s.execute(
            text("SELECT id FROM users WHERE tg_id = :tg"),
            {"tg": telegram_id},
        ).fetchone()
        if row:
            return int(row[0])

        s.execute(
            text("INSERT INTO users (tg_id, username, streak) VALUES (:tg, :un, 0)"),
            {"tg": telegram_id, "un": username or None},
        )
        s.commit()
        row = s.execute(
            text("SELECT id FROM users WHERE tg_id = :tg"),
            {"tg": telegram_id},
        ).fetchone()
        return int(row[0])


# –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
@router.message(Command("apply"))
@router.message(F.text == BTN_APPLY, state="*")
async def apply_entry(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply:req"),
                types.InlineKeyboardButton(text="üì£ –í –º–µ–Ω—é", callback_data="apply:menu"),
            ]
        ]),
    )


@router.callback_query(F.data == "apply:menu", state="*")
async def apply_back(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await cb.message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.")
    await cb.answer()


@router.callback_query(F.data == "apply:req", state="*")
async def apply_req_start(cb: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(ApplyForm.waiting_goal)
    await cb.message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel."
    )
    await cb.answer()


@router.message(Command("cancel"), ApplyForm.waiting_goal)
async def apply_cancel(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–∏–ª. –ì–æ—Ç–æ–≤–æ ‚Äî –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")


@router.message(ApplyForm.waiting_goal)
async def apply_save(message: types.Message, state: FSMContext) -> None:
    user_id = _ensure_user_and_get_id(
        message.from_user.id, getattr(message.from_user, "username", None)
    )
    goal_text = (message.text or "").strip()[:200]

    # –°–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ ¬´–ª–∏–¥¬ª (—Ç–∞–±–ª–∏—Ü–∞ leads), —á—Ç–æ–±—ã –∑–∞—è–≤–∫–∞ –Ω–µ —Ç–µ—Ä—è–ª–∞—Å—å
    with SessionLocal() as s:
        s.execute(
            text(
                "INSERT INTO leads (user_id, channel, contact, note, track) "
                "VALUES (:uid, 'tg', :contact, :note, 'leader')"
            ),
            {
                "uid": user_id,
                "contact": f"@{getattr(message.from_user, 'username', '')}".strip("@"),
                "note": goal_text,
            },
        )
        s.commit()

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç")
