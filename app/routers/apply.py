from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import BTN_APPLY
from app.storage.repo import session_scope
from app.storage.models import Lead

router = Router(name="apply")

def kb_apply_menu() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏"), KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏"), KeyboardButton(text="ü´° –í –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)

@router.message(Command("apply"))
@router.message(F.text == BTN_APPLY)
async def apply_entry(msg: Message) -> None:
    await msg.answer(
        "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=kb_apply_menu()
    )

@router.message(F.text == "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏")
async def apply_inside(msg: Message) -> None:
    await msg.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.", reply_markup=kb_apply_menu()
    )

@router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def apply_ask_text(msg: Message) -> None:
    await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.", reply_markup=kb_apply_menu())

@router.message(F.text == "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def apply_my_requests(msg: Message) -> None:
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ¬´–ª–∏—Å—Ç¬ª ‚Äî –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
    await msg.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb_apply_menu())

@router.message(F.text == "ü´° –í –º–µ–Ω—é")
async def apply_back_to_menu(msg: Message) -> None:
    from app.keyboards.menu import main_menu
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())

# –ü—Ä–∏—à—ë–ª —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª
@router.message(F.text.len() > 0)
async def apply_catch_free_text(msg: Message) -> None:
    text = (msg.text or "").strip()
    if not text:
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –ª–∏–¥ (user_id —Ç—É—Ç –Ω–µ –º–∞–ø–ø–∏–º ‚Äî –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    with session_scope() as s:
        try:
            s.add(Lead(
                user_id=None,
                channel="tg",
                contact=str(msg.from_user.id),
                note=text[:500],
                track="apply",
            ))
        except Exception:
            pass

    await msg.reply("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=kb_apply_menu())
