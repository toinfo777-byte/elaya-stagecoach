# app/routers/apply.py
from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message

router = Router(name="apply")

# –¢–µ–∫—Å—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–∏–º—Å—è (–∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
TEXT_TRIGGERS = {
    "–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞",
    "üß≠ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞",
    "–ø—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)",
    "–∑–∞—è–≤–∫–∞ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞",
}

ASK_TEXT = (
    "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
    "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n\n"
    "<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.</i>"
)

CONFIRM_TEXT = "–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç"

# –í—Ö–æ–¥ ‚Äî –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("apply"))
async def apply_cmd(message: Message) -> None:
    await message.answer(ASK_TEXT)

# –í—Ö–æ–¥ ‚Äî –Ω–∞–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
@router.message(F.text.casefold().in_(t.lower() for t in TEXT_TRIGGERS))
async def apply_text(message: Message) -> None:
    await message.answer(ASK_TEXT)

# –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ ¬´—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏¬ª: –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
# –ø—Ä–∏—à–µ–¥—à–µ–µ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞, —Å—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–æ–π (–Ω–∞ –ø—Ä–æ—Å—Ç–æ–º —Å–ª–æ–µ).
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ/–ë–î ‚Äî –ø–æ–¥–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É.
@router.message(F.text & ~Command())
async def apply_save(message: Message) -> None:
    text = (message.text or "").strip()
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –∏—Ö –∫–∞–∫ –∑–∞—è–≤–∫—É
    if text.casefold() in {"/menu", "/start", "/training", "/progress", "/casting", "/premium", "/settings"}:
        return
    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: 200 —Å–∏–º–≤–æ–ª–æ–≤
    if len(text) > 200:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≤–∞—à—É –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å
    # repo.save_leader_apply(user_id=message.from_user.id, goal=text)

    await message.answer(CONFIRM_TEXT)
    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å)
