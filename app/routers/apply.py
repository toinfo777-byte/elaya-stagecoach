# app/routers/apply.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.storage.repo import session_scope, log_event
from app.storage.models import Lead, User

router = Router(name="apply")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------------------------------------------------

KB_APPLY_DONE = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –•–æ—á—É —Å–æ–∑–≤–æ–Ω"), KeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üè† –í –º–µ–Ω—é")],
    ],
    resize_keyboard=True,
)

KB_APPLY_START = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üè† –í –º–µ–Ω—é")]],
    resize_keyboard=True,
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π FSM) -----------------------------------

from aiogram.fsm.state import State, StatesGroup

class ApplyStates(StatesGroup):
    typing = State()


# --- Handlers ----------------------------------------------------------------

@router.message(F.text == "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")
@router.message(F.text == "/apply")
async def on_apply_start(m: Message, state: FSMContext, user: User):
    await state.set_state(ApplyStates.typing)
    await m.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=KB_APPLY_START,
    )


@router.message(ApplyStates.typing, F.text.len() > 1)
async def on_apply_text(m: Message, state: FSMContext, user: User):
    text = m.text.strip()

    with session_scope() as s:
        s.add(
            Lead(
                user_id=user.id,
                channel="tg",
                contact=f"@{user.username or '-'}",
                note=text,
                track="apply",
            )
        )
        s.commit()
        log_event(s, user.id, "apply_submitted", {"len": len(text)})

    await state.clear()
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=KB_APPLY_DONE)


@router.message(F.text == "üìÖ –•–æ—á—É —Å–æ–∑–≤–æ–Ω")
async def on_apply_call(m: Message, user: User):
    # –ó–¥–µ—Å—å –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é/—Å—Å—ã–ª–∫—É/–∫–æ–Ω—Ç–∞–∫—Ç
    await m.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ @your_manager, –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä ‚Äî –ø–æ–¥–±–µ—Ä—ë–º –≤—Ä–µ–º—è —Å–æ–∑–≤–æ–Ω–∞.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )


@router.message(F.text == "‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def on_apply_edit(m: Message, state: FSMContext, user: User):
    await state.set_state(ApplyStates.typing)
    await m.answer("–û–∫! –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞—è–≤–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


@router.message(F.text == "üè† –í –º–µ–Ω—é")
async def on_back_to_menu(m: Message, user: User):
    from app.keyboards.menu import main_menu
    await m.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu())
