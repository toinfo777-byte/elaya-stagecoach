# app/routers/apply.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import BTN_APPLY, main_menu
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="apply")

# --- –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
BTN_BACK_TO_MENU = "üì£ –í –º–µ–Ω—é"
BTN_LEAVE_REQUEST = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"

def apply_kb() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text=BTN_LEAVE_REQUEST)],
        [KeyboardButton(text=BTN_BACK_TO_MENU)],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


class ApplyFSM(StatesGroup):
    waiting_short_goal = State()


# --- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª / –∫–Ω–æ–ø–∫–∞ ---
@router.message(Command("apply"))
@router.message(F.text == BTN_APPLY)
async def apply_entry(msg: Message) -> None:
    text = (
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏."
    )
    await msg.answer(text, reply_markup=apply_kb())


# --- ¬´–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º FSM ---
@router.message(F.text == BTN_LEAVE_REQUEST)
async def apply_start_collect(msg: Message, state: FSMContext) -> None:
    await state.set_state(ApplyFSM.waiting_short_goal)
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=BTN_BACK_TO_MENU)]],
            resize_keyboard=True,
            is_persistent=True,
        ),
    )


# --- –ø–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.message(ApplyFSM.waiting_short_goal, F.text.len() > 0)
async def apply_save_goal(msg: Message, state: FSMContext) -> None:
    goal = msg.text.strip()
    u = msg.from_user

    with session_scope() as s:
        user = s.query(User).filter_by(tg_id=u.id).first()
        if not user:
            user = User(
                tg_id=u.id,
                username=u.username or None,
                name=(u.full_name or u.first_name or None),
            )
            s.add(user)
            s.flush()

        contact = f"@{u.username}" if u.username else str(u.id)
        s.add(
            Lead(
                user_id=user.id,
                channel="tg",
                contact=contact,
                note=goal,
                track="leader",
            )
        )

    await state.clear()
    await msg.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=apply_kb())


# --- –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.message(F.text == BTN_BACK_TO_MENU)
async def apply_back_to_menu(msg: Message, state: FSMContext) -> None:
    await state.clear()
    await msg.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())
