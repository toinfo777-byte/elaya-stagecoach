from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from app.keyboards.menu import BTN_APPLY, main_menu
from app.storage.repo import session_scope, log_event
from app.storage.models import User, Lead
from app.config import settings

router = Router(name="apply")


def kb_apply() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton(text="üì£ –í –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, is_persistent=True)


class ApplySG(StatesGroup):
    waiting_goal = State()


@router.message(Command("apply"))
@router.message(F.text == BTN_APPLY)
async def apply_entry(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–ª–∏.\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—É—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=kb_apply(),
    )


@router.message(F.text.lower().in_({"üì£ –≤ –º–µ–Ω—é", "–≤ –º–µ–Ω—é"}))
async def apply_back_to_menu(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û–∫, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.", reply_markup=main_menu())


@router.message(F.text.lower().in_({"–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}))
async def apply_ask_goal(message: Message, state: FSMContext) -> None:
    await state.set_state(ApplySG.waiting_goal)
    await message.answer(
        "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞: –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—è–≤–∫–∞.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ ‚Äî /cancel.",
    )


@router.message(ApplySG.waiting_goal, F.text.len() > 0)
async def apply_save_goal(message: Message, state: FSMContext) -> None:
    goal = (message.text or "").strip()
    if not goal:
        await message.answer("–ü—É—Å—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ —Ü–µ–ª—å.")
        return
    if len(goal) > 200:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ üôà –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        return

    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=message.from_user.id).first()
        if not u:
            u = User(tg_id=message.from_user.id, username=message.from_user.username or None, name=message.from_user.full_name)
            s.add(u)
            s.commit()

        s.add(Lead(
            user_id=u.id,
            channel="tg",
            contact=f"@{u.username}" if u.username else str(u.tg_id),
            note=goal,
            track="apply",
        ))
        s.commit()
        log_event(s, u.id, "apply_request", {"goal": goal})

    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ üëç", reply_markup=main_menu())
