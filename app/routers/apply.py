# app/routers/apply.py
from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User
from app.services.leads import create_lead, LeadPayload

router = Router(name="apply")

INVITE_TEXT = (
    "¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª ‚Äî –≤–µ–π—Ç–ª–∏—Å—Ç –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ—Å—å.\n"
    "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞—è–≤–∫—É ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è —Å –¥–µ—Ç–∞–ª—è–º–∏."
)

def invite_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_start")]
        ]
    )

class ApplyFSM(StatesGroup):
    name = State()
    city_tz = State()
    contact = State()
    motivation = State()

# --- –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ ---
@router.message(StateFilter("*"), F.text == "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")
@router.message(StateFilter("*"), Command("apply"))
async def apply_entry(m: Message, state: FSMContext):
    await state.set_state(ApplyFSM.name)
    await m.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∏–º—è/–Ω–∏–∫)")

@router.callback_query(StateFilter("*"), F.data == "apply_start")
async def apply_from_button(cb: CallbackQuery, state: FSMContext):
    await state.set_state(ApplyFSM.name)
    await cb.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–∏–º—è/–Ω–∏–∫)")
    await cb.answer()

# --- —Ñ–æ—Ä–º–∞ ---
@router.message(ApplyFSM.name, F.text.len() > 0)
async def step_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await state.set_state(ApplyFSM.city_tz)
    await m.answer("–í–∞—à –≥–æ—Ä–æ–¥ / —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ / Europe/Moscow)")

@router.message(ApplyFSM.city_tz, F.text.len() > 0)
async def step_city(m: Message, state: FSMContext):
    await state.update_data(city_tz=m.text.strip())
    await state.set_state(ApplyFSM.contact)
    prefill = f"@{m.from_user.username}" if m.from_user.username else ""
    hint = f"\n–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –º–æ–∂–Ω–æ —Ç–∞–∫: {prefill}" if prefill else ""
    await m.answer("–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º @ / –ø–æ—á—Ç–∞):" + hint)

@router.message(ApplyFSM.contact, F.text.len() > 0)
async def step_contact(m: Message, state: FSMContext):
    await state.update_data(contact=m.text.strip())
    await state.set_state(ApplyFSM.motivation)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ: –º–æ—Ç–∏–≤–∞—Ü–∏—è (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")

@router.message(ApplyFSM.motivation, F.text.len() > 0)
async def step_motivation(m: Message, state: FSMContext):
    d = await state.get_data()
    name = d.get("name") or m.from_user.full_name
    city_tz = d.get("city_tz", "")
    contact = d.get("contact", "")
    motivation = m.text.strip()

    # –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏: –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    ch = "email" if ("@" in contact and " " not in contact and "." in contact) and not contact.startswith("@") else "telegram"
    note = f"name={name}; city_tz={city_tz}; motivation={motivation}"

    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            u = User(tg_id=m.from_user.id, username=m.from_user.username or "", name=m.from_user.full_name)
            s.add(u); s.flush()
        lead = create_lead(
            s, u.id,
            LeadPayload(channel=ch, contact=contact or (f"@{m.from_user.username}" if m.from_user.username else str(m.from_user.id))),
            # track –∏ note ‚Äî –≤–∞–∂–Ω–æ–µ:
            # (–ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫)
        )
        # –æ–±–Ω–æ–≤–∏–º track –∏ note (–µ—Å–ª–∏ create_lead –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π)
        lead.track = "leader"
        lead.note = note
        s.commit()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in settings.admin_ids:
        try:
            src = "(–±–µ–∑ source)"
            with session_scope() as s2:
                u2 = s2.query(User).filter_by(tg_id=m.from_user.id).first()
                if u2 and getattr(u2, "source", None):
                    src = f"source={u2.source}"
            await m.bot.send_message(
                admin_id,
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n"
                f"id={m.from_user.id} @{m.from_user.username or '-'}\n"
                f"{name}, {city_tz}\n"
                f"contact: {contact}\n"
                f"{src}\n"
                f"motivation: {motivation[:300]}"
            )
        except Exception:
            pass

    await state.clear()
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤–µ—Ä–Ω—ë–º—Å—è —Å –¥–µ—Ç–∞–ª—è–º–∏. –°–ø–∞—Å–∏–±–æ! üôå", reply_markup=main_menu())

# --- —Å–ø–µ—Ü-—ç–∫—Ä–∞–Ω –ø–æ deeplink ---
@router.message(StateFilter("*"), F.text.regexp(r"^/start(?:\s+leader_waitlist)?$"))
async def start_leader_invite(m: Message):
    # source —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ (users.source) ‚Äî –º—ã –µ–≥–æ —É–∂–µ –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º
    if "leader_waitlist" in (m.text or ""):
        await m.answer(INVITE_TEXT, reply_markup=invite_kb())
