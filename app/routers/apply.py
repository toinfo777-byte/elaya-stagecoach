# app/routers/apply.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.keyboards.menu import main_menu
from app.storage.repo import session_scope
from app.storage.models import User, Lead

router = Router(name="apply")


# ---------- helpers ----------
def _admin_ids_set() -> set[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º settings.admin_ids (list|set|tuple|str '1,2,3')."""
    try:
        ids = settings.admin_ids
        if isinstance(ids, (set, list, tuple)):
            return {int(x) for x in ids}
        if isinstance(ids, str):
            parts = ids.replace(";", ",").split(",")
            return {int(x.strip()) for x in parts if x.strip()}
    except Exception:
        pass
    return set()


def _invite_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_start")]
        ]
    )


# ---------- FSM ----------
class ApplyFlow(StatesGroup):
    name = State()
    city_tz = State()
    contact = State()
    motivation = State()


# ---------- deep-link: /start leader_waitlist ----------
@router.message(Command("start"), F.text.func(lambda t: isinstance(t, str) and "leader_waitlist" in t))
async def start_leader_waitlist(m: Message):
    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ deep link ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if u and not getattr(u, "source", None):
            u.source = "leader_waitlist"

    text = (
        "üåü ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ –≠–ª–∞–π–∏¬ª\n\n"
        "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∞–≤–∞–Ω–≥–∞—Ä–¥–∞ —Å–º—ã—Å–ª–æ–≤.\n"
        "–ì–æ—Ç–æ–≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–µ–π—Ç–ª–∏—Å—Ç—É? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É."
    )
    await m.answer(text, reply_markup=_invite_kb())


# ---------- entry points ----------
@router.message(Command("apply"))
@router.message(F.text == "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞")
async def apply_entry(m: Message, state: FSMContext):
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ /start.", reply_markup=main_menu())
            return

        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ ‚Äî —Å–æ–æ–±—â–∞–µ–º
        exists = s.query(Lead).filter_by(user_id=u.id, track="leader").first()
        if exists:
            await m.answer(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Ç—Ä–µ–∫ ¬´–õ–∏–¥–µ—Ä¬ª —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n"
                "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º. "
                "–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–Ω –≤ ¬´üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.",
                reply_markup=main_menu(),
            )
            return

    await state.set_state(ApplyFlow.name)
    suggested = " ".join(filter(None, [m.from_user.first_name, m.from_user.last_name]))
    suggested = suggested or (f"@{m.from_user.username}" if m.from_user.username else "")
    prompt = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è)"
    if suggested:
        prompt += f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *{suggested}*"
    await m.answer(prompt)


@router.callback_query(F.data == "apply_start")
async def apply_start_cb(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await state.set_state(ApplyFlow.name)
    suggested = " ".join(filter(None, [cb.from_user.first_name, cb.from_user.last_name]))
    suggested = suggested or (f"@{cb.from_user.username}" if cb.from_user.username else "")
    prompt = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è)"
    if suggested:
        prompt += f"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *{suggested}*"
    await cb.message.answer(prompt)


# ---------- steps ----------
@router.message(ApplyFlow.name)
async def step_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    await state.update_data(name=name)
    await state.set_state(ApplyFlow.city_tz)
    await m.answer("–í–∞—à –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, GMT+3¬ª).")


@router.message(ApplyFlow.city_tz)
async def step_city_tz(m: Message, state: FSMContext):
    city_tz = (m.text or "").strip()
    if len(city_tz) < 2:
        await m.answer("–ß—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")
        return
    await state.update_data(city_tz=city_tz)
    await state.set_state(ApplyFlow.contact)
    un = f"@{m.from_user.username}" if m.from_user.username else "‚Äî"
    await m.answer(
        "–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ–≥—Ä–∞–º/–ø–æ—á—Ç–∞/—Ç–µ–ª–µ—Ñ–æ–Ω).\n"
        f"–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –Ω–∏–∫: {un}"
    )


@router.message(ApplyFlow.contact)
async def step_contact(m: Message, state: FSMContext):
    contact = (m.text or "").strip()
    if len(contact) < 2:
        await m.answer("–ù—É–∂–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –Ω–∏–∫, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email.")
        return
    await state.update_data(contact=contact)
    await state.set_state(ApplyFlow.motivation)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ –≤–∞—à–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è: –ø–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –≤ —Ç—Ä–µ–∫? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")


@router.message(ApplyFlow.motivation)
async def step_motivation(m: Message, state: FSMContext):
    motivation = (m.text or "").strip()
    if len(motivation) < 5:
        await m.answer("–î–æ–±–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä—É —Å–ª–æ–≤ –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    data = await state.get_data()
    name = data.get("name", "")
    city_tz = data.get("city_tz", "")
    contact = data.get("contact", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    with session_scope() as s:
        u = s.query(User).filter_by(tg_id=m.from_user.id).first()
        if not u:
            await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ /start.", reply_markup=main_menu())
            await state.clear()
            return

        note = f"name: {name}; city_tz: {city_tz}; motivation: {motivation}"
        lead = Lead(
            user_id=u.id,
            channel="tg",
            contact=contact,
            note=note,
            track="leader",
        )
        s.add(lead)

    await state.clear()
    await m.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ú—ã –≤–µ—Ä–Ω—ë–º—Å—è —Å –¥–µ—Ç–∞–ª—è–º–∏.", reply_markup=main_menu())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    text = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ¬´–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª\n"
        f"user_id={m.from_user.id} @{m.from_user.username or '-'}\n"
        f"–ò–º—è: {name}\n–ì–æ—Ä–æ–¥/—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {city_tz}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è: {motivation}"
    )
    for aid in _admin_ids_set():
        try:
            await m.bot.send_message(aid, text)
        except Exception:
            pass
