# app/routers/hq.py
from __future__ import annotations

import os
import logging
from datetime import datetime, timedelta
from typing import Optional

import aiohttp
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
# from app.control.admin import AdminOnly  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ —Å–º. –Ω–∏–∑ —Ñ–∞–π–ª–∞

router = Router(name="hq")
log = logging.getLogger("hq")

RAW_HOST = "https://raw.githubusercontent.com"
REPO = os.getenv("GITHUB_REPOSITORY", "toinfo777-byte/elaya-stagecoach")
BRANCH = os.getenv("HQ_BRANCH", "main")
REPORT_DIR = os.getenv("HQ_REPORT_DIR", "docs/elaya_status")
STATUS_JSON_URL = os.getenv("STATUS_JSON_URL")  # –Ω–∞–ø—Ä. https://elaya-stagecoach-web.onrender.com/status_json


def _date_variants_utc(n: int = 3) -> list[str]:
    """–ò–º–µ–Ω–∞ –æ—Ç—á—ë—Ç–æ–≤: —Å–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞/... (UTC)."""
    base = datetime.utcnow().date()
    return [f"Elaya_Status_{(base - timedelta(days=i)).isoformat().replace('-', '_')}.md" for i in range(n)]


async def _fetch_text(session: aiohttp.ClientSession, url: str, timeout: int = 10) -> Optional[str]:
    try:
        async with session.get(url, timeout=timeout) as r:
            if r.status == 200:
                return await r.text()
    except Exception:
        return None
    return None


async def _fetch_json(session: aiohttp.ClientSession, url: str, timeout: int = 8) -> Optional[dict]:
    try:
        async with session.get(url, timeout=timeout) as r:
            if r.status == 200:
                return await r.json()
    except Exception:
        return None
    return None


def _report_url(name: str) -> str:
    return f"{RAW_HOST}/{REPO}/{BRANCH}/{REPORT_DIR}/{name}"


@router.message(Command(commands=["hq"]))
async def cmd_hq(message: Message) -> None:
    log.info("HQ: handling /hq from chat %s", message.chat.id)

    # 1) –∏—â–µ–º —Å–≤–µ–∂–∏–π –æ—Ç—á—ë—Ç (—Å–µ–≥–æ–¥–Ω—è ‚Üí –≤—á–µ—Ä–∞ ‚Üí –ø–æ–∑–∞–≤—á–µ—Ä–∞)
    latest_name: Optional[str] = None
    async with aiohttp.ClientSession() as s:
        for cand in _date_variants_utc(3):
            if await _fetch_text(s, _report_url(cand)):
                latest_name = cand
                break
        # 2) —Å—Ç—è–≥–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        status = await _fetch_json(s, STATUS_JSON_URL) if STATUS_JSON_URL else None

    sha_full = (status or {}).get("sha") or os.getenv("GIT_SHA", "") or "unknown"
    sha7 = sha_full[:7] if isinstance(sha_full, str) and sha_full else "unknown"
    build = (status or {}).get("build") or os.getenv("BUILD_MARK", "unknown")
    env = (status or {}).get("env") or os.getenv("ENV", "develop")
    mode = (status or {}).get("mode") or os.getenv("MODE", "worker")
    uptime = (status or {}).get("uptime_sec")
    uptime_s = f"{uptime}s" if isinstance(uptime, int) else "n/a"

    lines = [
        "üß≠ <b>HQ-—Å–≤–æ–¥–∫–∞</b>",
        f"‚Ä¢ ENV: <code>{env}</code>  ‚Ä¢ MODE: <code>{mode}</code>",
        f"‚Ä¢ BUILD: <code>{build}</code>  ‚Ä¢ SHA: <code>{sha7}</code>",
        f"‚Ä¢ Uptime: <code>{uptime_s}</code>",
    ]
    if latest_name:
        lines.append(f"‚Ä¢ –û—Ç—á—ë—Ç: <code>{REPORT_DIR}/{latest_name}</code>")
        lines.append(f"‚Ä¢ Raw: {_report_url(latest_name)}")
    else:
        lines.append("‚Ä¢ –û—Ç—á—ë—Ç: –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ daily/post-deploy –æ—Ç—á—ë—Ç—ã)")

    await message.answer("\n".join(lines))

# –ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å /hq —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
# router.message.filter(AdminOnly())
