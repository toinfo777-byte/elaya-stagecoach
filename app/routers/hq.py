from __future__ import annotations

import os
from aiogram import Router, types
from aiogram.filters import Command

router = Router(name="hq")

def _render_info() -> dict:
    # –º—è–≥–∫–æ —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç, –ø–æ–∫–∞–∂–µ–º ¬´‚Äì¬ª
    return {
        "Branch": os.getenv("RENDER_GIT_BRANCH", "‚Äì"),
        "Commit": os.getenv("RENDER_GIT_COMMIT", "‚Äì"),
        "Status": os.getenv("RENDER_SERVICE_STATUS", "‚Äì"),
        "Created": os.getenv("RENDER_SERVICE_CREATED_AT", "‚Äì"),
        "Updated": os.getenv("RENDER_SERVICE_UPDATED_AT", "‚Äì"),
    }

@router.message(Command("start"))
async def cmd_start(m: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø HQ-–±–æ—Ç –≠–ª–∞–π–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /hq ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞\n"
        "‚Ä¢ /healthz ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
    )
    await m.answer(text)

@router.message(Command("menu"))
async def cmd_menu(m: types.Message):
    await cmd_start(m)

@router.message(Command("healthz"))
async def cmd_healthz(m: types.Message):
    await m.answer("‚úÖ ok")

@router.message(Command("hq"))
async def cmd_hq(m: types.Message):
    info = _render_info()
    lines = [
        "üß≠ <b>Render Build</b>",
        f"‚Ä¢ Branch: {info['Branch']}",
        f"‚Ä¢ Commit: {info['Commit']}",
        f"‚Ä¢ Status: {info['Status']}",
        f"‚Ä¢ Created: {info['Created']}",
        f"‚Ä¢ Updated: {info['Updated']}",
    ]
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞, –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã –∫–ª—é—á–∏ –¥–ª—è Render API
    missing = []
    if not os.getenv("RENDER_API_KEY"):
        missing.append("RENDER_API_KEY")
    if not os.getenv("RENDER_SERVICE_ID"):
        missing.append("RENDER_SERVICE_ID")
    if missing:
        lines.append(f"\n‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã {', '.join(missing)}.")
    await m.answer("\n".join(lines))
