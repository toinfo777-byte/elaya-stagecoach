from __future__ import annotations
import json
import os
import textwrap
from datetime import datetime, timezone

from aiogram import Router, types, F
from aiogram.filters import Command

router = Router(name="hq")

def _render_services() -> list[tuple[str, str]]:
    # ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –Ω–∞ Render
    ids = os.getenv("RENDER_SERVICE_ID", "")
    labels = os.getenv("RENDER_SERVICE_LABELS", "")
    id_list = [s.strip() for s in ids.split(",") if s.strip()]
    label_list = [s.strip() for s in labels.split(",") if s.strip()]
    out = []
    for i, sid in enumerate(id_list):
        lbl = label_list[i] if i < len(label_list) else f"service-{i+1}"
        out.append((lbl, sid))
    return out

@router.message(Command("ping"))
async def cmd_ping(msg: types.Message):
    await msg.reply("pong üü¢")

@router.message(Command("healthz"))
async def cmd_healthz(msg: types.Message):
    await msg.reply("ok ‚úÖ")

@router.message(Command("hq"))
async def cmd_hq(msg: types.Message):
    """
    –ö–æ—Ä–æ—Ç–∫–∞—è —Ç–µ—Ö. —Å–≤–æ–¥–∫–∞ –ø–æ Render-—Å–µ—Ä–≤–∏—Å–∞–º (–ø–æ ENV).
    """
    services = _render_services()
    now = datetime.now(timezone.utc).astimezone()
    lines = [
        "üõ∞ <b>–®—Ç–∞–±–Ω—ã–µ –æ—Ç—á—ë—Ç—ã</b>",
        f"<i>{now:%Y-%m-%d %H:%M:%S %Z}</i>",
        "",
        "‚Ä¢ <b>Render Build</b>",
        "  Branch: ‚Äì",
        "  Commit: ‚Äì",
        "  Status: ‚Äì",
        "  Created: ‚Äì",
        "  Updated: ‚Äì",
        "",
        "‚Ä¢ <b>Services</b>",
    ]
    if services:
        for lbl, sid in services:
            lines.append(f"  ‚Äî {lbl}: <code>{sid}</code>")
    else:
        lines.append("  ‚Äî (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã RENDER_SERVICE_ID / RENDER_SERVICE_LABELS)")

    await msg.reply("\n".join(lines))

@router.message(Command("status"))
async def cmd_status(msg: types.Message):
    """
    –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ–¥ –±—É–¥—É—â–∏–π REST-–æ–ø—Ä–æ—Å Render API (–∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º –∫–ª—é—á –∏ –∫–ª–∏–µ–Ω—Ç).
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, —á—Ç–æ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –±—ã–ª–æ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º.
    """
    api_key = os.getenv("RENDER_API_KEY", "")
    if not api_key:
        await msg.reply("‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã RENDER_API_KEY –∏ RENDER_SERVICE_ID.")
        # –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–¥–∞—ë–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –±–ª–æ–∫:
        await msg.reply(
            textwrap.dedent(
                """\
                <b>Render Build</b>
                Branch: ‚Äì
                Commit: ‚Äì
                Status: ‚Äì
                Created: ‚Äì
                Updated: ‚Äì
                """
            )
        )
        return

    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—à—å –∫–ª–∏–µ–Ω—Ç ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ —Ö–æ–¥–∏—Ç—å –≤ Render API.
    await msg.reply("üîß API-–∫–ª—é—á –µ—Å—Ç—å, –Ω–æ –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")
