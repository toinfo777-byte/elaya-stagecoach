# app/routers/help.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)

help_router = Router(name="help")


# === Keyboards ===============================================================

def _menu_kb() -> InlineKeyboardMarkup:
    # go:* payload'—ã –ª–æ–≤–∏—Ç –≤–∞—à entrypoints.go-—Ä–æ—É—Ç–µ—Ä
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",   callback_data="go:training")],
        [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",     callback_data="go:casting")],
        [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",      callback_data="go:leader")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",     callback_data="go:progress")],
        [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",         callback_data="go:privacy")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",        callback_data="go:settings")],
    ])


def _back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")]
    ])


def _settings_kb() -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã —Å –≤–∞—à–∏–º routers/settings.py:
    # —Ç–∞–º –µ—Å—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∞ F.data == "settings:menu" –∏ F.data == "settings:delete"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é",          callback_data="settings:menu")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="settings:delete")],
    ])


# === Helpers =================================================================

async def _reply(obj: Message | CallbackQuery, text: str,
                 kb: InlineKeyboardMarkup | None = None):
    """–ï–¥–∏–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ Message, –∏ CallbackQuery."""
    if isinstance(obj, CallbackQuery):
        await obj.answer()  # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK, —á—Ç–æ–±—ã –Ω–µ ¬´–∫—Ä—É—Ç–∏–ª–æ—Å—å¬ª
        return await obj.message.answer(text, reply_markup=kb)
    return await obj.answer(text, reply_markup=kb)


# === Public API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ entrypoints.py –∏ –¥—Ä.) ========================

async def show_main_menu(obj: Message | CallbackQuery):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
        "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
        "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ ‚Äî –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
    )
    await _reply(obj, text, _menu_kb())


async def show_privacy(obj: Message | CallbackQuery):
    text = (
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–ª—å–∫–æ "
        "–¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."
    )
    await _reply(obj, text, _back_kb())


async def show_settings(obj: Message | CallbackQuery):
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –ú–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    await _reply(obj, text, _settings_kb())


# === Local handlers (/help –∏ –ø—Ä—è–º—ã–µ go:menu/privacy/settings) ================

@help_router.message(Command("help"))
async def cmd_help(m: Message):
    await show_main_menu(m)


@help_router.callback_query(F.data == "go:menu"))
async def cb_menu(cb: CallbackQuery):
    await show_main_menu(cb)


@help_router.callback_query(F.data == "go:privacy"))
async def cb_privacy(cb: CallbackQuery):
    await show_privacy(cb)


@help_router.callback_query(F.data == "go:settings"))
async def cb_settings(cb: CallbackQuery):
    await show_settings(cb)


__all__ = ["help_router", "show_main_menu", "show_privacy", "show_settings"]
