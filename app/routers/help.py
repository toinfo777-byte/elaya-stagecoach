from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)

help_router = Router(name="help")


def _menu_kb() -> InlineKeyboardMarkup:
    # 8 –∫–Ω–æ–ø–æ–∫, –≤–∫–ª—é—á–∞—è üí¨ –ü–æ–º–æ—â—å –∏ ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",    callback_data="go:training")],
        [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",      callback_data="go:casting")],
        [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",       callback_data="go:leader")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",      callback_data="go:progress")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–º–æ—â—å / FAQ",      callback_data="go:help")],
        [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",          callback_data="go:privacy")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",         callback_data="go:settings")],
        [InlineKeyboardButton(text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data="go:extended")],
    ])


async def _reply(obj: Message | CallbackQuery, text: str,
                 kb: InlineKeyboardMarkup | None = None):
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        return await obj.message.answer(text, reply_markup=kb)
    return await obj.answer(text, reply_markup=kb)


# –ü—É–±–ª–∏—á–Ω—ã–µ ¬´—ç–∫—Ä–∞–Ω—ã¬ª
async def show_main_menu(obj: Message | CallbackQuery):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
        "üèãÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
        "üé≠ <b>–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥</b> ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
        "üß≠ <b>–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞</b> ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
        "üìà <b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b> ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
        "üí¨ <b>–ü–æ–º–æ—â—å / FAQ</b> ‚Äî –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞</b> ‚Äî –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "‚≠ê <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b> ‚Äî —Å–∫–æ—Ä–æ."
    )
    await _reply(obj, text, _menu_kb())


async def show_help(obj: Message | CallbackQuery):
    text = (
        "üí¨ <b>–ü–æ–º–æ—â—å / FAQ</b>\n\n"
        "‚Äî –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n"
        "‚Äî ¬´üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –ø–æ–∫–∞–∂–µ—Ç —Å—Ç—Ä–∏–∫ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã.\n"
        "‚Äî ¬´üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª ‚Äî –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–º–∞–Ω–¥–∞: /ping"
    )
    await _reply(obj, text, _menu_kb())


async def show_privacy(obj: Message | CallbackQuery):
    text = (
        "üîê <b>–ü–æ–ª–∏—Ç–∏–∫–∞</b>\n\n"
        "–•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
        "–î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º prod."
    )
    await _reply(obj, text, _menu_kb())


async def show_settings(obj: Message | CallbackQuery):
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–ü—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –º–µ–Ω—é."
    )
    await _reply(obj, text, _menu_kb())


# –ö–æ–º–∞–Ω–¥–Ω—ã–µ –≤—Ö–æ–¥—ã –Ω–∞ –º–µ–Ω—é/—Å–ø—Ä–∞–≤–∫—É
@help_router.message(CommandStart(deep_link=False))
async def start_no_payload(m: Message):
    await show_main_menu(m)


@help_router.message(Command("menu"))
async def cmd_menu(m: Message):
    await show_main_menu(m)


@help_router.message(Command("help"))
async def cmd_help(m: Message):
    await show_help(m)


# –û—Ç–∫—Ä—ã—Ç–∏–µ help —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@help_router.callback_query(lambda cq: cq.data == "go:help")
async def cb_help(cq: CallbackQuery):
    await show_help(cq)
