# app/routers/help.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)

router = Router(name="help")  # <-- main.py –∂–¥—ë—Ç .router

# ---------- UI ----------
def _menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è", callback_data="go:training")],
        [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",     callback_data="go:casting")],
        [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",      callback_data="go:leader")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",     callback_data="go:progress")],
        [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",         callback_data="go:privacy")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",        callback_data="go:settings")],
    ])

def _back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")]
    ])

def _settings_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")]
    ])

# ---------- helpers ----------
async def _reply(obj: Message | CallbackQuery, text: str,
                 kb: InlineKeyboardMarkup | None = None):
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        return await obj.message.answer(text, reply_markup=kb)
    return await obj.answer(text, reply_markup=kb)

# ---------- –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏—Ö –∑–æ–≤—É—Ç –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã) ----------
async def show_main_menu(obj: Message | CallbackQuery):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
        "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
        "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ ‚Äî –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–æ—Ñ–∏–ª—å."
    )
    await _reply(obj, text, _menu_kb())

async def show_privacy(obj: Message | CallbackQuery):
    text = (
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞: –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n"
        "–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª."
    )
    await _reply(obj, text, _back_kb())

async def show_settings(obj: Message | CallbackQuery):
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    await _reply(obj, text, _settings_kb())

# ---------- —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü–æ–º–æ—â—å¬ª ----------
@router.message(Command("help"))
async def cmd_help(m: Message):
    await show_main_menu(m)

# —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ go:* –∏–∑ –º–µ–Ω—é
@router.callback_query(F.data == "go:menu")
async def cb_menu(cb: CallbackQuery):
    await show_main_menu(cb)

@router.callback_query(F.data == "go:privacy")
async def cb_privacy(cb: CallbackQuery):
    await show_privacy(cb)

@router.callback_query(F.data == "go:settings")
async def cb_settings(cb: CallbackQuery):
    await show_settings(cb)

@router.callback_query(F.data == "go:training")
async def cb_training(cb: CallbackQuery):
    await cb.answer()
    from app.routers.training import show_training_levels
    await show_training_levels(cb.message)

@router.callback_query(F.data == "go:casting")
async def cb_casting(cb: CallbackQuery):
    await cb.answer()
    from app.routers.minicasting import start_minicasting
    await start_minicasting(cb)

@router.callback_query(F.data == "go:leader")
async def cb_leader(cb: CallbackQuery):
    await cb.answer()
    # –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ ‚Äî —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª—ã
    from app.routers.leader import leader_entry
    await leader_entry(cb)

@router.callback_query(F.data == "go:progress")
async def cb_progress(cb: CallbackQuery):
    await cb.answer()
    from app.routers.progress import show_progress
    await show_progress(cb)
