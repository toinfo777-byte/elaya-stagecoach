from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from app.keyboards.reply import main_menu_kb, BTN_HELP
from app.routers.settings import open_settings  # –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ help

router = Router(name="help")

HELP_HEADER = (
    "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
    "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
    "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
    "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
    "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–æ—Ñ–∏–ª—å.\n"
    "‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞.\n"
)  # ‚Üê —Å–∫–æ–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞

def help_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é",              callback_data="go:menu")],
            [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",    callback_data="go:training")],
            [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",      callback_data="go:casting")],
            [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",       callback_data="go:apply")],
            [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",      callback_data="go:progress")],
            [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",          callback_data="go:privacy")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",         callback_data="go:settings")],
            [InlineKeyboardButton(text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data="go:extended")],
        ]
    )

# ‚îÄ‚îÄ /help –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–º–æ—â—å¬ª ‚Äî –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(StateFilter("*"), Command("help"))
@router.message(StateFilter("*"), F.text == BTN_HELP)
async def help_cmd(m: Message, state: FSMContext):
    await m.answer(HELP_HEADER, reply_markup=help_kb())

# ‚îÄ‚îÄ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∫–Ω–æ–ø–∫–∞–º
@router.callback_query(StateFilter("*"), F.data == "go:menu")
async def help_go_menu(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:casting")
async def help_go_casting(cq: CallbackQuery, state: FSMContext):
    from app.routers.minicasting import start_minicasting  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
    await start_minicasting(cq.message, state)
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:apply")
async def help_go_leader(cq: CallbackQuery, state: FSMContext):
    try:
        from app.routers.leader import start_leader_cmd  # –µ—Å—Ç—å –ø–æ—á—Ç–∏ –≤–æ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        await start_leader_cmd(cq.message, state)
    except Exception:
        await cq.message.answer("–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏ ¬´üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª.", reply_markup=main_menu_kb())
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:training")
async def help_go_training(cq: CallbackQuery, state: FSMContext):
    from app.routers.training import show_training_levels  # –ø—É–±–ª–∏—á–Ω—ã–π entry
    await show_training_levels(cq.message, state)
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:progress")
async def help_go_progress(cq: CallbackQuery, state: FSMContext):
    try:
        from app.storage.repo_extras import get_progress
        streak, last7 = await get_progress(cq.from_user.id)
        text = (
            "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            f"‚Ä¢ –°—Ç—Ä–∏–∫: {streak}\n"
            f"‚Ä¢ –≠–ø–∏–∑–æ–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: {last7}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ üëá"
        )
    except Exception:
        text = (
            "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
            "–ù–∞—á–Ω–∏ —Å ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è¬ª üëá"
        )
    await cq.message.answer(text, reply_markup=main_menu_kb())
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:privacy")
async def help_go_privacy(cq: CallbackQuery, state: FSMContext):
    try:
        from app.routers.privacy import PRIVACY_TEXT
        await cq.message.answer(PRIVACY_TEXT, reply_markup=main_menu_kb())
    except Exception:
        await cq.message.answer("–ü–æ–ª–∏—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:settings")
async def help_go_settings(cq: CallbackQuery, state: FSMContext):
    await open_settings(cq.message, state)
    await cq.answer()

@router.callback_query(StateFilter("*"), F.data == "go:extended")
async def help_go_extended(cq: CallbackQuery, state: FSMContext):
    try:
        from app.routers.extended import extended_pitch
        await extended_pitch(cq.message)
    except Exception:
        await cq.message.answer("‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫–æ—Ä–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await cq.answer()
