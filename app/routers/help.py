from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)

from app.keyboards.reply import main_menu_kb, BTN_HELP
from app.routers.settings import open_settings  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ help

router = Router(name="help")

HELP_HEADER = "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è"


def help_kb() -> InlineKeyboardMarkup:
    # –≤—Å–µ –ø—É–Ω–∫—Ç—ã ‚Äî –ß–ò–°–¢–´–ï callback_data (–Ω–∏–∫–∞–∫–∏—Ö /–∫–æ–º–∞–Ω–¥)
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ú–µ–Ω—é",              callback_data="go:menu")],
            [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",    callback_data="go:training")],
            [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",      callback_data="go:casting")],
            [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",       callback_data="go:apply")],
            [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",      callback_data="go:progress")],
            [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",          callback_data="go:privacy")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",         callback_data="go:settings")],
            [InlineKeyboardButton(text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", callback_data="go:extended")],
        ]
    )


# –ì–ª–æ–±–∞–ª—å–Ω–æ: /help –∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–º–æ—â—å¬ª —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(StateFilter("*"), Command("help"))
@router.message(StateFilter("*"), F.text == BTN_HELP)
async def help_cmd(m: Message, state: FSMContext):
    await m.answer(HELP_HEADER, reply_markup=help_kb())


# –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º help
@router.callback_query(StateFilter("*"), F.data == "go:menu")
async def help_go_menu(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await cq.answer()


@router.callback_query(StateFilter("*"), F.data == "go:casting")
async def help_go_casting(cq: CallbackQuery, state: FSMContext):
    from app.routers.minicasting import start_minicasting  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å —Ü–∏–∫–ª—ã
    await start_minicasting(cq.message, state)
    await cq.answer()


@router.callback_query(StateFilter("*"), F.data == "go:apply")
async def help_go_leader(cq: CallbackQuery, state: FSMContext):
    try:
        from app.routers.leader import start_leader
        await start_leader(cq.message, state)
    except Exception:
        await cq.message.answer("–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏ ¬´üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª.", reply_markup=main_menu_kb())
    await cq.answer()


@router.callback_query(StateFilter("*"), F.data == "go:training")
async def help_go_training(cq: CallbackQuery, state: FSMContext):
    from app.routers.training import show_training_levels
    await show_training_levels(cq.message, state)
    await cq.answer()


@router.callback_query(StateFilter("*"), F.data == "go:progress")
async def help_go_progress(cq: CallbackQuery, state: FSMContext):
    # –õ—ë–≥–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ ¬´progress¬ª
    # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å routers/progress.show_progress ‚Äî –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞.
    try:
        from app.storage.repo_extras import get_progress
        streak, last7 = await get_progress(cq.from_user.id)
        text = (
            f"üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            f"‚Ä¢ –°—Ç—Ä–∏–∫: {streak}\n"
            f"‚Ä¢ –≠–ø–∏–∑–æ–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π: {last7}\n\n"
