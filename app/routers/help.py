from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

help_router = Router(name="help")


# ---------- UI ----------
def _menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è",   callback_data="go:training")],
        [InlineKeyboardButton(text="üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥",     callback_data="go:casting")],
        [InlineKeyboardButton(text="üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞",      callback_data="go:leader")],
        [InlineKeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",     callback_data="go:progress")],
        [InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞",         callback_data="go:privacy")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",        callback_data="go:settings")],
    ])

def _back_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="go:menu")],
    ])

def _settings_kb() -> InlineKeyboardMarkup:
    # –í–ê–ñ–ù–û: callback_data –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–≤–æ–∏–º settings-—Ä–æ—É—Ç–µ—Ä–æ–º: "settings:delete"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é",         callback_data="go:menu")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="settings:delete")],
    ])


# ---------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è Message | CallbackQuery ----------
async def _reply(obj: Message | CallbackQuery, text: str,
                 kb: InlineKeyboardMarkup | None = None):
    if isinstance(obj, CallbackQuery):
        await obj.answer()
        await obj.message.answer(text, reply_markup=kb)
    else:
        await obj.answer(text, reply_markup=kb)


# ---------- –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∏—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç entrypoints.py) ----------
async def show_main_menu(obj: Message | CallbackQuery):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ ‚§µÔ∏è\n\n"
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
        "üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ ‚Äî –±—ã—Å—Ç—Ä—ã–π —á–µ–∫ 2‚Äì3 –º–∏–Ω.\n"
        "üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ ‚Äî —Ü–µ–ª—å + –º–∏–∫—Ä–æ-–∑–∞–¥–∞–Ω–∏–µ + –∑–∞—è–≤–∫–∞.\n"
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ ‚Äî –∫–∞–∫ —Ö—Ä–∞–Ω–∏–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
    )
    await _reply(obj, text, _menu_kb())


async def show_privacy(obj: Message | CallbackQuery):
    # –ú–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π PRIVACY_TEXT –∏–∑ privacy.py –ø–æ –∂–µ–ª–∞–Ω–∏—é
    text = (
        "üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ "
        "–∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
    )
    await _reply(obj, text, _back_kb())


async def show_settings(obj: Message | CallbackQuery, state: FSMContext | None = None):
    # state —Ç—É—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω: entrypoints –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ, –Ω–æ –º—ã –Ω–µ –æ–±—è–∑–∞–Ω—ã –æ—á–∏—â–∞—Ç—å
    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –ú–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    await _reply(obj, text, _settings_kb())


# ---------- —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ ¬´–ü–æ–º–æ—â—å¬ª ----------
@help_router.message(Command("help"))
@help_router.message(F.text == "üí¨ –ü–æ–º–æ—â—å")
async def help_cmd(m: Message):
    await show_main_menu(m)

@help_router.callback_query(F.data == "go:menu")
async def cb_menu(cb: CallbackQuery):
    await show_main_menu(cb)

@help_router.callback_query(F.data == "go:privacy")
async def cb_privacy(cb: CallbackQuery):
    await show_privacy(cb)

@help_router.callback_query(F.data == "go:settings")
async def cb_settings(cb: CallbackQuery):
    await show_settings(cb)


__all__ = ["help_router", "show_main_menu", "show_privacy", "show_settings"]
