import asyncio
import logging
import os
import signal
import sys
from datetime import datetime, timezone, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

# ==========
# ENV & LOGS
# ==========
TZ = os.getenv("TZ_DEFAULT", "Europe/Moscow")
# –¥–ª—è –ª–æ–≥–æ–≤: DEBUG/INFO/WARNING
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
log = logging.getLogger("main")

BOT_TOKEN = os.environ["BOT_TOKEN"]  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
MODE = os.getenv("MODE", os.getenv("ENV", "polling")).lower()  # polling | webhook
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ–±—Ö—É–∫–∏
PORT = int(os.getenv("PORT", "8000"))   # –¥–ª—è webhook
BUILD = os.getenv("BUILD_MARK", os.getenv("BUILD", "unknown"))
SHA = os.getenv("BUILD_SHA", os.getenv("SHA", "manual"))
ENV_NAME = os.getenv("ENV", "polling")

# Uptime
STARTED_AT = datetime.now(timezone.utc)

# ======
# ROUTER
# ======
router = Router()


def _fmt_uptime() -> str:
    delta: timedelta = datetime.now(timezone.utc) - STARTED_AT
    secs = int(delta.total_seconds())
    h, r = divmod(secs, 3600)
    m, s = divmod(r, 60)
    return f"{h:02d}:{m:02d}:{s:02d}"


@router.message(CommandStart())
async def cmd_start(m: Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/diag ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥\n"
        "/hq ‚Äî —Å–≤–æ–¥–∫–∞\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    await m.answer(text)


@router.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer("–ö–æ–º–∞–Ω–¥—ã: /start /status /diag /hq /ping")


@router.message(Command("ping") | Command("diag"))
async def cmd_ping(m: Message):
    await m.answer("pong ‚úÖ")


@router.message(Command("status"))
async def cmd_status(m: Message):
    await m.answer("OK ‚úÖ")


@router.message(Command("hq"))
async def cmd_hq(m: Message):
    text = (
        "üè∑Ô∏è HQ-—Å–≤–æ–¥–∫–∞\n"
        f"‚Ä¢ ENV: <b>{ENV_NAME}</b>  ‚Ä¢ MODE: <b>{MODE}</b>\n"
        f"‚Ä¢ BUILD: <code>{BUILD}</code>  ‚Ä¢ SHA: <code>{SHA}</code>\n"
        f"‚Ä¢ Uptime: <code>{_fmt_uptime()}</code>\n"
        "‚Ä¢ –û—Ç—á—ë—Ç—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ daily/post-deploy –æ—Ç—á—ë—Ç—ã)"
    )
    await m.answer(text, parse_mode="HTML")


# =========================
# LIFECYCLE & APP STARTUP
# =========================
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
_shutdown_event = asyncio.Event()


async def on_startup():
    # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø–æ–¥-—Ä–æ—É—Ç–µ—Ä—ã (casting/apply/faq/hq/ping –∏ —Ç.–ø.)
    log.info("Startup hook done.")


async def on_shutdown():
    log.info("Shutdown hook: closing bot session...")
    if bot:
        await bot.session.close()
    log.info("Shutdown completed.")


def _install_signals(loop: asyncio.AbstractEventLoop):
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ SIGTERM/SIGINT (Render —à–ª—ë—Ç SIGTERM –Ω–∞ —Ä–µ—Å—Ç–∞—Ä—Ç)
    def _handler(sig, frame):
        log.warning("Received %s ‚Äî shutting down gracefully...", sig.name)
        _shutdown_event.set()

    for s in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(s, _handler, s, None)
        except NotImplementedError:
            # Windows / PyCharm fallback
            signal.signal(s, _handler)


async def run_polling():
    global bot, dp
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(router)

    await on_startup()

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º webhook (–µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω)
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception as e:
        log.warning("delete_webhook warning: %s", e)

    # –°—Ç–∞—Ä—Ç—É–µ–º polling
    log.info("aiogram.dispatcher: Start polling..")
    polling = asyncio.create_task(dp.start_polling(bot, allowed_updates=None))

    # –∂–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    await _shutdown_event.wait()
    polling.cancel()
    with contextlib.suppress(asyncio.CancelledError):
        await polling

    await on_shutdown()


async def run_webhook():
    """
    –í–µ–±—Ö—É–∫–∏ –∏–º–µ—é—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤—Ö–æ–¥—è—â–∏–π HTTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, Render Web Service).
    –î–ª—è worker –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling.
    """
    from aiohttp import web
    from aiogram.webhook.aiohttp_server import (
        SimpleRequestHandler,
        setup_application,
    )

    if not WEBHOOK_URL:
        raise RuntimeError("WEBHOOK_URL is not set")

    global bot, dp
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(router)

    await on_startup()

    app = web.Application()
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path="/webhook")

    setup_application(app, dp, bot=bot)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(url=f"{WEBHOOK_URL}/webhook", drop_pending_updates=True)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    log.info("Webhook up on 0.0.0.0:%s", PORT)

    await _shutdown_event.wait()

    await runner.cleanup()
    await on_shutdown()


# =========
# MAIN
# =========
import contextlib

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    _install_signals(loop)

    try:
        if MODE == "webhook":
            loop.run_until_complete(run_webhook())
        else:
            # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî polling (–Ω–∞–¥—ë–∂–Ω–µ–µ –Ω–∞ Render Worker)
            loop.run_until_complete(run_polling())
    except KeyboardInterrupt:
        pass
    except Exception as e:
        log.exception("Fatal error: %s", e)
        sys.exit(1)
    finally:
        # safety
        if bot:
            loop.run_until_complete(bot.session.close())
        loop.close()
