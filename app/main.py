from __future__ import annotations

import asyncio
import importlib
import logging
import os
from typing import List

from fastapi import FastAPI
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import settings

logger = logging.getLogger("main")
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")

# ------------ FastAPI ------------
app = FastAPI(title="Elaya StageCoach", version=os.getenv("BUILD_MARK", "manual"))

def include_routers(fastapi_app: FastAPI, modules: List[str]) -> None:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ FastAPI, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)."""
    for module_name in modules:
        try:
            mod = importlib.import_module(module_name)
            router = getattr(mod, "router", None)
            if router:
                fastapi_app.include_router(router)
                logger.info("fastapi router loaded: %s", module_name)
        except Exception as e:
            logger.error("router failed: %s (%s)", module_name, e)

# –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å web-—Ä–æ—É—Ç–µ—Ä—ã ‚Äî –ø—Ä–æ–ø–∏—à–∏ –∏—Ö –∑–¥–µ—Å—å
include_routers(app, [
    # "app.routers.health",  # –ø—Ä–∏–º–µ—Ä
])

@app.get("/healthz")
async def healthz():
    return {"status": "ok", "mode": settings.MODE, "build": os.getenv("BUILD_MARK", "manual")}

# ------------ Telegram Bot (aiogram) ------------
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode(settings.PARSE_MODE)),
)
dp = Dispatcher()

def include_bot_routers(dispatcher: Dispatcher, modules: List[str]) -> None:
    for module_name in modules:
        try:
            mod = importlib.import_module(module_name)
            router = getattr(mod, "router", None)
            if router:
                dispatcher.include_router(router)
                logger.info("bot router loaded: %s", module_name)
        except Exception as e:
            logger.error("bot router failed: %s (%s)", module_name, e)

# –ø–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ aiogram-—Ä–æ—É—Ç–µ—Ä—ã
include_bot_routers(dp, [
    # "app.routers.entrypoints",
    # "app.routers.help",
    # "app.routers.faq",
    # "app.routers.devops_sync",
    # "app.routers.hq",
    # –∏ —Ç.–¥.
])

async def run_polling() -> None:
    logger.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)

# –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ entrypoint.sh
# - –¥–ª—è worker: python -m app.main ‚Üí –∑–¥–µ—Å—å –ø–æ–π–¥—ë–º –≤ polling
# - –¥–ª—è web: uvicorn app.main:app ‚Üí uvicorn –ø–æ–¥–Ω–∏–º–µ—Ç FastAPI –∏ –ù–ï –≤—ã–∑–æ–≤–µ—Ç polling

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ worker (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é)
    if settings.MODE == "worker":
        asyncio.run(run_polling())
    else:
        # –í —Ä–µ–∂–∏–º–µ web —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Å—Ç uvicorn —á–µ—Ä–µ–∑ entrypoint.sh
        import uvicorn
        uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=False)
