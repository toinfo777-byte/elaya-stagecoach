import asyncio
import logging
import os
import signal
import sys
from datetime import datetime, timezone

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    stream=sys.stdout,
)
log = logging.getLogger("app")

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    log.error("ENV BOT_TOKEN is not set")
    sys.exit(1)

ENV = os.getenv("ENV", "staging")
MODE = os.getenv("MODE", "polling")
BUILD_MARK = os.getenv("BUILD_MARK", "manual")
TZ_DEFAULT = os.getenv("TZ_DEFAULT", "Europe/Moscow")

STARTED_AT = datetime.now(timezone.utc)

# ---------- aiogram v3 ----------

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
dp.include_router(router)


# ---------- helpers ----------

def uptime_human() -> str:
    delta = datetime.now(timezone.utc) - STARTED_AT
    secs = int(delta.total_seconds())
    d, r = divmod(secs, 86400)
    h, r = divmod(r, 3600)
    m, s = divmod(r, 60)
    parts = []
    if d: parts.append(f"{d}d")
    if d or h: parts.append(f"{h}h")
    if d or h or m: parts.append(f"{m}m")
    parts.append(f"{s}s")
    return " ".join(parts)


async def hq_text() -> str:
    me = await bot.get_me()
    return (
        "<b>HQ-—Å–≤–æ–¥–∫–∞</b>\n"
        f"‚Ä¢ ENV: <code>{ENV}</code>\n"
        f"‚Ä¢ MODE: <code>{MODE}</code>\n"
        f"‚Ä¢ BUILD: <code>{BUILD_MARK}</code>\n"
        f"‚Ä¢ TZ: <code>{TZ_DEFAULT}</code>\n"
        f"‚Ä¢ Bot: <code>@{me.username}</code> (id={me.id})\n"
        f"‚Ä¢ Uptime: <code>{uptime_human()}</code>\n"
        "‚Ä¢ Note: polling —Å –∞–≤—Ç–æ-—Å–±—Ä–æ—Å–æ–º webhook\n"
    )


# ---------- handlers ----------

@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –∏ —Ä–∞–∑–¥–µ–ª—ã: –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ üß≠\n"
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞ 5‚Äì15 –º–∏–Ω.\n"
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Å—Ç—Ä–∏–∫ –∏ —ç–ø–∏–∑–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π.\n"
        "üéØ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ ¬∑ üí• –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞\n"
        "üÜò –ü–æ–º–æ—â—å / FAQ ¬∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üìú –ü–æ–ª–∏—Ç–∏–∫–∞ ¬∑ ‚≠êÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"
    )


@router.message(Command(commands=["hq"]))
async def on_hq(message: Message):
    await message.answer(await hq_text())


@router.message(Command(commands=["ping", "diag"]))
async def on_ping(message: Message):
    me = await bot.get_me()
    await message.answer(
        f"pong ¬∑ ok ¬∑ @{me.username}\n"
        f"uptime: <code>{uptime_human()}</code>"
    )


# —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ‚Äú—ç—Ö–æ‚Äù-–æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ dev/staging
@router.message(F.text)
async def fallback(message: Message):
    if ENV != "prod":
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π /hq –∏–ª–∏ /ping.")
    # –≤ –ø—Ä–æ–¥–µ ‚Äî –º–æ–ª—á–∏–º


# ---------- lifecycle ----------

stop_event = asyncio.Event()

def _graceful_shutdown(*_):
    log.warning("SIGTERM/SIGINT received ‚Äî shutting down‚Ä¶")
    stop_event.set()

async def main():
    # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥ polling –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º webhook,
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ‚ÄúgetUpdates / webhook‚Äù.
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted (drop_pending_updates=True)")
    except Exception as e:
        log.warning("delete_webhook failed: %s", e)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    log.info("Starting polling‚Ä¶")
    polling = asyncio.create_task(dp.start_polling(bot, allowed_updates=None))

    # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await stop_event.wait()

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    polling.cancel()
    with contextlib.suppress(asyncio.CancelledError):
        await polling

if __name__ == "__main__":
    import contextlib

    loop = asyncio.get_event_loop()
    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, _graceful_shutdown)

    try:
        loop.run_until_complete(main())
    finally:
        loop.run_until_complete(bot.session.close())
        loop.close()
