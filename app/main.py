# app/main.py
from __future__ import annotations

import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# ===== –†–û–£–¢–ï–†–´ (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫!)
from app.routers.smoke import router as smoke_router          # /ping, /health
from app.routers.apply import router as apply_router          # –∑–∞—è–≤–∫–∞ (–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞)
from app.routers.deeplink import router as deeplink_router    # /start <payload>
from app.routers.shortcuts import router as shortcuts_router  # /training, /casting, –∫–Ω–æ–ø–∫–∏ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
from app.routers.reply_shortcuts import router as reply_shortcuts_router  # –µ—Å–ª–∏ –µ—Å—Ç—å
from app.routers.onboarding import router as onboarding_router            # /start
from app.routers.training import router as training_router
from app.routers.casting import router as casting_router
from app.routers.progress import router as progress_router
from app.bot.handlers.feedback import router as feedback2_router          # üî•/üëå/üòê –∏ ‚úç 1 —Ñ—Ä–∞–∑–∞
from app.routers.system import router as system_router
from app.routers.settings import router as settings_router
from app.routers.admin import router as admin_router
from app.routers.premium import router as premium_router
from app.routers.metrics import router as metrics_router
from app.routers.cancel import router as cancel_router
from app.routers.menu import router as menu_router

# –ë–∞–∑–∞ (–µ—Å–ª–∏ —É –≤–∞—Å sync SQLAlchemy ‚Äî –ù–ï await)
from app.storage.repo import init_db

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")


async def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is not set")

    # aiogram 3.7+: parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )
    dp = Dispatcher(storage=MemoryStorage())

    # –ë–î (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –±–µ–∑ await)
    try:
        init_db()
    except Exception as e:
        logging.exception("init_db error: %s", e)

    # –ü–û–î–ö–õ–Æ–ß–ê–ï–ú –†–û–£–¢–ï–†–´ –í –ñ–ï–°–¢–ö–û –ó–ê–î–ê–ù–ù–û–ú –ü–û–†–Ø–î–ö–ï
    # 1) –≤—Å–µ–≥–¥–∞-–ª–æ–≤—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏
    dp.include_router(smoke_router)
    dp.include_router(deeplink_router)         # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start payload
    dp.include_router(shortcuts_router)        # /training, /casting, ¬´–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª, –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

    # 2) –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    dp.include_router(onboarding_router)       # –æ–±—ã—á–Ω—ã–π /start (–∞–Ω–∫–µ—Ç–∞)
    dp.include_router(training_router)
    dp.include_router(casting_router)
    dp.include_router(apply_router)

    # 3) —Ñ–∏–¥–±–µ–∫ (—ç–º–æ–¥–∑–∏ –∏ ¬´1 —Ñ—Ä–∞–∑–∞¬ª)
    dp.include_router(feedback2_router)

    # 4) –ø—Ä–æ—á–µ–µ
    dp.include_router(progress_router)
    dp.include_router(settings_router)
    dp.include_router(system_router)
    dp.include_router(admin_router)
    dp.include_router(premium_router)
    dp.include_router(metrics_router)
    dp.include_router(cancel_router)

    # 5) –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º ‚Äî –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    dp.include_router(menu_router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
