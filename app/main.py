from __future__ import annotations

import asyncio
import importlib
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats

from app.config import settings

# === –õ–û–ì–ò =====================================================================
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "DEBUG"),
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("main")

# === –ù–ê–°–¢–†–û–ô–ö–ò ================================================================
BOT_TOKEN = settings.bot_token or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN (settings.bot_token –∏–ª–∏ ENV BOT_TOKEN).")

DATABASE_URL = settings.db_url or os.getenv("DATABASE_URL", "sqlite:///elaya.db")


# === –ò–ú–ü–û–†–¢ –†–û–£–¢–ï–†–û–í –ü–û –ò–ú–ï–ù–ò =================================================
def _import_router(module_base: str, name: str):
    candidates = [f"{module_base}.{name}", f"{module_base}.{name}.router"]
    for cand in candidates:
        try:
            mod = importlib.import_module(cand)
            if getattr(mod, "__class__", None).__name__ == "Router":
                return mod
            r = getattr(mod, "router", None)
            if r is not None:
                return r
        except Exception as e:
            logging.getLogger("import").debug("Import miss %s: %s", cand, e)
    return None


def _include(dp: Dispatcher, name: str):
    r = _import_router("app.routers", name)
    if not r:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", name)
        return False
    dp.include_router(r)
    log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω", name)
    return True


async def _set_commands(bot: Bot):
    await bot.set_my_commands(
        [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
            BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            BotCommand("training", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
            BotCommand("progress", "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
            BotCommand("apply", "–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
            BotCommand("privacy", "–ü–æ–ª–∏—Ç–∏–∫–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        ],
        scope=BotCommandScopeAllPrivateChats(),
    )
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()

    # –í–ê–ñ–ù–û: reply_shortcuts —Å—Ç–∞–≤–∏–º –ü–ï–†–ï–î onboarding, —á—Ç–æ–±—ã –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    # –Ω–µ –≥–ª—É—à–∏–ª–∏—Å—å FSM –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã.
    routers = [
        "system",
        "reply_shortcuts",   # ¬´–í –º–µ–Ω—é¬ª, ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, ¬´–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏ —Ç.–ø. (reply)
        "cancel",

        "onboarding",        # –≤–µ—Å—å /start (–∏ deep-link) —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å

        # –º–µ–Ω—é + —Ä–∞–∑–¥–µ–ª—ã
        "menu",
        "training",
        "casting",
        "progress",
        "apply",
        "premium",
        "privacy",
        "help",

        "feedback",
        "shortcuts",
        "settings",
        "analytics",
    ]
    for name in routers:
        _include(dp, name)

    return dp


async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = build_dispatcher()
    await _set_commands(bot)

    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot, allowed_updates=None)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped.")
