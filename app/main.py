from __future__ import annotations

import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

# --- –†–û–£–¢–ï–†–´ (—Ç–æ—á–µ—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω—É–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤) ---
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞: –±–µ—Ä—ë–º router –∫–∞–∫ go_router
from app.routers.entrypoints import router as go_router

from app.routers.help import help_router                   # /help + –º–µ–Ω—é/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–ø–æ–ª–∏—Ç–∏–∫–∞
from app.routers.minicasting import mc_router              # üé≠ –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ (–∫–æ–ª–±—ç–∫–∏ mc:*)

# –µ—Å–ª–∏ –≤ –≤–∞—à–∏—Ö –º–æ–¥—É–ª—è—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ `router`, –∑–∞–±–∏—Ä–∞–µ–º –µ–≥–æ –ø–æ–¥ —è–≤–Ω—ã–º –∏–º–µ–Ω–µ–º:
from app.routers.training import router as tr_router       # üèãÔ∏è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è
from app.routers.leader import router as leader_router     # üß≠ –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞

# –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ‚Äî —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –∏ .router
from app.routers import (
    privacy as r_privacy,
    progress as r_progress,
    settings as r_settings,
    extended as r_extended,
    casting as r_casting,
    apply as r_apply,
    common as r_common_guard,   # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é (/menu, /start, ¬´–í –º–µ–Ω—é¬ª —Ç–µ–∫—Å—Ç –∏ —Ç.–ø.)
)

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="extended", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) —Å—Ö–µ–º–∞ –ë–î
    await ensure_schema()

    # 2) –±–æ—Ç/DP
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) —Å—Ä–µ–∑–∞–µ–º webhook –∏ –≤–∏—Å—è—á–∏–µ –∞–ø–¥–µ–π—Ç—ã (–∞–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç polling)
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted, pending updates dropped")

    # 4) –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –í–ê–ñ–ï–ù)
    dp.include_routers(
        # –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –∞–ª–∏–∞—Å—ã –∫–æ–ª–±—ç–∫–æ–≤ ‚Äî –î–û–õ–ñ–ï–ù –∏–¥—Ç–∏ –ø–µ—Ä–≤—ã–º
        go_router,

        # —Å—Ü–µ–Ω–∞—Ä–∏–∏ (FSM) ‚Äî –¥–æ ¬´common guard¬ª
        mc_router,        # üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥
        leader_router,    # üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞
        tr_router,        # üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è

        # —Ä–∞–∑–¥–µ–ª—ã
        r_progress.router,
        r_privacy.router,
        r_settings.router,
        r_extended.router,
        r_casting.router,
        r_apply.router,

        # /help –∏ —ç–∫—Ä–∞–Ω –º–µ–Ω—é/–ø–æ–ª–∏—Ç–∏–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        help_router,

        # –≥–ª–æ–±–∞–ª—å–Ω—ã–π ¬´–≥–≤–∞—Ä–¥¬ª ‚Äî –°–ê–ú–´–ô –ü–û–°–õ–ï–î–ù–ò–ô
        r_common_guard.router,
    )

    # 5) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 6) polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("‚èπ Stopped by user")
