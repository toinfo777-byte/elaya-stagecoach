from __future__ import annotations

import asyncio
import importlib
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommandScopeAllPrivateChats

from app.config import settings
from app.keyboards.menu import get_bot_commands  # –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ /–∫–æ–º–∞–Ω–¥

# === –õ–û–ì–ò =====================================================================
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "DEBUG"),
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("main")

# === –ù–ê–°–¢–†–û–ô–ö–ò ================================================================
BOT_TOKEN = settings.bot_token or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN (settings.bot_token –∏–ª–∏ ENV BOT_TOKEN).")

DATABASE_URL = settings.db_url or os.getenv("DATABASE_URL", "sqlite:///elaya.db")


# === –ò–ú–ü–û–†–¢ –†–û–£–¢–ï–†–û–í –ü–û –ò–ú–ï–ù–ò =================================================
def _import_router(module_base: str, name: str):
    candidates = [f"{module_base}.{name}", f"{module_base}.{name}.router"]
    for cand in candidates:
        try:
            mod = importlib.import_module(cand)
            if getattr(mod, "__class__", None).__name__ == "Router":
                return mod
            r = getattr(mod, "router", None)
            if r is not None:
                return r
        except Exception as e:
            logging.getLogger("import").debug("Import miss %s: %s", cand, e)
    return None


def _include(dp: Dispatcher, name: str):
    r = _import_router("app.routers", name)
    if not r:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", name)
        return False
    dp.include_router(r)
    log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω", name)
    return True


async def _set_commands(bot: Bot):
    await bot.set_my_commands(get_bot_commands(), scope=BotCommandScopeAllPrivateChats())
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç–µ—Ä—ã (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
    routers = [
        "reply_shortcuts",   # ¬´–í –º–µ–Ω—é¬ª, ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, ¬´–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏ —Ç.–ø. (reply)
        "cancel",
        "onboarding",        # –≤–µ—Å—å /start (–∏ deep-link) –∑–¥–µ—Å—å
        "menu",              # —Ö—ç–Ω–¥–ª–µ—Ä—ã –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é –∏ —Å–ø—Ä–∞–≤–∫–∏
        "training",
        "casting",
        "progress",
        "settings",
        "feedback",
        "analytics",
    ]
    for name in routers:
        _include(dp, name)

    return dp


async def main():
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = build_dispatcher()
    await _set_commands(bot)

    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot, allowed_updates=None)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped.")
