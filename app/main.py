from __future__ import annotations

import asyncio
import importlib
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")

# –ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π-—Ä–æ—É—Ç–µ—Ä–æ–≤
ROUTER_NAMES = [
    "admin",
    "analytics",
    "reply_shortcuts",
    "cancel",
    "onboarding",
    "menu",
    "training",
    "casting",
    "progress",
    "apply",
    "privacy",
    "help",
    "settings",
    "feedback",
    "shortcuts",
    "deeplink",
]


def _import_router(name: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç `router`.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—É—Ç–µ–π: app.routers.<name> –∏ app.<name>.
    """
    for modname in (f"app.routers.{name}", f"app.{name}"):
        try:
            mod = importlib.import_module(modname)
        except Exception as e:
            log.debug("Import miss %s: %s", modname, e)
            continue
        router = getattr(mod, "router", None)
        if router is not None:
            return router
    return None


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ë–î
    ensure_schema()

    # 2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (aiogram 3.7+)
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –±–µ–∑ –¥—É–±–ª–µ–π
    seen_router_ids: set[int] = set()
    for name in ROUTER_NAMES:
        r = _import_router(name)
        if r is None:
            log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", name)
            continue
        if id(r) in seen_router_ids:
            log.info("Router '%s' —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –¥—É–±–ª–∏–∫–∞—Ç", name)
            continue
        dp.include_router(r)
        seen_router_ids.add(id(r))
        log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω", name)

    # 4) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 5) —Å—Ç–∞—Ä—Ç long polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
