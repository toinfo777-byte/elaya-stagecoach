from __future__ import annotations

import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

# === –ü–æ–¥–∫–ª—é—á–∞–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ —ç—Ç–æ–≥–æ –ø–∞—Ç—á–∞ ===
from app.routers.entrypoints import router as go_router   # –µ–¥–∏–Ω—ã–π –≤—Ö–æ–¥ / –º–µ–Ω—é / –∞–ª–∏–∞—Å—ã
from app.routers.help import help_router                  # /help + –º–µ–Ω—é/–ø–æ–ª–∏—Ç–∏–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from app.routers.training import tr_router                # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
from app.routers.minicasting import mc_router             # –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥
from app.routers.leader import leader_router              # –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞
from app.routers.progress import progress_router          # –ø—Ä–æ–≥—Ä–µ—Å—Å

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="extended", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) —Å—Ö–µ–º–∞ –ë–î
    await ensure_schema()

    # 2) –±–æ—Ç/DP
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) —Å–Ω—è—Ç—å webhook –∏ –¥—Ä–æ–ø–Ω—É—Ç—å ¬´–≤–∏—Å—è—á–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã (–∞–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç polling)
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted, pending updates dropped")

    # 4) –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥/–∞–ª–∏–∞—Å—ã, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—ã
    dp.include_routers(
        go_router,
        help_router,
        tr_router,
        mc_router,
        leader_router,
        progress_router,
    )

    # 5) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 6) polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
