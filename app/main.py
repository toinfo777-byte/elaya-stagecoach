from __future__ import annotations

import asyncio
import importlib
import logging
import os
from typing import Iterable

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Update
from fastapi import FastAPI, Request, HTTPException

from app.config import settings

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL, logging.INFO),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("main")

# ---------- –ë–æ—Ç/–î–∏—Å–ø–µ—Ç—á–µ—Ä ----------
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode(settings.PARSE_MODE)),
)
dp = Dispatcher()


# ---------- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ) ----------
async def _include_routers(dp_: Dispatcher) -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏.
    –í–ê–ñ–ù–û: –ø—Ä–æ–±–ª–µ–º–Ω—ã–π app.routers.control –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º (–∑–∞–≥–ª—É—à–∫–∞ –ª–µ–∂–∏—Ç –æ—Ç–¥–µ–ª—å–Ω–æ).
    """
    modules: Iterable[str] = (
        "app.routers.entrypoints",
        # "app.routers.control",  # ‚Üê –≤–µ—Ä–Ω—ë—à—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        # –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
        # "app.routers.faq",
        # "app.routers.devops_sync",
        # "app.routers.panic",
        # "app.routers.hq",
    )
    for module_name in modules:
        try:
            mod = importlib.import_module(module_name)
            router = getattr(mod, "router", None)
            if router is None:
                log.warning("module %s has no `router`, skipped", module_name)
                continue
            dp_.include_router(router)
            log.info("router loaded: %s", module_name)
        except Exception:
            log.exception("‚ùå router failed: %s", module_name)
            raise


# ---------- –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã ----------
app = FastAPI(title="Elaya StageCoach ‚Äî Web")

WEBHOOK_PATH = f"/tg/{settings.WEBHOOK_SECRET}"
WEBHOOK_URL = f"{settings.WEB_BASE_URL.rstrip('/')}{WEBHOOK_PATH}"


@app.on_event("startup")
async def on_startup() -> None:
    await _include_routers(dp)
    if settings.MODE == "web":
        # –°—Ç–∞–≤–∏–º webhook
        await bot.set_webhook(
            url=WEBHOOK_URL,
            allowed_updates=list(settings.WEBHOOK_ALLOWED_UPDATES),
            drop_pending_updates=True,
        )
        log.info("‚úÖ setWebhook: %s", WEBHOOK_URL)
    else:
        # polling –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã FastAPI —Ç–æ–∂–µ –º–æ–≥ –ø–æ–¥–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        asyncio.create_task(run_polling())


@app.on_event("shutdown")
async def on_shutdown() -> None:
    if settings.MODE == "web":
        try:
            await bot.delete_webhook(drop_pending_updates=True)
        except Exception:
            log.exception("delete_webhook failed")


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    if settings.MODE != "web":
        raise HTTPException(status_code=400, detail="Not in webhook mode")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}


async def run_polling() -> None:
    log.info("üöÄ Start polling‚Ä¶")
    await _include_routers(dp)
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª–∏–º webhook –ø–µ—Ä–µ–¥ polling.
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await dp.start_polling(bot)


# –î–ª—è Render Web-—Å–µ—Ä–≤–∏—Å–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ–π health-check
@app.get("/")
async def root():
    return {"service": "elaya-stagecoach-web", "mode": settings.MODE, "build": settings.BUILD_MARK, "sha": settings.SHORT_SHA}
