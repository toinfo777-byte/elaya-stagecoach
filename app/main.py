from __future__ import annotations

import asyncio
import importlib
import logging
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    await bot.set_my_commands(
        [
            BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
            BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
            BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
            BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
            BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞"),
        ]
    )
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def _try_include(dp: Dispatcher, module_path: str, attr: str = "router") -> None:
    """
    –ú—è–≥–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞: –µ—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç router ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    """
    try:
        module = importlib.import_module(module_path)
        router = getattr(module, attr, None)
        if router is None:
            raise AttributeError(f"'{module_path}' has no '{attr}'")
        dp.include_router(router)
        log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω", module_path.rsplit(".", 1)[-1])
    except Exception as e:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é (%s)", module_path, e)


def setup_routers(dp: Dispatcher) -> None:
    # –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–æ—Ä—Ç–∫–∞—Ç—ã –∏ cancel, –ø–æ—Ç–æ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –Ω–∏–∂–µ
    for mod in [
        "app.routers.reply_shortcuts",
        "app.routers.cancel",
        "app.routers.onboarding",
        "app.routers.menu",
        "app.routers.training",
        "app.routers.casting",
        "app.routers.apply",
        "app.routers.progress",
        "app.routers.settings",
        "app.routers.analytics",
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:
        "app.routers.help",
        "app.routers.system",
        "app.routers.shortcuts",
        "app.routers.feedback",
        "app.routers.premium",
        "app.routers.privacy",
    ]:
        _try_include(dp, mod)


async def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
    )

    # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ë–î (—Å–æ–∑–¥–∞—Å—Ç—Å—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç)
    ensure_schema()

    # 2) aiogram
    bot = Bot(token=settings.bot_token, parse_mode="HTML")
    dp = Dispatcher()

    setup_routers(dp)
    await _set_commands(bot)

    # 3) —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ long-polling ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫, –Ω–æ –∞–ø–¥–µ–π—Ç—ã –Ω–µ –¥—Ä–æ–ø–∞–µ–º
    await bot.delete_webhook(drop_pending_updates=False)

    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
