# app/main.py
import asyncio
import logging
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage

from app.config import settings
from app.middlewares.error_handler import ErrorsMiddleware
from app.middlewares.source_tags import SourceTagsMiddleware
from app.storage.repo import init_db

# ===== –†–û–£–¢–ï–†–´ =====
from app.routers.smoke import router as smoke_router
from app.routers.apply import router as apply_router
from app.routers.deeplink import router as deeplink_router
from app.routers.shortcuts import router as shortcuts_router
from app.routers.onboarding import router as onboarding_router
from app.routers.coach import router as coach_router
from app.routers.training import router as training_router
from app.routers.casting import router as casting_router
from app.routers.progress import router as progress_router
from app.routers.feedback import router as feedback_router
from app.routers.system import router as system_router
from app.routers.settings import router as settings_router
from app.routers.admin import router as admin_router
from app.routers.premium import router as premium_router
from app.routers.metrics import router as metrics_router
from app.routers.cancel import router as cancel_router
from app.routers.menu import router as menu_router

# –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤ (–∫–Ω–æ–ø–∫–∏ üî•/üëå/üòê + ¬´1 —Ñ—Ä–∞–∑–∞¬ª)
from app.bot.handlers.feedback import router as feedback2_router

# –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä (—Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤)
from app.routers.debug import router as debug_router

# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SQLite
from app.utils.maintenance import backup_sqlite, vacuum_sqlite

# ========= –õ–û–ì–ò =========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger(__name__)
logging.getLogger("aiogram").setLevel(logging.DEBUG)  # –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∞–ø–¥–µ–π—Ç–æ–≤

# ====== —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ë–î ======
async def _sleep_until_utc(hour: int, minute: int = 0, dow: int | None = None):
    now = datetime.now(timezone.utc).replace(second=0, microsecond=0)
    target = now.replace(hour=hour, minute=minute)
    if target <= now:
        target += timedelta(days=1)
    if dow is not None:
        while target.weekday() != dow:
            target += timedelta(days=1)
    await asyncio.sleep((target - now).total_seconds())

async def _backup_loop():
    while True:
        await _sleep_until_utc(2, 0)  # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 02:00 UTC
        try:
            path = backup_sqlite()
            log.info("Backup done: %s", path)
        except Exception as e:
            log.exception("Backup failed: %s", e)

async def _vacuum_loop():
    while True:
        await _sleep_until_utc(2, 5, dow=6)  # –≤—Å 02:05 UTC
        try:
            vacuum_sqlite()
            log.info("Vacuum done")
        except Exception as e:
            log.exception("Vacuum failed: %s", e)

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É—Å—Ç–∞–Ω–æ–≤–∫–∞ /–∫–æ–º–∞–Ω–¥ ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –∑–∞–ø—É—Å–∫—É
async def setup_commands(bot: Bot) -> None:
    try:
        commands: list[types.BotCommand] = [
            types.BotCommand(command="start",     description="–ù–∞—á–∞—Ç—å"),
            types.BotCommand(command="apply",     description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)"),
            types.BotCommand(command="coach_on",  description="–í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
            types.BotCommand(command="coach_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
            types.BotCommand(command="ask",       description="–°–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
            types.BotCommand(command="training",  description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
            types.BotCommand(command="casting",   description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
            types.BotCommand(command="progress",  description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
            types.BotCommand(command="cancel",    description="–°–±—Ä–æ—Å–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
            types.BotCommand(command="help",      description="–°–ø—Ä–∞–≤–∫–∞"),
            types.BotCommand(command="privacy",   description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
            types.BotCommand(command="version",   description="–í–µ—Ä—Å–∏—è"),
        ]
        await bot.set_my_commands(
            commands=commands,
            scope=types.BotCommandScopeAllPrivateChats(),
        )
        log.info("Bot commands set successfully")
    except Exception as e:
        log.warning("setup_commands failed: %s", e)

# ====== main ======
async def main():
    if not settings.bot_token:
        raise RuntimeError("BOT_TOKEN is empty. Set it in .env")

    init_db()

    bot = Bot(token=settings.bot_token)
    dp = Dispatcher(storage=MemoryStorage())

    # middlewares
    dp.message.middleware(SourceTagsMiddleware())
    dp.callback_query.middleware(SourceTagsMiddleware())
    dp.message.middleware(ErrorsMiddleware())
    dp.callback_query.middleware(ErrorsMiddleware())

    # –ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!
    for r in (
        smoke_router,
        apply_router,
        deeplink_router,
        shortcuts_router,
        onboarding_router,
        coach_router,
        training_router,
        casting_router,
        progress_router,

        feedback2_router,    # –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
        feedback_router,     # –ø—Ä–æ–µ–∫—Ç–Ω—ã–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ—è –ª–æ–≥–∏–∫–∞/–º–µ—Ç—Ä–∏–∫–∏)

        system_router,
        settings_router,
        admin_router,
        premium_router,
        metrics_router,
        cancel_router,

        debug_router,        # <‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –∞–ø–¥–µ–π—Ç—ã, –æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –º–µ–Ω—é
        menu_router,         # –º–µ–Ω—é ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    ):
        dp.include_router(r)
        log.info("Included router: %s", getattr(r, "name", r))

    async with bot:
        try:
            await bot.delete_webhook(drop_pending_updates=False)
        except Exception as e:
            log.warning("delete_webhook failed: %s", e)

        # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º —Ä–∞–¥–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        # await setup_commands(bot)

        # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(_backup_loop())
        asyncio.create_task(_vacuum_loop())

        await dp.start_polling(
            bot,
            allowed_updates=None,  # –∑–∞–±–∏—Ä–∞–µ–º –≤–æ–æ–±—â–µ –≤—Å–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
            polling_timeout=30,
        )

if __name__ == "__main__":
    asyncio.run(main())
