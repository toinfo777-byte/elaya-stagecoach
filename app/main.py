from __future__ import annotations
import asyncio, logging, hashlib
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema
from app.routers.panic import router as panic_router

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("main")

BUILD_MARK = "panic-only-respond-2025-10-09"

async def _set_commands(bot: Bot) -> None:
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –º–µ–Ω—é"),
        BotCommand(command="menu",  description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="ping",  description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
    ])

async def main() -> None:
    log.info("=== BUILD %s ===", BUILD_MARK)
    await ensure_schema()

    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted, pending updates dropped")

    # –ù–∞ –≤—Å—è–∫–∏–π: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ç–∞—Ä—ã—Ö long-polling —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ü–µ—Å—Å)
    try:
        await bot.log_out()
        log.info("Logged out previous sessions")
    except Exception:
        log.exception("log_out failed (can ignore)")

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ—Å–ª–µ log_out
    await bot.session.close()
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    dp = Dispatcher()

    # ‚ùó –ü–æ–¥–∫–ª—é—á–∞–µ–º –¢–û–õ–¨–ö–û panic-—Ä–æ—É—Ç–µ—Ä
    dp.include_router(panic_router)
    log.info("‚úÖ router loaded: panic")

    await _set_commands(bot)
    me = await bot.get_me()
    log.info("üîë Token hash: %s", hashlib.md5(settings.bot_token.encode()).hexdigest()[:8])
    log.info("ü§ñ Bot: @%s (ID: %s)", me.username, me.id)
    log.info("üöÄ Start polling‚Ä¶")

    # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏ message, –∏ callback_query
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("‚èπ Stopped by user")
