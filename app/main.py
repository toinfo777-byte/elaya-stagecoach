# app/main.py
from __future__ import annotations

import asyncio
import importlib
import logging
import os
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    BotCommand,
    BotCommandScopeAllPrivateChats,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ================================================================
try:
    from app.config import settings  # type: ignore
except Exception:
    settings = None  # noqa: N816

BOT_TOKEN = (settings and settings.BOT_TOKEN) or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤–∫–ª—é—á–∞–µ–º DEBUG, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "DEBUG"),
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("main")


# === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ==============================================================
def _import_router(module_base: str, name: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑:
      1) app.routers.<name>  (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è router –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è)
      2) app.routers.<name>.router (–µ—Å–ª–∏ —Ä–æ—É—Ç–µ—Ä –ª–µ–∂–∏—Ç –ø–æ–¥–º–æ–¥—É–ª–µ–º)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Router –∏–ª–∏ None.
    """
    candidates = [
        f"{module_base}.{name}",
        f"{module_base}.{name}.router",
    ]
    for cand in candidates:
        try:
            mod = importlib.import_module(cand)
            # a) —Å–∞–º –º–æ–¥—É–ª—å ‚Äî –µ—Å–ª–∏ –æ–Ω —É–∂–µ router
            if getattr(mod, "__class__", None).__name__ == "Router":
                return mod
            # b) –ø–æ–ª–µ router –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è
            router = getattr(mod, "router", None)
            if router is not None:
                return router
        except Exception as e:
            log.debug("Import miss: %s (%s)", cand, e)
    return None


def _include_router_try_both(dp: Dispatcher, name: str):
    router = _import_router("app.routers", name)
    if router is None:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", name)
        return False
    dp.include_router(router)
    log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω: %s", name, router)
    return True


async def _set_commands(bot: Bot):
    # –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–º–∏–Ω–∏–º—É–º)
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å / –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())
    log.info("‚úÖ /–∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤")


# === Bootstrap ================================================================
def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()

    # –ü–æ—Ä—è–¥–æ–∫ –í–ê–ñ–ï–ù: —Å–Ω–∞—á–∞–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ —Ä–∞–∑—Ä—É–ª–∏–≤–∞—é—â–∏–µ, –ø–æ—Ç–æ–º FSM/–º–µ–Ω—é, –ø–æ—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ,
    # –≤ –∫–æ–Ω—Ü–µ ‚Äî –æ—Ç–∑—ã–≤–∫–∏/—à–æ—Ä—Ç–∫–∞—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    routers_order = [
        # –±–∞–∑–æ–≤—ã–µ
        "system",
        "deeplink",          # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–ø–ª–∏–Ω–∫–∏
        "cancel",            # –æ–±—â–∏–π /cancel –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç state

        # –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ ¬´–º–∞–ª–µ–Ω—å–∫–æ–µ¬ª –º–µ–Ω—é
        "onboarding",        # FSM name ‚Üí tz ‚Üí goal ‚Üí exp ‚Üí consent
        "reply_shortcuts",   # ¬´–í –º–µ–Ω—é¬ª, ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª, ¬´–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª (reply-–∫–Ω–æ–ø–∫–∏)

        # –æ—Å–Ω–æ–≤–Ω–æ–µ
        "menu",              # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Ä–æ—É—Ç–µ—Ä–∞ –º–µ–Ω—é
        "training",
        "casting",
        "progress",
        "apply",
        "premium",
        "privacy",
        "help",

        # –æ—Ç–∑—ã–≤—ã/–æ—Ü–µ–Ω–∫–∏ (—ç–º–æ–¥–∑–∏ –∏ ¬´‚úçÔ∏è 1 —Ñ—Ä–∞–∑–∞¬ª)
        "feedback",

        # –æ–±—â–∏–µ —à–æ—Ä—Ç–∫–∞—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "shortcuts",
        "settings",

        # –æ—Ç—á—ë—Ç—ã/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        "analytics",
    ]

    for name in routers_order:
        _include_router_try_both(dp, name)

    return dp


async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )
    dp = build_dispatcher()

    await _set_commands(bot)

    log.info("üöÄ Starting long polling‚Ä¶")
    await dp.start_polling(bot, allowed_updates=None)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped.")
