# app/main.py
from __future__ import annotations

import asyncio
import logging
import signal
from contextlib import asynccontextmanager

from fastapi import FastAPI

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import settings

# --- –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞) ---
try:
    from app.storage.repo import ensure_schema  # –µ—Å–ª–∏ –µ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
except Exception:  # noqa: BLE001
    ensure_schema = None

try:
    from app.build import BUILD_MARK  # –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å —Å–±–æ—Ä–æ—á–Ω—ã–π –º–∞—Ä–∫–µ—Ä
except Exception:  # noqa: BLE001
    BUILD_MARK = "dev"

# --- –†–æ—É—Ç–µ—Ä—ã FastAPI (–ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏) ---
# –ü—Ä–∏–º–µ—Ä: from app.routers import entrypoints, health, hq, ...
# –ù–∏–∂–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å, –Ω–æ –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –º–æ–¥—É–ª–µ–π –Ω–µ—Ç.
def include_optional_routers(app_: FastAPI) -> None:
    try:
        from app.routers import entrypoints
        app_.include_router(entrypoints.router)
    except Exception:
        pass

    try:
        from app.routers import help as help_router
        app_.include_router(help_router.router)
    except Exception:
        pass

    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏:
    # try:
    #     from app.routers import hq, privacy, training, progress, ...
    #     app_.include_router(hq.router)
    #     ...
    # except Exception:
    #     pass


# ------------- Aiogram section -------------
dp: Dispatcher | None = None
bot: Bot | None = None


async def start_polling() -> None:
    """–°—Ç–∞—Ä—Ç—É–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MODE = polling/bot –∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω."""
    global dp, bot

    token = settings.EFFECTIVE_BOT_TOKEN
    if not token:
        logging.warning("Polling skipped: no BOT_TOKEN/TG_BOT_TOKEN provided.")
        return

    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º aiogram-—Ä–æ—É—Ç–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try:
        from app.routers import (
            entrypoints as tg_entrypoints,
            help as tg_help,
            cmd_aliases,
            onboarding,
            system,
            minicasting,
            leader,
            training,
            progress,
            privacy,
            settings as settings_mod,
            extended,
            casting,
            apply,
            faq,
            devops_sync,
            panic,
            hq,
            # diag,  # –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        )

        dp.include_router(tg_entrypoints.router)
        dp.include_router(tg_help.router)
        dp.include_router(cmd_aliases.router)
        dp.include_router(onboarding.router)
        dp.include_router(system.router)
        dp.include_router(minicasting.router)
        dp.include_router(leader.router)
        dp.include_router(training.router)
        dp.include_router(progress.router)
        dp.include_router(privacy.router)
        dp.include_router(settings_mod.router)
        dp.include_router(extended.router)
        dp.include_router(casting.router)
        dp.include_router(apply.router)
        dp.include_router(faq.router)
        dp.include_router(devops_sync.router)
        dp.include_router(panic.router)
        dp.include_router(hq.router)
        # dp.include_router(diag.router)
    except Exception:
        # –ï—Å–ª–∏ aiogram-—Ä–æ—É—Ç–µ—Ä–æ–≤ –Ω–µ—Ç/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —á–∏—Å—Ç—ã–π dp
        logging.getLogger(__name__).warning("Aiogram routers not linked; running bare Dispatcher.")

    logging.info("üöÄ Start polling‚Ä¶ [mode=%s, build=%s]", settings.MODE, BUILD_MARK)
    await dp.start_polling(bot, allowed_updates=None)  # None = –≤—Å–µ —Ç–∏–ø—ã


async def stop_polling() -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ aiogram."""
    global dp, bot
    try:
        if dp:
            await dp.storage.close()
            await dp.fsm.storage.close()  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è FSMStorage
    except Exception:
        pass
    try:
        if bot:
            await bot.session.close()
    except Exception:
        pass
    dp = None
    bot = None


# ------------- FastAPI section -------------
@asynccontextmanager
async def lifespan(app_: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î/—Å—Ö–µ–º ‚Äî –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ
    if ensure_schema is not None:
        try:
            await ensure_schema()
        except Exception:  # noqa: BLE001
            logging.getLogger(__name__).warning("ensure_schema() skipped or failed.", exc_info=True)

    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ web ‚Äî –ø–æ–¥–Ω–∏–º–µ–º polling –≤ —Ñ–æ–Ω–µ
    polling_task: asyncio.Task | None = None
    if settings.is_polling:
        polling_task = asyncio.create_task(start_polling())

    # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FastAPI
    yield

    # –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≥–∞—Å–∏–º polling
    if polling_task:
        # –æ—Ç–ø—Ä–∞–≤–∏–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
        try:
            await stop_polling()
        finally:
            try:
                polling_task.cancel()
                with contextlib.suppress(asyncio.CancelledError):
                    await polling_task
            except Exception:
                pass


def create_app() -> FastAPI:
    app_ = FastAPI(
        title="Elaya StageCoach",
        version=str(BUILD_MARK),
        lifespan=lifespan,
    )

    @app_.get("/health")
    async def health():
        return {"status": "ok", "mode": settings.MODE, "build": BUILD_MARK}

    include_optional_routers(app_)
    return app_


app = create_app()

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ uvicorn (–Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ Render, –Ω–æ –ø–æ–ª–µ–∑–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ):
# uvicorn app.main:app --reload
