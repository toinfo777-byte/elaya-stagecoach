from __future__ import annotations

import asyncio
import importlib
import logging
import os
import time
from typing import Any, Dict

from fastapi import FastAPI, Response
from fastapi.responses import JSONResponse

# ---------- –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("elaya.main")

# ---------- FastAPI
app = FastAPI(
    title="Elaya Stagecoach ‚Äî Web",
    version=os.getenv("BUILD_SHA", "local"),
)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–≤–æ–∏ —Ä–æ—É—Ç–µ—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å (–º—è–≥–∫–æ ‚Äî –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª –ø–æ—è–≤–∏—Ç—Å—è ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è)
def _include_optional_routers(_app: FastAPI) -> None:
    router_modules = [
        # –¥–æ–±–∞–≤–ª—è–π/—Å–Ω–∏–º–∞–π –ø–æ –≤–∫—É—Å—É ‚Äî –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
        "app.routers.faq",
        "app.routers.devops_sync",
        "app.routers.hq",
        "app.routers.system",
        "app.routers.entrypoints",
        "app.routers.help",
        "app.routers.cmd_aliases",
        "app.routers.onboarding",
        "app.routers.leader",
        "app.routers.training",
        "app.routers.progress",
        "app.routers.privacy",
        "app.routers.settings",
        "app.routers.extended",
        "app.routers.casting",
        "app.routers.apply",
        # "app.routers.diag",  # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    ]
    for mod_name in router_modules:
        try:
            mod = importlib.import_module(mod_name)
            router = getattr(mod, "router", None)
            if router is not None:
                _app.include_router(router)
                log.info("router loaded: %s", mod_name)
            else:
                log.debug("module has no router: %s", mod_name)
        except Exception as e:
            # –ù–µ –≤–∞–ª–∏–º web, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            log.warning("router skipped: %s (%s)", mod_name, e)


_include_optional_routers(app)


# ---------- —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/healthz")
def healthz() -> Dict[str, str]:
    # –õ—ë–≥–∫–∏–π endpoint –¥–ª—è Render Health Check
    return {"status": "ok"}


@app.get("/status_json")
def status_json() -> JSONResponse:
    # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á—ë—Ç, —á—Ç–æ–±—ã HQ-–±–æ—Ç/–ø–∞–Ω–µ–ª—å –º–æ–≥–ª–∏ –¥—ë—Ä–≥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ web
    payload = {
        "env": os.getenv("ENV", "staging"),
        "mode": os.getenv("MODE", "web"),
        "build": os.getenv("BUILD_SHA", "local"),
        "sha": os.getenv("RENDER_GIT_COMMIT", "manual"),
        "uptime": int(time.time() - START_TS),
        "service": "web",
    }
    return JSONResponse(payload)


# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞ (aiogram polling)

async def run_worker() -> None:
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode

    token = os.getenv("TG_BOT_TOKEN")
    if not token:
        raise RuntimeError("TG_BOT_TOKEN is not set")

    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ –∂–µ —Ä–æ—É—Ç–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç aiogram-—Ö–µ–Ω–¥–ª–µ—Ä—ã
    modules = [
        "app.routers.faq",
        "app.routers.devops_sync",
        "app.routers.hq",
        "app.routers.system",
        "app.routers.entrypoints",
        "app.routers.help",
        "app.routers.cmd_aliases",
        "app.routers.onboarding",
        "app.routers.leader",
        "app.routers.training",
        "app.routers.progress",
        "app.routers.privacy",
        "app.routers.settings",
        "app.routers.extended",
        "app.routers.casting",
        "app.routers.apply",
    ]
    for name in modules:
        try:
            mod = importlib.import_module(name)
            # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: dp/routers –∏–ª–∏ register(dp)
            if hasattr(mod, "router"):
                dp.include_router(getattr(mod, "router"))
                log.info("bot router loaded: %s", name)
            elif hasattr(mod, "register"):
                getattr(mod, "register")(dp)
                log.info("bot register called: %s", name)
        except Exception as e:
            log.warning("bot router skipped: %s (%s)", name, e)

    log.info("üß≠ Start polling‚Ä¶")
    await dp.start_polling(bot)


# ---------- –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (Render –≤—ã–∑—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ entrypoint.sh)

START_TS = time.time()

if __name__ == "__main__":
    mode = os.getenv("MODE", "web").lower()
    if mode in ("worker", "polling"):
        asyncio.run(run_worker())
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ: uvicorn app.main:app --reload
        import uvicorn

        uvicorn.run(
            "app.main:app",
            host=os.getenv("HOST", "0.0.0.0"),
            port=int(os.getenv("PORT", "10000")),
            log_level=os.getenv("LOG_LEVEL", "info"),
        )
