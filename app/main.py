# app/main.py
from __future__ import annotations

import asyncio
import importlib
import logging
import os
import time
from typing import Any, Dict

from fastapi import FastAPI
from fastapi.responses import JSONResponse

# ---------- –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("elaya.main")

# ---------- FastAPI
app = FastAPI(
    title="Elaya Stagecoach ‚Äî Web",
    version=os.getenv("BUILD_SHA", "local"),
)

START_TS = time.time()


def _include_optional_routers(_app: FastAPI) -> None:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤–µ–±-—Ä–æ—É—Ç–µ—Ä—ã (FastAPI).
    –ú–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ.
    """
    router_modules = [
        # === —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±-—Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ===
        "app.routers.faq",
        "app.routers.devops_sync",
        "app.routers.hq",
        "app.routers.system",
        "app.routers.entrypoints",
        "app.routers.help",
        "app.routers.cmd_aliases",
        "app.routers.onboarding",
        "app.routers.leader",
        "app.routers.training",
        "app.routers.progress",
        "app.routers.privacy",
        "app.routers.settings",
        "app.routers.extended",
        "app.routers.casting",
        "app.routers.apply",
        # "app.routers.diag",

        # === –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
        "app.scene.intro",
        "app.scene.reflect",
        "app.scene.transition",
    ]
    for mod_name in router_modules:
        try:
            mod = importlib.import_module(mod_name)
            router = getattr(mod, "router", None)
            if router is not None:
                _app.include_router(router)
                log.info("router loaded: %s", mod_name)
            else:
                log.debug("module has no router: %s", mod_name)
        except Exception as e:
            log.warning("router skipped: %s (%s)", mod_name, e)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
_include_optional_routers(app)

# ---------- —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã

@app.get("/healthz")
def healthz() -> Dict[str, str]:
    """–õ—ë–≥–∫–∏–π endpoint –¥–ª—è Render Health Check"""
    return {"status": "ok"}


@app.get("/status_json")
def status_json() -> JSONResponse:
    """
    –¢–æ–Ω–∫–∏–π HQ-—ç–Ω–¥–ø–æ–∏–Ω—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ Render'–æ–º –¥–ª—è health, –∏ HQ-–ø—É–ª—å—Å–æ–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –±–∞–∑–æ–≤—ã–º–∏ –∏ HQ-–ø–æ–ª—è–º–∏ (status_emoji, focus, note, quote).
    """
    uptime_sec = int(time.time() - START_TS)
    h, rem = divmod(uptime_sec, 3600)
    m, _ = divmod(rem, 60)
    uptime_str = f"{h}h {m}m"

    payload = {
        # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        "env": os.getenv("ENV", "staging"),
        "mode": os.getenv("MODE", "web"),
        "service": "web",
        "build": os.getenv("BUILD_SHA", "local"),
        "sha": os.getenv("RENDER_GIT_COMMIT", "manual"),
        "uptime": uptime_str,

        # HQ-–ø–æ–ª—è ‚Äî —á–∏—Ç–∞—é—Ç—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º tools/make_hq_pulse.py
        "status_emoji": os.getenv("HQ_STATUS_EMOJI", "üåû"),
        "status_word": os.getenv("HQ_STATUS_WORD", "Stable"),
        "focus": os.getenv("HQ_STATUS_FOCUS", "–°–∏—Å—Ç–µ–º–∞ –≤ —Ä–∏—Ç–º–µ –¥—ã—Ö–∞–Ω–∏—è"),
        "note": os.getenv("HQ_STATUS_NOTE", "Web –∏ Bot —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã; –ø—É–ª—å—Å —Ä–æ–≤–Ω—ã–π."),
        "quote": os.getenv("HQ_STATUS_QUOTE", "¬´–ù–æ—è–±—Ä—å ‚Äî –¥—ã—Ö–∞–Ω–∏–µ –∏–∑–Ω—É—Ç—Ä–∏.¬ª"),
    }
    return JSONResponse(payload)

# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞ (aiogram polling)

async def run_worker() -> None:
    """Aiogram-polling –≤–æ—Ä–∫–µ—Ä: –ø–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –±–æ—Ç–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (–≤–∫–ª—é—á–∞—è —Å—Ü–µ–Ω—ã)."""
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω—Ç–∏—à—É–º –º–∏–¥–ª–≤–∞—Ä—å
    from app.middlewares.chat_scope import PrivateOnlyMiddleware

    token = os.getenv("TG_BOT_TOKEN")
    if not token:
        raise RuntimeError("TG_BOT_TOKEN is not set")

    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # ===== –ê–Ω—Ç–∏—à—É–º –≤ –≥—Ä—É–ø–ø–∞—Ö =====
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≥–ª—É—à–∏–º):
    allow_raw = os.getenv("ALLOW_GROUP_COMMANDS", "/hq,/healthz")
    allow_in_groups = [s.strip() for s in allow_raw.split(",") if s.strip()]
    scope_mw = PrivateOnlyMiddleware(allow_in_groups=allow_in_groups)

    dp.message.middleware(scope_mw)
    dp.callback_query.middleware(scope_mw)
    # ==============================

    modules = [
        # === —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
        "app.routers.faq",
        "app.routers.devops_sync",
        "app.routers.hq",
        "app.routers.system",
        "app.routers.entrypoints",
        "app.routers.help",
        "app.routers.cmd_aliases",
        "app.routers.onboarding",
        "app.routers.leader",
        "app.routers.training",
        "app.routers.progress",
        "app.routers.privacy",
        "app.routers.settings",
        "app.routers.extended",
        "app.routers.casting",
        "app.routers.apply",
        # "app.routers.diag",

        # === –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) ===
        "app.scene.intro",
        "app.scene.reflect",
        "app.scene.transition",
    ]
    for name in modules:
        try:
            mod = importlib.import_module(name)
            if hasattr(mod, "router"):
                dp.include_router(getattr(mod, "router"))
                log.info("bot router loaded: %s", name)
            elif hasattr(mod, "register"):
                getattr(mod, "register")(dp)
                log.info("bot register called: %s", name)
        except Exception as e:
            log.warning("bot router skipped: %s (%s)", name, e)

    log.info("üß≠ Start polling‚Ä¶")
    await dp.start_polling(bot)

# ---------- —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ (Render –≤—ã–∑—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ entrypoint.sh)

if __name__ == "__main__":
    mode = os.getenv("MODE", "web").lower()
    if mode in ("worker", "polling"):
        asyncio.run(run_worker())
    else:
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: uvicorn app.main:app --reload
        import uvicorn

        uvicorn.run(
            "app.main:app",
            host=os.getenv("HOST", "0.0.0.0"),
            port=int(os.getenv("PORT", "10000")),
            log_level=os.getenv("LOG_LEVEL", "info"),
        )
