from __future__ import annotations

import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

# ‚Äî‚Äî‚Äî –†–û–£–¢–ï–†–´ ‚Äî‚Äî‚Äî
from app.routers.entrypoints import go_router            # –µ–¥–∏–Ω—ã–π –≤—Ö–æ–¥: /menu, /training, go:* –∏ —Ç.–ø.
from app.routers.help import help_router                 # /help + –º–µ–Ω—é/–ø–æ–ª–∏—Ç–∏–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from app.routers.training import router as tr_router     # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è (–µ—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π —ç–∫—Å–ø–æ—Ä—Ç ‚Äî –ø–æ–ø—Ä–∞–≤—å—Ç–µ)
from app.routers.minicasting import mc_router            # –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥ (mc_router –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
from app.routers.leader import router as leader_router   # –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞
from app.routers.progress import router as progress_router
from app.routers.privacy import router as privacy_router
from app.routers.settings import router as settings_router
from app.routers.extended import router as extended_router
# –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: from app.routers.start import router as start_router

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="extended", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) —Å—Ö–µ–º–∞ –ë–î
    await ensure_schema()

    # 2) –±–æ—Ç/DP
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) —Å—Ä–µ–∑–∞—Ç—å webhook –∏ –≤–∏—Å—è—á–∏–µ –∞–ø–¥–µ–π—Ç—ã (–∞–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç polling)
    await bot.delete_webhook(drop_pending_updates=True)

    # 4) –ø–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤–∞–∂–µ–Ω!)
    dp.include_routers(
        go_router,         # ‚Üê –ü–ï–†–í–´–ú: –ª–æ–≤–∏—Ç /menu, /training, go:* –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        help_router,       # /help –∏ –±–∞–∑–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã
        tr_router,         # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        mc_router,         # –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥
        leader_router,     # –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞
        progress_router,   # –ø—Ä–æ–≥—Ä–µ—Å—Å
        privacy_router,    # –ø–æ–ª–∏—Ç–∏–∫–∞
        settings_router,   # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        extended_router,   # —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        # start_router,    # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π /start —Å –¥–∏–ø–ª–∏–Ω–∫–∞–º–∏
    )

    # 5) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 6) polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
