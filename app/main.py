# app/main.py
from __future__ import annotations

import asyncio
import logging
from importlib import import_module

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

log = logging.getLogger("main")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)


def _try_import_router(module_path: str, router_name: str = "router"):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑ –º–æ–¥—É–ª—è. –ï—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç –∏–ª–∏ –≤ –Ω—ë–º –Ω–µ—Ç router ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º.
    """
    try:
        mod = import_module(module_path)
        router = getattr(mod, router_name)
        log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω", module_path.rsplit(".", 1)[-1])
        return router
    except Exception as e:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é (%s)", module_path.rsplit(".", 1)[-1], e)
        return None


async def _set_commands(bot: Bot) -> None:
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∞"),
    ]
    await bot.set_my_commands(commands)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def main() -> None:
    # 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –ë–î (—Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    ensure_schema()

    # 2) —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ (aiogram 3.7+ ‚Äî parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties)
    bot = Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )

    # —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ webhook –≤—ã–∫–ª—é—á–µ–Ω (–º—ã –Ω–∞ long-polling)
    try:
        await bot.delete_webhook(drop_pending_updates=False)
    except Exception:
        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass

    dp = Dispatcher()

    # 3) –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã.
    # –í–ê–ñ–ù–û: deeplink-—Ä–æ—É—Ç–µ—Ä—ã (training/casting) –ø–æ–¥–∫–ª—é—á–∞–µ–º –ü–ï–†–í–´–ú–ò, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
    for path in [
        "app.routers.training",         # deeplink –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        "app.routers.casting",          # deeplink –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥
        "app.routers.reply_shortcuts",  # –∫–Ω–æ–ø–∫–∏ "–≤ –º–µ–Ω—é" / "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" / "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        "app.routers.cancel",           # /cancel
        "app.routers.onboarding",       # –æ–±—â–∏–π /start (–ø–æ—Å–ª–µ deeplink-—Ä–æ—É—Ç–µ—Ä–æ–≤!)
        "app.routers.menu",             # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
        "app.routers.apply",            # –ø—É—Ç—å –ª–∏–¥–µ—Ä–∞
        "app.routers.progress",         # –ø—Ä–æ–≥—Ä–µ—Å—Å
        "app.routers.settings",         # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        "app.routers.feedback",         # –º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        "app.routers.analytics",        # –∞–Ω–∞–ª–∏—Ç–∏–∫–∞/health
    ]:
        r = _try_import_router(path)
        if r:
            dp.include_router(r)

    # 4) –ö–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)

    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
