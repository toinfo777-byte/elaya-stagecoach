# app/main.py
from __future__ import annotations

import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

# ‚îÄ‚îÄ –†–û–£–¢–ï–†–´, –≥–¥–µ –∏–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞ = router ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from app.routers import (
    start as r_start,            # r_start.router
    common as r_common_guard,    # r_common_guard.router
    privacy as r_privacy,        # r_privacy.router
    progress as r_progress,      # r_progress.router
    settings as r_settings,      # r_settings.router
    extended as r_extended,      # r_extended.router
    training as r_training,      # r_training.router
    casting as r_casting,        # r_casting.router (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    # apply as r_apply,          # ‚ö†Ô∏è legacy-–∞–Ω–∫–µ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –ù–ï –ø–æ–¥–∫–ª—é—á–∞–µ–º (—Å–º. –Ω–∏–∂–µ)
)

# ‚îÄ‚îÄ –†–û–£–¢–ï–†–´ —Å –æ—Å–æ–±—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from app.routers.entrypoints import go as entrypoints_router   # –µ–¥–∏–Ω—ã–π –≤—Ö–æ–¥ (–∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏)
from app.routers.help import help_router                       # /help + –º–µ–Ω—é/–ø–æ–ª–∏—Ç–∏–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from app.routers.leader import leader_router                   # üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–Ω–æ–≤—ã–π)
from app.routers.minicasting import mc_router                  # üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="extended", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) —Å—Ö–µ–º–∞ –ë–î
    await ensure_schema()

    # 2) –±–æ—Ç/DP
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) –∞–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç long polling: —É–±–∏—Ä–∞–µ–º webhook –∏ —Å—Ä–µ–∑–∞–µ–º –≤–∏—Å—è—á–∏–µ –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted, pending updates dropped")

    # 4) –ø–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –í–ê–ñ–ï–ù
    #    –°–Ω–∞—á–∞–ª–∞ –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏), –∑–∞—Ç–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã.
    dp.include_router(entrypoints_router)   # ‚Üê –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç /menu, /training, —Ç–µ–∫—Å—Ç—ã –∏–∑ Reply –∏ go:*
    dp.include_router(r_start.router)       # /start –∏ –¥–∏–ø–ª–∏–Ω–∫–∏

    # FSM-—Å—Ü–µ–Ω–∞—Ä–∏–∏
    dp.include_router(mc_router)            # üé≠ –ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥
    dp.include_router(leader_router)        # üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)

    # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ/–æ–±—â–∏–µ
    dp.include_router(r_common_guard.router)
    dp.include_router(help_router)          # /help, go:menu, go:privacy, go:settings
    dp.include_router(r_privacy.router)
    dp.include_router(r_progress.router)
    dp.include_router(r_settings.router)
    dp.include_router(r_extended.router)

    # –ø—Ä–æ—á–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    dp.include_router(r_training.router)
    dp.include_router(r_casting.router)

    # ‚ö†Ô∏è legacy ¬´apply¬ª-–∞–Ω–∫–µ—Ç–∞ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å ¬´üß≠ –ü—É—Ç—å –ª–∏–¥–µ—Ä–∞¬ª –∫–∞–∫ —Ç–µ–∫—Å—Ç.
    #    –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤–Ω—É—Ç—Ä–∏ —Ä–æ—É—Ç–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /apply_legacy, callback_data="legacy:*").
    # dp.include_router(r_apply.router)

    # 5) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 6) polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
