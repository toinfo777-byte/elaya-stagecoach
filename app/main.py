from __future__ import annotations

import asyncio
import importlib
import logging
import os
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats

from app.config import settings

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===============================================================
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "DEBUG"),
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("main")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ================================================================
BOT_TOKEN = settings.bot_token or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ settings.bot_token")

DATABASE_URL = settings.db_url or os.getenv("DATABASE_URL", "sqlite:///elaya.db")


# === –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ==============================================================
def _import_router(module_base: str, name: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—É—Ç–µ—Ä –∏–∑:
      1) app.routers.<name>  (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è router –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è)
      2) app.routers.<name>.router (–µ—Å–ª–∏ —Ä–æ—É—Ç–µ—Ä –ª–µ–∂–∏—Ç –ø–æ–¥–º–æ–¥—É–ª–µ–º)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Router –∏–ª–∏ None.
    """
    candidates = [
        f"{module_base}.{name}",
        f"{module_base}.{name}.router",
    ]
    for cand in candidates:
        try:
            mod = importlib.import_module(cand)
            # a) —Å–∞–º –º–æ–¥—É–ª—å ‚Äî –µ—Å–ª–∏ –æ–Ω —É–∂–µ router
            if getattr(mod, "__class__", None).__name__ == "Router":
                return mod
            # b) –ø–æ–ª–µ router –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è
            router = getattr(mod, "router", None)
            if router is not None:
                return router
        except Exception as e:
            log.debug("Import miss: %s (%s)", cand, e)
    return None


def _include_router_try_both(dp: Dispatcher, name: str):
    router = _import_router("app.routers", name)
    if router is None:
        log.warning("Router '%s' NOT found ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é", name)
        return False
    dp.include_router(router)
    log.info("‚úÖ Router '%s' –ø–æ–¥–∫–ª—é—á—ë–Ω: %s", name, router)
    return True


async def _set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å / –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())
    log.info("‚úÖ /–∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤")


# === Bootstrap ================================================================
def build_dispatcher() -> Dispatcher:
    dp = Dispatcher()

    routers_order = [
        # –±–∞–∑–æ–≤—ã–µ
        "system",
        "deeplink",
        "cancel",

        # –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –º–∞–ª–µ–Ω—å–∫–æ–µ –º–µ–Ω—é
        "onboarding",
        "reply_shortcuts",

        # –æ—Å–Ω–æ–≤–Ω–æ–µ
        "menu",
        "training",
        "casting",
        "progress",
        "apply",
        "premium",
        "privacy",
        "help",

        # –æ—Ç–∑—ã–≤—ã/–æ—Ü–µ–Ω–∫–∏
        "feedback",

        # —à–æ—Ä—Ç–∫–∞—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        "shortcuts",
        "settings",

        # –æ—Ç—á—ë—Ç—ã/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        "analytics",
    ]

    for name in routers_order:
        _include_router_try_both(dp, name)

    return dp


async def main():
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML"),
    )
    dp = build_dispatcher()

    await _set_commands(bot)

    log.info("üöÄ Starting long polling‚Ä¶")
    await dp.start_polling(bot, allowed_updates=None)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped.")
