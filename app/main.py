from __future__ import annotations
import asyncio
import logging

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, BotCommand

from app.config import settings
from app.hq import build_hq_message

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("elaya.hq")

async def cmd_healthz(m: Message):
    await m.answer("pong üü¢")

async def cmd_hq(m: Message, command: CommandObject | None = None):
    # /hq ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    await m.answer(build_hq_message())

async def cmd_start_private(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø HQ-–±–æ—Ç –≠–ª–∞–π–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /hq ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞\n"
        "‚Ä¢ /healthz ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
    )

async def on_startup(bot: Bot):
    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –∫–ª–∏–µ–Ω—Ç–µ
    await bot.set_my_commands(
        [
            BotCommand(command="hq", description="HQ-—Å–≤–æ–¥–∫–∞"),
            BotCommand(command="healthz", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"),
            BotCommand(command="start", description="–û –±–æ—Ç–µ"),
        ]
    )
    log.info("Bot started: env=%s mode=%s build=%s",
             settings.env, settings.mode, settings.build_mark)

def setup_routes(dp: Dispatcher):
    # –†–∞–∑—Ä–µ—à–∞–µ–º /hq –∏ /healthz –≤ –ª—é–±–æ–º —Ç–∏–ø–µ —á–∞—Ç–æ–≤ (—Å privacy mode –≤–∫–ª—é—á–µ–Ω–Ω—ã–º
    # –±–æ—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ)
    dp.message.register(cmd_healthz, Command("healthz"))
    dp.message.register(cmd_hq,      Command("hq"))

    # /start ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    dp.message.register(
        cmd_start_private,
        Command("start"),
        F.chat.type == ChatType.PRIVATE
    )

async def main():
    bot = Bot(
        token=settings.token,
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
    )
    dp = Dispatcher()
    setup_routes(dp)
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
