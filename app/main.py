from __future__ import annotations

import asyncio
import logging
import importlib

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

from app.config import settings
from app.storage.repo import ensure_schema

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("main")


def _get_router(module_path: str, candidates: list[str]):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç-—Ä–æ—É—Ç–µ—Ä
    –ø–æ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º—ë–Ω. –ë—Ä–æ—Å–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–π ImportError, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    mod = importlib.import_module(module_path)
    for name in candidates:
        r = getattr(mod, name, None)
        if r is not None:
            return r
    raise ImportError(
        f"{module_path} must export one of {candidates}. "
        f"Found: {', '.join([k for k in dir(mod) if not k.startswith('_')])}"
    )


# === –†–æ—É—Ç–µ—Ä—ã (–ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∏–º—ë–Ω) ===
go_router       = _get_router("app.routers.entrypoints", ["go_router", "router"])
help_router     = _get_router("app.routers.help",        ["help_router", "router"])
tr_router       = _get_router("app.routers.training",    ["tr_router", "router"])
mc_router       = _get_router("app.routers.minicasting", ["mc_router", "router", "routers"])
leader_router   = _get_router("app.routers.leader",      ["leader_router", "router"])
progress_router = _get_router("app.routers.progress",    ["progress_router", "router"])


async def _set_commands(bot: Bot) -> None:
    cmds = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"),
        BotCommand(command="menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="training", description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting", description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress", description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="apply", description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞"),
        BotCommand(command="privacy", description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="extended", description="–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="cancel", description="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É"),
    ]
    await bot.set_my_commands(cmds)


async def main() -> None:
    # 1) —Å—Ö–µ–º–∞ –ë–î
    await ensure_schema()

    # 2) –±–æ—Ç/DP
    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) —Å–Ω—è—Ç—å webhook –∏ –¥—Ä–æ–ø–Ω—É—Ç—å ¬´–≤–∏—Å—è—á–∏–µ¬ª –∞–ø–¥–µ–π—Ç—ã (–∞–Ω—Ç–∏-–∫–æ–Ω—Ñ–ª–∏–∫—Ç polling)
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted, pending updates dropped")

    # 4) –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥/–∞–ª–∏–∞—Å—ã, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª—ã
    dp.include_routers(
        go_router,
        help_router,
        tr_router,
        mc_router,
        leader_router,
        progress_router,
    )

    # 5) –∫–æ–º–∞–Ω–¥—ã
    await _set_commands(bot)
    log.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # 6) polling
    log.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
