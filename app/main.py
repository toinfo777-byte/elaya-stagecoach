from __future__ import annotations

import asyncio
import logging
import hashlib
from inspect import iscoroutinefunction

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from aiogram.exceptions import TelegramBadRequest

from app.config import settings
from app.storage.repo import ensure_schema
from app.build import BUILD_MARK
from app.routers.diag import router as diag_router
from app.routers.panic import router as panic_router


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
log = logging.getLogger("main")


async def _set_commands(bot: Bot) -> None:
    await bot.set_my_commands(
        [
            BotCommand(command="start",     description="–ó–∞–ø—É—Å–∫ / –º–µ–Ω—é"),
            BotCommand(command="menu",      description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="ping",      description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"),
            BotCommand(command="build",     description="–¢–µ–∫—É—â–∏–π –±–∏–ª–¥"),
            BotCommand(command="who",       description="–ò–Ω—Ñ–æ –æ –±–æ—Ç–µ / token-hash"),
            BotCommand(command="webhook",   description="–°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞"),
            BotCommand(command="panicmenu", description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"),
            BotCommand(command="panicoff",  description="–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        ]
    )


async def _guard_logged_out(coro, *, what: str):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º TelegramBadRequest('Logged out') –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫."""
    try:
        return await coro
    except TelegramBadRequest as e:
        if "Logged out" in str(e):
            log.warning("%s: Bot API reports 'Logged out' ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º", what)
            return None
        raise


async def main() -> None:
    log.info("=== BUILD %s ===", BUILD_MARK)

    # ensure_schema: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º sync/async
    try:
        if iscoroutinefunction(ensure_schema):
            await ensure_schema()
        else:
            ensure_schema()
        log.info("DB schema ensured")
    except Exception:
        log.exception("ensure_schema failed")

    # Bot/Dispatcher
    bot = Bot(token=settings.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # delete_webhook: –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å "Logged out" ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    await _guard_logged_out(bot.delete_webhook(drop_pending_updates=True), what="delete_webhook")

    # –†–æ—É—Ç–µ—Ä—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    dp.include_router(diag_router);  log.info("‚úÖ router loaded: diag")
    dp.include_router(panic_router); log.info("‚úÖ router loaded: panic")

    # –ö–æ–º–∞–Ω–¥—ã: —Ç–æ–∂–µ –ø–æ–¥ ¬´–≥–≤–∞—Ä–¥–æ–º¬ª
    await _guard_logged_out(_set_commands(bot), what="set_my_commands")

    # –õ–æ–≥–∏ –æ –±–æ—Ç–µ
    me = await bot.get_me()
    log.info("üîë Token hash: %s", hashlib.md5(settings.bot_token.encode()).hexdigest()[:8])
    log.info("ü§ñ Bot: @%s (ID: %s)", me.username, me.id)
    log.info("üöÄ Start polling‚Ä¶")

    # Polling
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("‚èπ Stopped by user")
