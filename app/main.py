# app/main.py
import asyncio
import logging
from datetime import datetime, timedelta, timezone

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats

from app.config import settings
from app.middlewares.error_handler import ErrorsMiddleware
from app.middlewares.source_tags import SourceTagsMiddleware
from app.storage.repo import init_db

# ===== –†–û–£–¢–ï–†–´ (—è–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω) =====
from app.routers.smoke import router as smoke_router               # /ping, /health
from app.routers.apply import router as apply_router               # –∑–∞—è–≤–∫–∞
from app.routers.deeplink import router as deeplink_router         # –¥–∏–ø–ª–∏–Ω–∫–∏ /start <payload>
from app.routers.shortcuts import router as shortcuts_router       # —à–æ—Ä—Ç–∫–∞—Ç—ã (/training, /casting, –∫–Ω–æ–ø–∫–∏) –í –õ–Æ–ë–û–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏
from app.routers.onboarding import router as onboarding_router     # –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ (/start)
from app.routers.coach import router as coach_router               # –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫
from app.routers.training import router as training_router         # —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
from app.routers.casting import router as casting_router           # –º–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥
from app.routers.progress import router as progress_router         # –ø—Ä–æ–≥—Ä–µ—Å—Å
from app.routers.feedback import router as feedback_router         # –æ—Ç–∑—ã–≤—ã (–∏ –º–µ—Ç—Ä–∏–∫–∞ feedback_added)
from app.routers.system import router as system_router             # /help, /privacy, /whoami, /version, /health
from app.routers.settings import router as settings_router         # —Ç–µ—Ö.–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from app.routers.admin import router as admin_router               # –∞–¥–º–∏–Ω–∫–∞
from app.routers.premium import router as premium_router           # –ø–ª–∞—Ç–∞/–∑–∞–≥–ª—É—à–∫–∏
from app.routers.metrics import router as metrics_router           # ‚úÖ /metrics (–∞–¥–º–∏–Ω—ã)
from app.routers.cancel import router as cancel_router             # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ /cancel
from app.routers.menu import router as menu_router                 # –º–µ–Ω—é (–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º)

# ‚¨áÔ∏è –ù–û–í–û–ï: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤ (–∫–Ω–æ–ø–∫–∏ üî•/üëå/üòê + ¬´1 —Ñ—Ä–∞–∑–∞¬ª)
from app.bot.handlers.feedback import router as feedback2_router

# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SQLite
from app.utils.maintenance import backup_sqlite, vacuum_sqlite

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger(__name__)


# ====== —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ë–î ======
async def _sleep_until_utc(hour: int, minute: int = 0, dow: int | None = None):
    now = datetime.now(timezone.utc).replace(second=0, microsecond=0)
    target = now.replace(hour=hour, minute=minute)
    if target <= now:
        target += timedelta(days=1)
    if dow is not None:
        while target.weekday() != dow:
            target += timedelta(days=1)
    await asyncio.sleep((target - now).total_seconds())


async def _backup_loop():
    while True:
        await _sleep_until_utc(2, 0)  # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 02:00 UTC
        try:
            path = backup_sqlite()
            log.info("Backup done: %s", path)
        except Exception as e:
            log.exception("Backup failed: %s", e)


async def _vacuum_loop():
    while True:
        await _sleep_until_utc(2, 5, dow=6)  # –≤—Å 02:05 UTC
        try:
            vacuum_sqlite()
            log.info("Vacuum done")
        except Exception as e:
            log.exception("Vacuum failed: %s", e)


# ====== –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ======
async def setup_commands(bot: Bot) -> None:
    user_cmds = [
        BotCommand(command="start",     description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="apply",     description="–ü—É—Ç—å –ª–∏–¥–µ—Ä–∞ (–∑–∞—è–≤–∫–∞)"),
        BotCommand(command="coach_on",  description="–í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
        BotCommand(command="coach_off", description="–í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
        BotCommand(command="ask",       description="–°–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞"),
        BotCommand(command="training",  description="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–Ω—è"),
        BotCommand(command="casting",   description="–ú–∏–Ω–∏-–∫–∞—Å—Ç–∏–Ω–≥"),
        BotCommand(command="progress",  description="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand(command="cancel",    description="–°–±—Ä–æ—Å–∏—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="help",      description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="privacy",   description="–ü–æ–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="version",   description="–í–µ—Ä—Å–∏—è"),
    ]
    await bot.set_my_commands(user_cmds, scope=BotCommandScopeAllPrivateChats())


# ====== main ======
async def main():
    if not settings.bot_token:
        raise RuntimeError("BOT_TOKEN is empty. Set it in .env")

    init_db()

    bot = Bot(token=settings.bot_token)
    dp = Dispatcher(storage=MemoryStorage())

    # middlewares
    dp.message.middleware(SourceTagsMiddleware())      # –∏—Å—Ç–æ—á–Ω–∏–∫ first/last_source
    dp.callback_query.middleware(SourceTagsMiddleware())
    dp.message.middleware(ErrorsMiddleware())          # –µ–¥–∏–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
    dp.callback_query.middleware(ErrorsMiddleware())

    # –ü–û–†–Ø–î–û–ö –í–ê–ñ–ï–ù!
    for r in (
        smoke_router,        # –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        apply_router,
        deeplink_router,     # –¥–∏–ø–ª–∏–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –†–ê–ù–û
        shortcuts_router,    # /training, /casting –∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        onboarding_router,   # /start –ø–æ–ø–∞–¥–∞–µ—Ç —Å—é–¥–∞ —Ä–∞–Ω—å—à–µ coach
        coach_router,
        training_router,
        casting_router,
        progress_router,

        # –Ω–∞—à –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤ (–∫–Ω–æ–ø–∫–∏ üî•/üëå/üòê + ¬´1 —Ñ—Ä–∞–∑–∞¬ª)
        feedback2_router,

        # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ—è –º–µ—Ç—Ä–∏–∫–∞/–ª–æ–≥–∏–∫–∞)
        feedback_router,

        system_router,
        settings_router,
        admin_router,
        premium_router,
        metrics_router,      # ‚úÖ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ cancel/menu
        cancel_router,       # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–æ –º–µ–Ω—é
        menu_router,         # –º–µ–Ω—é ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    ):
        dp.include_router(r)
        log.info("Included router: %s", getattr(r, "name", r))

    async with bot:
        try:
            await bot.delete_webhook(drop_pending_updates=False)
        except Exception as e:
            log.warning("delete_webhook failed: %s", e)

        try:
            await setup_commands(bot)
        except Exception as e:
            log.warning("setup_commands failed: %s", e)

        # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(_backup_loop())
        asyncio.create_task(_vacuum_loop())

        await dp.start_polling(
            bot,
            allowed_updates=dp.resolve_used_update_types(),
            polling_timeout=30,
        )


if __name__ == "__main__":
    asyncio.run(main())
