# app/main.py
from __future__ import annotations

import asyncio
import logging
import os
from importlib import import_module

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.sentry import init_sentry, capture_test_message

# ---------------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ---------------------------------------------------------------------------

RELEASE = os.getenv("SHORT_SHA", "local").strip() or "local"
ENV = os.getenv("ENV", "develop").strip() or "develop"

# ---------------------------------------------------------------------------
# –û–±—ë—Ä—Ç–∫–∞ ensure_schema: –Ω–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç
# ---------------------------------------------------------------------------

try:
    # –ï—Å–ª–∏ —É —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏—è –∂–∏–≤—ë—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å
    from app.storage import ensure_schema as _ensure_schema  # type: ignore
except Exception:
    _ensure_schema = None  # type: ignore


def ensure_schema() -> None:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ö–µ–º—ã/–º–∏–≥—Ä–∞—Ü–∏–π. –ù–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è.
    –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π.
    """
    if _ensure_schema is None:
        logging.info("‚ÑπÔ∏è  ensure_schema: no-op (module not found)")
        return
    _ensure_schema()
    logging.info("‚úÖ Schema ensured")


# ---------------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ---------------------------------------------------------------------------

def _setup_logging_from_env() -> None:
    raw = (os.getenv("LOG_LEVEL") or "INFO").strip().upper()
    level = {
        "INFO": "INFO",
        "DEBUG": "DEBUG",
        "WARNING": "WARNING",
        "ERROR": "ERROR",
    }.get(raw, "INFO")

    logging.basicConfig(level=getattr(logging, level))
    logging.info(f"Logging level set to: {level}")


# ---------------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ---------------------------------------------------------------------------

async def main() -> None:
    _setup_logging_from_env()

    # 1) –°—Ö–µ–º–∞/–º–∏–≥—Ä–∞—Ü–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    ensure_schema()

    # 2) –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    #    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –ª–µ–∂–∏—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ BOT_TOKEN.
    token = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("Bot token is not set (env var TELEGRAM_TOKEN or BOT_TOKEN)")

    bot = Bot(
        token=token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # 3) –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –º—è–≥–∫–æ: –µ—Å–ª–∏ –º–æ–¥—É–ª—è –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    def safe_include(module_name: str, name: str) -> None:
        try:
            module = import_module(module_name)
            dp.include_router(getattr(module, "router"))
            logging.info(f"‚úÖ router loaded: {name}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è router module not found: {module_name} ({e})")

    routers = [
        "entrypoints",
        "help",
        "aliases",       # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî —ç—Ç–æ –æ–∫–µ–π
        "onboarding",
        "system",
        "minicasting",
        "leader",
        "training",
        "progress",
        "privacy",
        "settings",
        "extended",
        "casting",
        "apply",
        "faq",
        "devops_sync",
        "panic",
        "diag",
    ]

    for name in routers:
        safe_include(f"app.routers.{name}", name)

    logging.info(f"=== BUILD {RELEASE or 'local'} ===")
    logging.info("üöÄ Start polling‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("=== INIT SENTRY BLOCK EXECUTION ===")
    sentry_ready = init_sentry(env=ENV, release=RELEASE)

    # –®–ª—ë–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –≤–Ω–µ prod –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω DSN
    if sentry_ready and ENV != "prod":
        capture_test_message()

    asyncio.run(main())
