name: Build & Push Docker image to GHCR

on:
  push:
    branches: [ "develop" ]
    paths-ignore:
      - "**.md"
      - "**/.gitignore"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=develop
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # –¢—Ä–∏–≥–≥–µ—Ä–∏–º Render: —Å–Ω–∞—á–∞–ª–∞ STAGING, –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî PROD.
      # –®–∞–≥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∞–ª–∏—Ç job, –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç HTTP-–∫–æ–¥.
      - name: Trigger Render deploy (staging ‚Üí prod fallback, soft)
        if: ${{ success() }}
        env:
          RENDER_STAGING_HOOK: ${{ secrets.RENDER_STAGING_HOOK }}
          RENDER_DEPLOY_HOOK:  ${{ secrets.RENDER_DEPLOY_HOOK }}
        shell: bash
        run: |
          set +e
          HOOK_URL="${RENDER_STAGING_HOOK:-$RENDER_DEPLOY_HOOK}"

          if [ -z "$HOOK_URL" ]; then
            echo "üîπ No Render hook provided. Skipping deploy hook."
            exit 0
          fi

          MASKED="${HOOK_URL%%\?*}?key=***"
          echo "üîπ POST ${MASKED}"
          # –î–∞–¥–∏–º —Ä–µ–µ—Å—Ç—Ä—É —Ä–∞–∑–¥–∞—Ç—å —Ç–µ–≥
          sleep 10

          # –í—ã–ø–æ–ª–Ω–∏–º –∑–∞–ø—Ä–æ—Å; –≤—ã–≤–µ–¥–µ–º —Ç–µ–ª–æ –≤ STDERR, –∞ –∫–æ–¥ –≤ STDOUT
          HTTP_CODE=$(curl -sS -X POST -o >(cat >&2) -w "%{http_code}" "$HOOK_URL")
          CURL_EXIT=$?

          echo "üîπ curl exit=$CURL_EXIT, http_code=$HTTP_CODE"
          if [ $CURL_EXIT -ne 0 ]; then
            echo "‚ö†Ô∏è Curl error (network/SSL). –ù–µ –≤–∞–ª–∏–º pipeline."
          fi
          case "$HTTP_CODE" in
            200|201|202) echo "‚úÖ Render accepted deploy." ;;
            0|"" )       echo "‚ö†Ô∏è No HTTP code captured." ;;
            * )          echo "‚ö†Ô∏è Render returned non-2xx ($HTTP_CODE). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º." ;;
          esac

          # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ñ–µ–π–ª–∏–º —à–∞–≥ –∏–∑-–∑–∞ —Ö—É–∫–∞
          exit 0

      # –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è ‚Äî —à–ª—ë–º repository_dispatch, —á—Ç–æ–±—ã main —Å–¥–µ–ª–∞–ª –ø–æ—Å—Ç-–æ—Ç—á—ë—Ç
      - name: Dispatch post-deploy status_report
        if: ${{ success() }}
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type":"status_report","client_payload":{"source":"render_deploy","env":"develop"}}'
