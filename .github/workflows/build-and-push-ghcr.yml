name: Build & Push Docker image to GHCR

on:
  push:
    branches: [ "develop" ]
    paths-ignore:
      - "**.md"
      - "**/.gitignore"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=develop
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Триггерим Render: сначала staging, затем prod (fallback).
      - name: Trigger Render deploy (staging → prod fallback)
        if: ${{ success() }}
        env:
          RENDER_STAGING_HOOK: ${{ secrets.RENDER_STAGING_HOOK }}
          RENDER_DEPLOY_HOOK:  ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          HOOK_URL="${RENDER_STAGING_HOOK:-$RENDER_DEPLOY_HOOK}"
          if [ -z "$HOOK_URL" ]; then
            echo "No Render hook provided. Skipping."
            exit 0
          fi

          echo "Using Render hook: ${HOOK_URL%%\?*}?... (masked)"
          # Дадим реестру время раздать тег
          sleep 10
          # Выполним запрос и выведем HTTP-код; не падаем при ошибке
          HTTP_CODE=$(curl -sS -X POST -o /dev/stderr -w "%{http_code}" "$HOOK_URL" || true)
          echo "Render deploy hook HTTP code: $HTTP_CODE"
          case "$HTTP_CODE" in
            200|201|202) echo "Render accepted deploy."; ;;
            *) echo "⚠️ Render returned non-2xx ($HTTP_CODE). Continuing pipeline."; ;;
          esac

      # После деплоя — репорт в main через repository_dispatch
      - name: Dispatch post-deploy status_report
        if: ${{ success() }}
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type":"status_report","client_payload":{"source":"render_deploy","env":"develop"}}'
