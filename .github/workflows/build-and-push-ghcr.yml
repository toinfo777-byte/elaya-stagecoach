name: Build & Push Docker image to GHCR

on:
  workflow_dispatch:
  push:
    branches: [ "elaya-core-202510", "develop", "staging" ]
    paths-ignore:
      - "docs/**"
      - "**/*.md"

permissions:
  contents: write     # –Ω—É–∂–Ω–æ –¥–ª—è repository_dispatch
  packages: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute build meta
        run: |
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_MARK=deploy-${{ github.run_id }}-$(date -u +'%Y%m%dT%H%M%SZ')" >> $GITHUB_ENV

          echo "üí° GITHUB_REF_NAME=$GITHUB_REF_NAME"

          if [ "$GITHUB_REF_NAME" = "staging" ]; then
            DEP_TAG=staging
          else
            DEP_TAG=develop
          fi
          echo "DEP_TAG=$DEP_TAG" >> $GITHUB_ENV

          # –ó–∞–¥–∞—ë–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–≥ –æ–±—Ä–∞–∑–∞, —á–∞—Å—Ç—å —Å–ª–µ–≤–∞ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GitHub
          echo "IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/elaya-stagecoach:${DEP_TAG}" >> $GITHUB_ENV

          echo "IMAGE_TAG set to $(grep ^IMAGE_TAG= $GITHUB_ENV | cut -d= -f2)"
          echo "BUILD_MARK=$BUILD_MARK SHORT_SHA=$SHORT_SHA DEP_TAG=$DEP_TAG"

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository_owner }}/elaya-stagecoach:${{ github.sha }}
          build-args: |
            BUILD_MARK=${{ env.BUILD_MARK }}
            SHORT_SHA=${{ env.SHORT_SHA }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
          labels: |
            org.opencontainers.image.revision=${{ env.SHORT_SHA }}
            org.opencontainers.image.version=${{ env.BUILD_MARK }}
            org.opencontainers.image.source=${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Trigger Render deploy (develop)
        if: ${{ success() && github.ref_name == 'develop' }}
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then
            echo "Triggering Render (develop)‚Ä¶"
            curl -fsS -X POST "$RENDER_DEPLOY_HOOK"
          else
            echo "‚ö†Ô∏è No RENDER_DEPLOY_HOOK, skipping."
          fi

      - name: Trigger Render deploy (staging)
        if: ${{ success() && github.ref_name == 'staging' }}
        env:
          RENDER_STAGING_HOOK: ${{ secrets.RENDER_STAGING_HOOK }}
        run: |
          if [ -n "$RENDER_STAGING_HOOK" ]; then
            echo "Triggering Render (staging)‚Ä¶"
            curl -fsS -X POST "$RENDER_STAGING_HOOK"
          else
            echo "‚ö†Ô∏è No RENDER_STAGING_HOOK, skipping."
          fi

      - name: Dispatch status_sync
        if: ${{ success() }}
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/dispatches" \
            -d "$(jq -n --arg t "status_sync" \
                         --arg bm "${{ env.BUILD_MARK }}" \
                         --arg sha "${{ env.SHORT_SHA }}" \
                         --arg img "${{ env.IMAGE_TAG }}" \
                         --arg envv "${{ env.DEP_TAG }}" \
                         '{event_type:$t,client_payload:{BUILD_MARK:$bm,SHORT_SHA:$sha,IMAGE_TAG:$img,ENV:$envv}}')"
