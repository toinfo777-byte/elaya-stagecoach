name: Build & Push Docker image to GHCR

on:
  workflow_dispatch:
  push:
    branches: [ "elaya-core-202510", "develop" ]
    paths-ignore:
      - "docs/**"
      - "**/*.md"

permissions:
  contents: read
  packages: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: false

env:
  # базовые переменные
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/elaya-stagecoach
  TAG_SHA: sha-${{ github.sha }}
  TAG_REF: ${{ github.ref_name }}
  # подтягиваем хук из любого из двух возможных секретов
  RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL || secrets.RENDER_DEPLOY_HOOK || '' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (with retry)
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 3
          max_attempts: 4
          retry_on: error
          command: |
            echo "::group::setup-buildx"
            echo "Setting up buildx..."
            gh api --method GET rate_limit >/dev/null 2>&1 || true
            echo "::endgroup::"
            echo "{}" > /tmp/dummy.json

      - name: Really setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.TAG_SHA }}
            type=raw,value=${{ env.TAG_REF }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # Тригерим Render deploy hook (опционально, только из develop)
      - name: Trigger Render deploy (optional)
        if: ${{ env.RENDER_DEPLOY_HOOK_URL != '' && github.ref == 'refs/heads/develop' }}
        run: |
          echo "Triggering Render via $RENDER_DEPLOY_HOOK_URL"
          curl -fsS -X POST "$RENDER_DEPLOY_HOOK_URL"
